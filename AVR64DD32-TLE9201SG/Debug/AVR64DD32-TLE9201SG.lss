
AVR64DD32-TLE9201SG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00806000  00806000  00000db2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00806000  00806000  00000db2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000e20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004452  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002860  00000000  00000000  000053d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e65  00000000  00000000  00007c32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00008a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c14  00000000  00000000  00008d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067c  00000000  00000000  0000a96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000afe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  10:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  14:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  18:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  20:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  28:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  30:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  38:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  44:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  4c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  50:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  54:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  58:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  5c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  60:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  68:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  6c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  70:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  7c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  80:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  84:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  8c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  90:	f3 00       	.word	0x00f3	; ????
  92:	cb 00       	.word	0x00cb	; ????
  94:	cb 00       	.word	0x00cb	; ????
  96:	cb 00       	.word	0x00cb	; ????
  98:	d0 00       	.word	0x00d0	; ????
  9a:	cb 00       	.word	0x00cb	; ????
  9c:	cb 00       	.word	0x00cb	; ????
  9e:	cb 00       	.word	0x00cb	; ????
  a0:	d5 00       	.word	0x00d5	; ????
  a2:	cb 00       	.word	0x00cb	; ????
  a4:	cb 00       	.word	0x00cb	; ????
  a6:	cb 00       	.word	0x00cb	; ????
  a8:	cb 00       	.word	0x00cb	; ????
  aa:	cb 00       	.word	0x00cb	; ????
  ac:	cb 00       	.word	0x00cb	; ????
  ae:	cb 00       	.word	0x00cb	; ????
  b0:	cb 00       	.word	0x00cb	; ????
  b2:	cb 00       	.word	0x00cb	; ????
  b4:	cb 00       	.word	0x00cb	; ????
  b6:	cb 00       	.word	0x00cb	; ????
  b8:	da 00       	.word	0x00da	; ????
  ba:	cb 00       	.word	0x00cb	; ????
  bc:	cb 00       	.word	0x00cb	; ????
  be:	cb 00       	.word	0x00cb	; ????
  c0:	df 00       	.word	0x00df	; ????
  c2:	cb 00       	.word	0x00cb	; ????
  c4:	cb 00       	.word	0x00cb	; ????
  c6:	cb 00       	.word	0x00cb	; ????
  c8:	e4 00       	.word	0x00e4	; ????
  ca:	cb 00       	.word	0x00cb	; ????
  cc:	cb 00       	.word	0x00cb	; ????
  ce:	cb 00       	.word	0x00cb	; ????
  d0:	e9 00       	.word	0x00e9	; ????
  d2:	cb 00       	.word	0x00cb	; ????
  d4:	cb 00       	.word	0x00cb	; ????
  d6:	cb 00       	.word	0x00cb	; ????
  d8:	ee 00       	.word	0x00ee	; ????
  da:	10 01       	movw	r2, r0
  dc:	7d 01       	movw	r14, r26
  de:	15 01       	movw	r2, r10
  e0:	7d 01       	movw	r14, r26
  e2:	36 01       	movw	r6, r12
  e4:	7d 01       	movw	r14, r26
  e6:	51 01       	movw	r10, r2
  e8:	7d 01       	movw	r14, r26
  ea:	63 01       	movw	r12, r6
  ec:	7d 01       	movw	r14, r26
  ee:	75 01       	movw	r14, r10
  f0:	7d 01       	movw	r14, r26
  f2:	7d 01       	movw	r14, r26
  f4:	7d 01       	movw	r14, r26
  f6:	7d 01       	movw	r14, r26
  f8:	7d 01       	movw	r14, r26
  fa:	1e 01       	movw	r2, r28
  fc:	7d 01       	movw	r14, r26
  fe:	3f 01       	movw	r6, r30
 100:	7d 01       	movw	r14, r26
 102:	48 01       	movw	r8, r16
 104:	7d 01       	movw	r14, r26
 106:	5a 01       	movw	r10, r20
 108:	7d 01       	movw	r14, r26
 10a:	6c 01       	movw	r12, r24

0000010c <__ctors_end>:
 10c:	11 24       	eor	r1, r1
 10e:	1f be       	out	0x3f, r1	; 63
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df e7       	ldi	r29, 0x7F	; 127
 116:	de bf       	out	0x3e, r29	; 62

00000118 <__do_clear_bss>:
 118:	20 e6       	ldi	r18, 0x60	; 96
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b0 e6       	ldi	r27, 0x60	; 96
 11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
 120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
 122:	ab 31       	cpi	r26, 0x1B	; 27
 124:	b2 07       	cpc	r27, r18
 126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
 128:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
 12c:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <_exit>

00000130 <__bad_interrupt>:
 130:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000134 <CLOCK_INHF_clock_init>:
 * @details Configures the internal oscillator with a frequency of 24 MHz. 
 *          Optionally enables clock output on pin PA7. A prescaler can be configured if needed.
 */
void CLOCK_INHF_clock_init() {
    /* Enable internal oscillator with a frequency of 24 MHz */
    ccp_write_io((uint8_t *) &CLKCTRL.OSCHFCTRLA, CLKCTRL_FRQSEL_24M_gc); 
 134:	64 e2       	ldi	r22, 0x24	; 36
 136:	88 e6       	ldi	r24, 0x68	; 104
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 97 06 	call	0xd2e	; 0xd2e <ccp_write_io>

    /* Set main clock prescaler (uncomment if required) */
    // ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);

    /* Set main clock to use the internal oscillator as the source */
    ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, 
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 97 06 	call	0xd2e	; 0xd2e <ccp_write_io>
                 CLKCTRL_CLKSEL_OSCHF_gc /* | CLKCTRL_CLKOUT_bm */); 
    // Uncomment | CLKCTRL_CLKOUT_bm if clock output on PA7 is required

    /* Wait for oscillator change to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
 148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 14c:	80 fd       	sbrc	r24, 0
 14e:	fc cf       	rjmp	.-8      	; 0x148 <CLOCK_INHF_clock_init+0x14>
}
 150:	08 95       	ret

00000152 <PLL_init>:
 * 
 * @note Ensure the input frequency does not exceed the PLL's maximum limit.
 */
void PLL_init() {
    /* Configure PLL with a multiplication factor of 2 */
    ccp_write_io((uint8_t *) &CLKCTRL.PLLCTRLA, CLKCTRL_MULFAC_2x_gc); 
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 97 06 	call	0xd2e	; 0xd2e <ccp_write_io>

    /* Wait for PLL configuration to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm) {};
 15c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 160:	85 fd       	sbrc	r24, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <PLL_init+0xa>
}
 164:	08 95       	ret

00000166 <CLOCK_read>:
 * @details Determines the base clock frequency based on oscillator and prescaler settings. 
 *          The maximum frequency is capped at 48 MHz for PLL configurations.
 * 
 * @return uint32_t The current clock frequency in Hz.
 */
uint32_t CLOCK_read() {
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
 17a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
 17e:	e8 2f       	mov	r30, r24
 180:	ec 73       	andi	r30, 0x3C	; 60
 182:	8e 2f       	mov	r24, r30
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	85 32       	cpi	r24, 0x25	; 37
 188:	91 05       	cpc	r25, r1
 18a:	28 f4       	brcc	.+10     	; 0x196 <CLOCK_read+0x30>
 18c:	fc 01       	movw	r30, r24
 18e:	e8 5b       	subi	r30, 0xB8	; 184
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__tablejump2__>
 *          The maximum frequency is capped at 48 MHz for PLL configurations.
 * 
 * @return uint32_t The current clock frequency in Hz.
 */
uint32_t CLOCK_read() {
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	79 e0       	ldi	r23, 0x09	; 9
 19a:	8d e3       	ldi	r24, 0x3D	; 61
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	27 c0       	rjmp	.+78     	; 0x1ee <CLOCK_read+0x88>

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
        case CLKCTRL_FRQSEL_1M_gc: base_freq = 1000000; break;
        case CLKCTRL_FRQSEL_2M_gc: base_freq = 2000000; break;
 1a0:	60 e8       	ldi	r22, 0x80	; 128
 1a2:	74 e8       	ldi	r23, 0x84	; 132
 1a4:	8e e1       	ldi	r24, 0x1E	; 30
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	22 c0       	rjmp	.+68     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_3M_gc: base_freq = 3000000; break;
 1aa:	60 ec       	ldi	r22, 0xC0	; 192
 1ac:	76 ec       	ldi	r23, 0xC6	; 198
 1ae:	8d e2       	ldi	r24, 0x2D	; 45
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	1d c0       	rjmp	.+58     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_8M_gc: base_freq = 8000000; break;
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	72 e1       	ldi	r23, 0x12	; 18
 1b8:	8a e7       	ldi	r24, 0x7A	; 122
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	18 c0       	rjmp	.+48     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_12M_gc: base_freq = 12000000; break;
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	7b e1       	ldi	r23, 0x1B	; 27
 1c2:	87 eb       	ldi	r24, 0xB7	; 183
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_16M_gc: base_freq = 16000000; break;
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	74 e2       	ldi	r23, 0x24	; 36
 1cc:	84 ef       	ldi	r24, 0xF4	; 244
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e c0       	rjmp	.+28     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_20M_gc: base_freq = 20000000; break;
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	7d e2       	ldi	r23, 0x2D	; 45
 1d6:	81 e3       	ldi	r24, 0x31	; 49
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_24M_gc: base_freq = 24000000; break;
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	76 e3       	ldi	r23, 0x36	; 54
 1e0:	8e e6       	ldi	r24, 0x6E	; 110
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <CLOCK_read+0x88>
uint32_t CLOCK_read() {
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
        case CLKCTRL_FRQSEL_1M_gc: base_freq = 1000000; break;
 1e6:	60 e4       	ldi	r22, 0x40	; 64
 1e8:	72 e4       	ldi	r23, 0x42	; 66
 1ea:	8f e0       	ldi	r24, 0x0F	; 15
 1ec:	90 e0       	ldi	r25, 0x00	; 0
        case CLKCTRL_FRQSEL_20M_gc: base_freq = 20000000; break;
        case CLKCTRL_FRQSEL_24M_gc: base_freq = 24000000; break;
    }

    // Adjust base frequency for peripheral clock prescaler
    if ((TCD0.CTRLA & TCD_CLKSEL_gm) == TCD_CLKSEL_CLKPER_gc) {
 1ee:	20 91 80 0b 	lds	r18, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 1f2:	20 76       	andi	r18, 0x60	; 96
 1f4:	20 36       	cpi	r18, 0x60	; 96
 1f6:	09 f0       	breq	.+2      	; 0x1fa <CLOCK_read+0x94>
 1f8:	80 c0       	rjmp	.+256    	; 0x2fa <CLOCK_read+0x194>
        if (CLKCTRL.MCLKCTRLB & CLKCTRL_PEN_bm) {
 1fa:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
 1fe:	20 ff       	sbrs	r18, 0
 200:	7c c0       	rjmp	.+248    	; 0x2fa <CLOCK_read+0x194>
            switch (CLKCTRL.MCLKCTRLB & CLKCTRL_PDIV_gm) {
 202:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
 206:	e2 2f       	mov	r30, r18
 208:	ee 71       	andi	r30, 0x1E	; 30
 20a:	0e 2f       	mov	r16, r30
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	09 31       	cpi	r16, 0x19	; 25
 210:	11 05       	cpc	r17, r1
 212:	08 f0       	brcs	.+2      	; 0x216 <CLOCK_read+0xb0>
 214:	72 c0       	rjmp	.+228    	; 0x2fa <CLOCK_read+0x194>
 216:	f8 01       	movw	r30, r16
 218:	e3 59       	subi	r30, 0x93	; 147
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__tablejump2__>
                case CLKCTRL_PDIV_2X_gc:  base_freq /= 2; break;
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	77 95       	ror	r23
 226:	67 95       	ror	r22
 228:	68 c0       	rjmp	.+208    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_4X_gc:  base_freq /= 4; break;
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	77 95       	ror	r23
 230:	67 95       	ror	r22
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	77 95       	ror	r23
 238:	67 95       	ror	r22
 23a:	5f c0       	rjmp	.+190    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_6X_gc:  base_freq /= 6; break;
 23c:	2b ea       	ldi	r18, 0xAB	; 171
 23e:	3a ea       	ldi	r19, 0xAA	; 170
 240:	4a ea       	ldi	r20, 0xAA	; 170
 242:	5a ea       	ldi	r21, 0xAA	; 170
 244:	0e 94 36 06 	call	0xc6c	; 0xc6c <__umulsidi3>
 248:	00 e2       	ldi	r16, 0x20	; 32
 24a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__lshrdi3>
 24e:	82 2e       	mov	r8, r18
 250:	93 2e       	mov	r9, r19
 252:	a4 2e       	mov	r10, r20
 254:	b5 2e       	mov	r11, r21
 256:	c5 01       	movw	r24, r10
 258:	b4 01       	movw	r22, r8
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	77 95       	ror	r23
 260:	67 95       	ror	r22
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	77 95       	ror	r23
 268:	67 95       	ror	r22
 26a:	47 c0       	rjmp	.+142    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_8X_gc:  base_freq /= 8; break;
 26c:	68 94       	set
 26e:	12 f8       	bld	r1, 2
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	77 95       	ror	r23
 276:	67 95       	ror	r22
 278:	16 94       	lsr	r1
 27a:	d1 f7       	brne	.-12     	; 0x270 <CLOCK_read+0x10a>
 27c:	3e c0       	rjmp	.+124    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_10X_gc: base_freq /= 10; break;
 27e:	2a e0       	ldi	r18, 0x0A	; 10
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodsi4>
 28a:	ca 01       	movw	r24, r20
 28c:	b9 01       	movw	r22, r18
 28e:	35 c0       	rjmp	.+106    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_12X_gc: base_freq /= 12; break;
 290:	2c e0       	ldi	r18, 0x0C	; 12
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodsi4>
 29c:	ca 01       	movw	r24, r20
 29e:	b9 01       	movw	r22, r18
 2a0:	2c c0       	rjmp	.+88     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_16X_gc: base_freq /= 16; break;
 2a2:	68 94       	set
 2a4:	13 f8       	bld	r1, 3
 2a6:	96 95       	lsr	r25
 2a8:	87 95       	ror	r24
 2aa:	77 95       	ror	r23
 2ac:	67 95       	ror	r22
 2ae:	16 94       	lsr	r1
 2b0:	d1 f7       	brne	.-12     	; 0x2a6 <CLOCK_read+0x140>
 2b2:	23 c0       	rjmp	.+70     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_24X_gc: base_freq /= 24; break;
 2b4:	28 e1       	ldi	r18, 0x18	; 24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodsi4>
 2c0:	ca 01       	movw	r24, r20
 2c2:	b9 01       	movw	r22, r18
 2c4:	1a c0       	rjmp	.+52     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_32X_gc: base_freq /= 32; break;
 2c6:	68 94       	set
 2c8:	14 f8       	bld	r1, 4
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	77 95       	ror	r23
 2d0:	67 95       	ror	r22
 2d2:	16 94       	lsr	r1
 2d4:	d1 f7       	brne	.-12     	; 0x2ca <CLOCK_read+0x164>
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_48X_gc: base_freq /= 48; break;
 2d8:	20 e3       	ldi	r18, 0x30	; 48
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodsi4>
 2e4:	ca 01       	movw	r24, r20
 2e6:	b9 01       	movw	r22, r18
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_64X_gc: base_freq /= 64; break;
 2ea:	68 94       	set
 2ec:	15 f8       	bld	r1, 5
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	77 95       	ror	r23
 2f4:	67 95       	ror	r22
 2f6:	16 94       	lsr	r1
 2f8:	d1 f7       	brne	.-12     	; 0x2ee <CLOCK_read+0x188>
            }
        }
    }

    // Adjust base frequency for PLL
    if ((TCD0.CTRLA & TCD_CLKSEL_gm) == TCD_CLKSEL_PLL_gc) {
 2fa:	20 91 80 0b 	lds	r18, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 2fe:	20 76       	andi	r18, 0x60	; 96
 300:	20 32       	cpi	r18, 0x20	; 32
 302:	49 f5       	brne	.+82     	; 0x356 <CLOCK_read+0x1f0>
        if ((CLKCTRL.PLLCTRLA & CLKCTRL_PLLCTRLA) == CLKCTRL_MULFAC_2x_gc) {
 304:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 308:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 30c:	23 23       	and	r18, r19
 30e:	21 30       	cpi	r18, 0x01	; 1
 310:	29 f4       	brne	.+10     	; 0x31c <CLOCK_read+0x1b6>
            base_freq *= 2;
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	11 c0       	rjmp	.+34     	; 0x33e <CLOCK_read+0x1d8>
        } else if ((CLKCTRL.PLLCTRLA & CLKCTRL_PLLCTRLA) == CLKCTRL_MULFAC_3x_gc) {
 31c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 320:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 324:	23 23       	and	r18, r19
 326:	22 30       	cpi	r18, 0x02	; 2
 328:	51 f4       	brne	.+20     	; 0x33e <CLOCK_read+0x1d8>
            base_freq *= 3;
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
 32e:	cc 0c       	add	r12, r12
 330:	dd 1c       	adc	r13, r13
 332:	ee 1c       	adc	r14, r14
 334:	ff 1c       	adc	r15, r15
 336:	6c 0d       	add	r22, r12
 338:	7d 1d       	adc	r23, r13
 33a:	8e 1d       	adc	r24, r14
 33c:	9f 1d       	adc	r25, r15
        }

        if (base_freq > 48000000) {
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	2c e6       	ldi	r18, 0x6C	; 108
 342:	72 07       	cpc	r23, r18
 344:	2c ed       	ldi	r18, 0xDC	; 220
 346:	82 07       	cpc	r24, r18
 348:	22 e0       	ldi	r18, 0x02	; 2
 34a:	92 07       	cpc	r25, r18
 34c:	20 f0       	brcs	.+8      	; 0x356 <CLOCK_read+0x1f0>
            base_freq = 48000000; ///< Cap at 48 MHz (maximum PLL frequency)
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	7c e6       	ldi	r23, 0x6C	; 108
 352:	8c ed       	ldi	r24, 0xDC	; 220
 354:	92 e0       	ldi	r25, 0x02	; 2
        }
    }

    return base_freq;
}
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	af 90       	pop	r10
 366:	9f 90       	pop	r9
 368:	8f 90       	pop	r8
 36a:	08 95       	ret

0000036c <GPIO_init>:
 * - Configures PORTD for motor control: PWM, DIR, DIS as output.
 * - Configures PORTF for input buttons with pull-up resistors: START/STOP, DIR.
 */
void GPIO_init() {
    /* Configure SPI pins on PORTA */
    PORTA.DIRSET = PIN4_bm | PIN6_bm | PIN7_bm; // Set MOSI (PA4), SCK (PA6), SS (PA7) as outputs
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	f4 e0       	ldi	r31, 0x04	; 4
 370:	80 ed       	ldi	r24, 0xD0	; 208
 372:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN5_bm;                     // Set MISO (PA5) as input
 374:	80 e2       	ldi	r24, 0x20	; 32
 376:	82 83       	std	Z+2, r24	; 0x02

    /* Configure motor control pins on PORTD */
    PORTD.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm; // Set PWM (PD4), DIR (PD5), DIS (PD6) as outputs
 378:	80 e7       	ldi	r24, 0x70	; 112
 37a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>

    /* Configure input buttons on PORTF */
    PORTF.DIRCLR = PIN5_bm | PIN6_bm;           // Set START/STOP (PF5), DIR (PF6) as inputs
 37e:	e0 ea       	ldi	r30, 0xA0	; 160
 380:	f4 e0       	ldi	r31, 0x04	; 4
 382:	80 e6       	ldi	r24, 0x60	; 96
 384:	82 83       	std	Z+2, r24	; 0x02
    PORTF.PIN5CTRL = PORT_PULLUPEN_bm;          // Enable pull-up resistor for START/STOP (PF5)
 386:	88 e0       	ldi	r24, 0x08	; 8
 388:	85 8b       	std	Z+21, r24	; 0x15
    PORTF.PIN6CTRL = PORT_PULLUPEN_bm;          // Enable pull-up resistor for DIR (PF6)
 38a:	86 8b       	std	Z+22, r24	; 0x16
 38c:	08 95       	ret

0000038e <main>:
 * 
 * @return int Always returns 0 (not used in embedded systems).
 */
int main(void)
{
    GPIO_init();
 38e:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_init>
    CLOCK_INHF_clock_init(); ///< Initializes the internal high-frequency clock.
 392:	0e 94 9a 00 	call	0x134	; 0x134 <CLOCK_INHF_clock_init>

    TLE9201SG.pwm_freq = 20000; ///< Sets PWM frequency to 20 kHz. Always set this before mode initialization.
 396:	e0 e0       	ldi	r30, 0x00	; 0
 398:	f0 e6       	ldi	r31, 0x60	; 96
 39a:	80 e2       	ldi	r24, 0x20	; 32
 39c:	9e e4       	ldi	r25, 0x4E	; 78
 39e:	81 8b       	std	Z+17, r24	; 0x11
 3a0:	92 8b       	std	Z+18, r25	; 0x12
    TLE9201SG.duty_cycle = 30.0; ///< Sets duty cycle to 50%. Always set this before mode initialization.
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	a0 ef       	ldi	r26, 0xF0	; 240
 3a8:	b1 e4       	ldi	r27, 0x41	; 65
 3aa:	83 8b       	std	Z+19, r24	; 0x13
 3ac:	94 8b       	std	Z+20, r25	; 0x14
 3ae:	a5 8b       	std	Z+21, r26	; 0x15
 3b0:	b6 8b       	std	Z+22, r27	; 0x16

    TLE9201SG_Mode_init(TLE9201SG_MODE_PWMDIR); ///< Initializes the TLE9201SG in SPI mode.
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <TLE9201SG_Mode_init>

    while (1) {
        if (!(PORTF.IN & PIN5_bm)) { ///< Starts TLE9201SG if PF5 is low.
 3b8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f04a8>
 3bc:	85 fd       	sbrc	r24, 5
 3be:	0e c0       	rjmp	.+28     	; 0x3dc <main+0x4e>
            TLE9201SG_START();
 3c0:	0e 94 c5 03 	call	0x78a	; 0x78a <TLE9201SG_START>
            if (!(PORTF.IN & PIN6_bm)) { ///< Changes direction based on PF6.
 3c4:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f04a8>
 3c8:	86 fd       	sbrc	r24, 6
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <main+0x46>
                TLE9201SG_DIR(1); ///< Sets direction to forward.
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 b8 03 	call	0x770	; 0x770 <TLE9201SG_DIR>
 3d2:	f2 cf       	rjmp	.-28     	; 0x3b8 <main+0x2a>
            } else {
                TLE9201SG_DIR(0); ///< Sets direction to reverse.
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 b8 03 	call	0x770	; 0x770 <TLE9201SG_DIR>
 3da:	ee cf       	rjmp	.-36     	; 0x3b8 <main+0x2a>
            }
        } else { ///< Stops TLE9201SG if PF5 is high.
            TLE9201SG_STOP();
 3dc:	0e 94 ab 03 	call	0x756	; 0x756 <TLE9201SG_STOP>
 3e0:	eb cf       	rjmp	.-42     	; 0x3b8 <main+0x2a>

000003e2 <SPI0_init>:
 * - Configures SPI0 as a Master with a clock speed of 6 MHz (F_CPU/4).
 * - Sets SPI mode 1 for communication with TLE9201SG.
 * - Enables the SPI0 module.
 */
void SPI0_init() {
    SPI0.CTRLA = SPI_MASTER_bm          // Configure as Master
 3e2:	e0 e4       	ldi	r30, 0x40	; 64
 3e4:	f9 e0       	ldi	r31, 0x09	; 9
 3e6:	81 e2       	ldi	r24, 0x21	; 33
 3e8:	80 83       	st	Z, r24
               | SPI_PRESC_DIV4_gc      // Clock speed = F_CPU / 4 = 24 MHz / 4 = 6 MHz
               | SPI_ENABLE_bm;         // Enable SPI
    SPI0.CTRLB = SPI_MODE_1_gc;         // Set SPI mode 1 for TLE9201SG
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	81 83       	std	Z+1, r24	; 0x01
 3ee:	08 95       	ret

000003f0 <SPI0_Start>:
 * @details 
 * - Pulls the Slave Select (SS) line low to indicate the start of communication 
 *   with the SPI slave device.
 */
void SPI0_Start() {
    PORTA.OUTCLR = PIN7_bm; // Set SS (PA7) low
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
 3f6:	08 95       	ret

000003f8 <SPI0_Stop>:
 * @details 
 * - Pulls the Slave Select (SS) line high to indicate the end of communication 
 *   with the SPI slave device.
 */
void SPI0_Stop() {
    PORTA.OUTSET = PIN7_bm; // Set SS (PA7) high
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
 3fe:	08 95       	ret

00000400 <SPI0_Exchange_Data>:
}

uint8_t SPI0_Exchange_Data(uint8_t data_storage) {
 400:	cf 93       	push	r28
 402:	c8 2f       	mov	r28, r24
	SPI0_Start(); //pull ss low
 404:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI0_Start>
    SPI0.DATA = data_storage;
 408:	c0 93 44 09 	sts	0x0944, r28	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
    while (!(SPI0.INTFLAGS & SPI_IF_bm)){};   /* waits until data is exchanged*/
 40c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 410:	88 23       	and	r24, r24
 412:	e4 f7       	brge	.-8      	; 0x40c <SPI0_Exchange_Data+0xc>
	SPI0_Stop(); // pull ss high    
 414:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI0_Stop>
    return SPI0.DATA;
 418:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <TCD0_ON>:
 * @brief Turns on the TCD0 counter.
 * 
 * @details Waits until the TCD is ready to be enabled, then activates the timer.
 */
void TCD0_ON() {
    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until the TCD is ready
 420:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 424:	80 ff       	sbrs	r24, 0
 426:	fc cf       	rjmp	.-8      	; 0x420 <TCD0_ON>
    TCD0.CTRLA |= TCD_ENABLE_bm; ///< Enable the TCD0 counter
 428:	e0 e8       	ldi	r30, 0x80	; 128
 42a:	fb e0       	ldi	r31, 0x0B	; 11
 42c:	80 81       	ld	r24, Z
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <TCD0_OFF>:
 * @brief Turns off the TCD0 counter.
 * 
 * @details Waits until the TCD is ready to be disabled, then deactivates the timer.
 */
void TCD0_OFF() {
    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until the TCD is ready
 434:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 438:	80 ff       	sbrs	r24, 0
 43a:	fc cf       	rjmp	.-8      	; 0x434 <TCD0_OFF>
    TCD0.CTRLA &= ~TCD_ENABLE_bm; ///< Disable the TCD0 counter
 43c:	e0 e8       	ldi	r30, 0x80	; 128
 43e:	fb e0       	ldi	r31, 0x0B	; 11
 440:	80 81       	ld	r24, Z
 442:	8e 7f       	andi	r24, 0xFE	; 254
 444:	80 83       	st	Z, r24
 446:	08 95       	ret

00000448 <PWM_init>:
}


void PWM_init(uint32_t target_freq, float duty_cycle) {
 448:	4f 92       	push	r4
 44a:	5f 92       	push	r5
 44c:	6f 92       	push	r6
 44e:	7f 92       	push	r7
 450:	8f 92       	push	r8
 452:	9f 92       	push	r9
 454:	af 92       	push	r10
 456:	bf 92       	push	r11
 458:	cf 92       	push	r12
 45a:	df 92       	push	r13
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	2b 01       	movw	r4, r22
 466:	3c 01       	movw	r6, r24
 468:	69 01       	movw	r12, r18
 46a:	7a 01       	movw	r14, r20
    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
 46c:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 470:	88 71       	andi	r24, 0x18	; 24
 472:	88 30       	cpi	r24, 0x08	; 8
 474:	31 f0       	breq	.+12     	; 0x482 <PWM_init+0x3a>
 476:	80 31       	cpi	r24, 0x10	; 16
 478:	11 f0       	breq	.+4      	; 0x47e <PWM_init+0x36>
}


void PWM_init(uint32_t target_freq, float duty_cycle) {
    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
 47a:	c1 e0       	ldi	r28, 0x01	; 1
 47c:	03 c0       	rjmp	.+6      	; 0x484 <PWM_init+0x3c>
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
        case TCD_CNTPRES_DIV4_gc:  TCD_prescaler = 4; break;
        case TCD_CNTPRES_DIV32_gc: TCD_prescaler = 32; break;
 47e:	c0 e2       	ldi	r28, 0x20	; 32
 480:	01 c0       	rjmp	.+2      	; 0x484 <PWM_init+0x3c>

void PWM_init(uint32_t target_freq, float duty_cycle) {
    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
        case TCD_CNTPRES_DIV4_gc:  TCD_prescaler = 4; break;
 482:	c4 e0       	ldi	r28, 0x04	; 4
        case TCD_CNTPRES_DIV32_gc: TCD_prescaler = 32; break;
    }
    // Calculate compare registers
    uint16_t cmpbclr = (CLOCK_read() / (TCD_prescaler * target_freq * 2)) - 1;
 484:	0e 94 b3 00 	call	0x166	; 0x166 <CLOCK_read>
 488:	4b 01       	movw	r8, r22
 48a:	5c 01       	movw	r10, r24
 48c:	ac 2f       	mov	r26, r28
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	a3 01       	movw	r20, r6
 492:	92 01       	movw	r18, r4
 494:	0e 94 2b 06 	call	0xc56	; 0xc56 <__muluhisi3>
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	22 0f       	add	r18, r18
 49e:	33 1f       	adc	r19, r19
 4a0:	44 1f       	adc	r20, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	c5 01       	movw	r24, r10
 4a6:	b4 01       	movw	r22, r8
 4a8:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodsi4>
 4ac:	e9 01       	movw	r28, r18
 4ae:	21 97       	sbiw	r28, 0x01	; 1
    uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_cycle / 100.0f)) + 1;
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	48 ec       	ldi	r20, 0xC8	; 200
 4b6:	52 e4       	ldi	r21, 0x42	; 66
 4b8:	c7 01       	movw	r24, r14
 4ba:	b6 01       	movw	r22, r12
 4bc:	0e 94 67 04 	call	0x8ce	; 0x8ce <__divsf3>
 4c0:	6b 01       	movw	r12, r22
 4c2:	7c 01       	movw	r14, r24
 4c4:	be 01       	movw	r22, r28
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatunsisf>
 4ce:	a7 01       	movw	r20, r14
 4d0:	96 01       	movw	r18, r12
 4d2:	0e 94 96 05 	call	0xb2c	; 0xb2c <__mulsf3>
 4d6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__fixunssfsi>
 4da:	6f 5f       	subi	r22, 0xFF	; 255
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
    uint16_t cmpbset = cmpbclr - cmpaset - 1;
 4de:	ce 01       	movw	r24, r28
 4e0:	86 1b       	sub	r24, r22
 4e2:	97 0b       	sbc	r25, r23
 4e4:	01 97       	sbiw	r24, 0x01	; 1

    // Set TCD compare registers
    TCD0.CMPBCLR = cmpbclr;
 4e6:	e0 e8       	ldi	r30, 0x80	; 128
 4e8:	fb e0       	ldi	r31, 0x0B	; 11
 4ea:	c6 a7       	std	Z+46, r28	; 0x2e
 4ec:	d7 a7       	std	Z+47, r29	; 0x2f
    TCD0.CMPBSET = cmpbset;
 4ee:	84 a7       	std	Z+44, r24	; 0x2c
 4f0:	95 a7       	std	Z+45, r25	; 0x2d
    TCD0.CMPASET = cmpaset;
 4f2:	60 a7       	std	Z+40, r22	; 0x28
 4f4:	71 a7       	std	Z+41, r23	; 0x29

}
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	df 90       	pop	r13
 500:	cf 90       	pop	r12
 502:	bf 90       	pop	r11
 504:	af 90       	pop	r10
 506:	9f 90       	pop	r9
 508:	8f 90       	pop	r8
 50a:	7f 90       	pop	r7
 50c:	6f 90       	pop	r6
 50e:	5f 90       	pop	r5
 510:	4f 90       	pop	r4
 512:	08 95       	ret

00000514 <TCD0_init>:
 * 
 * @details Configures the waveform generation mode, fault control, and clock source.
 *          This function also selects the WOC (Waveform Output Compare) pin configuration.
 */
void TCD0_init() {
    PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT4_gc; ///< Select alternative WOC pin variant 4
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <__TEXT_REGION_LENGTH__+0x7f05e9>
    ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PD4 (pin 14)
 51a:	60 e4       	ldi	r22, 0x40	; 64
 51c:	82 e9       	ldi	r24, 0x92	; 146
 51e:	9b e0       	ldi	r25, 0x0B	; 11
 520:	0e 94 97 06 	call	0xd2e	; 0xd2e <ccp_write_io>

    TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7f0b81>

    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until TCD is ready for configuration
 52a:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 52e:	80 ff       	sbrs	r24, 0
 530:	fc cf       	rjmp	.-8      	; 0x52a <TCD0_init+0x16>
    TCD0.CTRLA = TCD_CLKSEL_OSCHF_gc | ///< Select PLL as clock source
 532:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 536:	08 95       	ret

00000538 <TLE9201SG_Sort_Diagnosis>:

/**
 * @brief Parses and updates the diagnosis data from the TLE9201SG.
 */
void TLE9201SG_Sort_Diagnosis() {
    TLE9201SG.EN = (TLE9201SG.diag >> 7) & 0x01;  // Bit 7
 538:	e0 e0       	ldi	r30, 0x00	; 0
 53a:	f0 e6       	ldi	r31, 0x60	; 96
 53c:	81 81       	ldd	r24, Z+1	; 0x01
 53e:	98 2f       	mov	r25, r24
 540:	99 1f       	adc	r25, r25
 542:	99 27       	eor	r25, r25
 544:	99 1f       	adc	r25, r25
 546:	93 83       	std	Z+3, r25	; 0x03
    TLE9201SG.OT = (TLE9201SG.diag >> 6) & 0x01;  // Bit 6
 548:	86 fb       	bst	r24, 6
 54a:	99 27       	eor	r25, r25
 54c:	90 f9       	bld	r25, 0
 54e:	94 83       	std	Z+4, r25	; 0x04
    TLE9201SG.TV = (TLE9201SG.diag >> 5) & 0x01;  // Bit 5
 550:	85 fb       	bst	r24, 5
 552:	99 27       	eor	r25, r25
 554:	90 f9       	bld	r25, 0
 556:	95 83       	std	Z+5, r25	; 0x05
    TLE9201SG.CL = (TLE9201SG.diag >> 4) & 0x01;  // Bit 4
 558:	84 fb       	bst	r24, 4
 55a:	99 27       	eor	r25, r25
 55c:	90 f9       	bld	r25, 0
 55e:	96 83       	std	Z+6, r25	; 0x06
    TLE9201SG.DIA = TLE9201SG.diag & 0x0F;        // Bits 3-0
 560:	8f 70       	andi	r24, 0x0F	; 15
 562:	87 83       	std	Z+7, r24	; 0x07

    // If DIA is not 0xF (all OK), set the Fault field; otherwise, clear it.
    TLE9201SG.Fault = (TLE9201SG.DIA != 0xF) ? TLE9201SG.DIA : 0;
 564:	8f 30       	cpi	r24, 0x0F	; 15
 566:	09 f4       	brne	.+2      	; 0x56a <TLE9201SG_Sort_Diagnosis+0x32>
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	80 93 08 60 	sts	0x6008, r24	; 0x806008 <__DATA_REGION_ORIGIN__+0x8>
 56e:	08 95       	ret

00000570 <TLE9201SG_Sort_Control>:

/**
 * @brief Parses and updates the control data from the TLE9201SG.
 */
void TLE9201SG_Sort_Control() {
    TLE9201SG.CMD = (TLE9201SG.control >> 5);       // Bits 7-5
 570:	e0 e0       	ldi	r30, 0x00	; 0
 572:	f0 e6       	ldi	r31, 0x60	; 96
 574:	82 81       	ldd	r24, Z+2	; 0x02
 576:	98 2f       	mov	r25, r24
 578:	92 95       	swap	r25
 57a:	96 95       	lsr	r25
 57c:	97 70       	andi	r25, 0x07	; 7
 57e:	91 87       	std	Z+9, r25	; 0x09
    TLE9201SG.OLDIS = (TLE9201SG.control >> 4) & 0x01; // Bit 4
 580:	84 fb       	bst	r24, 4
 582:	99 27       	eor	r25, r25
 584:	90 f9       	bld	r25, 0
 586:	92 87       	std	Z+10, r25	; 0x0a
    TLE9201SG.SIN = (TLE9201SG.control >> 3) & 0x01;   // Bit 3
 588:	83 fb       	bst	r24, 3
 58a:	99 27       	eor	r25, r25
 58c:	90 f9       	bld	r25, 0
 58e:	93 87       	std	Z+11, r25	; 0x0b
    TLE9201SG.SEN = (TLE9201SG.control >> 2) & 0x01;   // Bit 2
 590:	82 fb       	bst	r24, 2
 592:	99 27       	eor	r25, r25
 594:	90 f9       	bld	r25, 0
 596:	94 87       	std	Z+12, r25	; 0x0c
    TLE9201SG.SDIR = (TLE9201SG.control >> 1) & 0x01;  // Bit 1
 598:	81 fb       	bst	r24, 1
 59a:	99 27       	eor	r25, r25
 59c:	90 f9       	bld	r25, 0
 59e:	95 87       	std	Z+13, r25	; 0x0d
    TLE9201SG.SPWM = TLE9201SG.control & 0x01;         // Bit 0
 5a0:	81 70       	andi	r24, 0x01	; 1
 5a2:	86 87       	std	Z+14, r24	; 0x0e
 5a4:	08 95       	ret

000005a6 <TLE9201SG_Write>:
}

uint8_t TLE9201SG_Write(uint8_t command){
	 return command + (TLE9201SG.OLDIS<<4) + (TLE9201SG.SIN<<3) + (TLE9201SG.SEN<<2) + (TLE9201SG.SDIR<<1) + TLE9201SG.SPWM;
 5a6:	e0 e0       	ldi	r30, 0x00	; 0
 5a8:	f0 e6       	ldi	r31, 0x60	; 96
 5aa:	52 85       	ldd	r21, Z+10	; 0x0a
 5ac:	33 85       	ldd	r19, Z+11	; 0x0b
 5ae:	24 85       	ldd	r18, Z+12	; 0x0c
 5b0:	95 85       	ldd	r25, Z+13	; 0x0d
 5b2:	46 85       	ldd	r20, Z+14	; 0x0e
 5b4:	60 e1       	ldi	r22, 0x10	; 16
 5b6:	56 9f       	mul	r21, r22
 5b8:	80 0d       	add	r24, r0
 5ba:	11 24       	eor	r1, r1
 5bc:	33 0f       	add	r19, r19
 5be:	33 0f       	add	r19, r19
 5c0:	33 0f       	add	r19, r19
 5c2:	83 0f       	add	r24, r19
 5c4:	22 0f       	add	r18, r18
 5c6:	22 0f       	add	r18, r18
 5c8:	82 0f       	add	r24, r18
 5ca:	99 0f       	add	r25, r25
 5cc:	89 0f       	add	r24, r25
}
 5ce:	84 0f       	add	r24, r20
 5d0:	08 95       	ret

000005d2 <TLE9201SG_Mode_init>:

/**
 * @brief Initializes the TLE9201SG control mode (SPI or PWM/DIR).
 * @param mode 0 for PWM/DIR, 1 for SPI.
 */
 void TLE9201SG_Mode_init(uint8_t mode) {
 5d2:	4f 92       	push	r4
 5d4:	5f 92       	push	r5
 5d6:	6f 92       	push	r6
 5d8:	7f 92       	push	r7
 5da:	8f 92       	push	r8
 5dc:	9f 92       	push	r9
 5de:	af 92       	push	r10
 5e0:	bf 92       	push	r11
 5e2:	cf 92       	push	r12
 5e4:	df 92       	push	r13
 5e6:	ef 92       	push	r14
 5e8:	ff 92       	push	r15
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <TLE9201SG_Mode_init+0x22>
 5f4:	1f 92       	push	r1
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62

    TLE9201SG.mode = mode;
 5fa:	80 93 10 60 	sts	0x6010, r24	; 0x806010 <__DATA_REGION_ORIGIN__+0x10>
    if (mode) { // SPI mode 
 5fe:	88 23       	and	r24, r24
 600:	09 f4       	brne	.+2      	; 0x604 <TLE9201SG_Mode_init+0x32>
 602:	85 c0       	rjmp	.+266    	; 0x70e <TLE9201SG_Mode_init+0x13c>
		SPI0_Stop();// Ensure SPI0 module is stopped
 604:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI0_Stop>
		double sig_period = 0.0; //for virtual pwm period calculation
		double sig_calc = 0.0; //for CPU clock calculation
		double sig_on = 0.0; //for virtual PWM on state signal time calculation

        SPI0_init();
 608:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI0_init>
        TLE9201SG.SIN = 1; // Enable SPI control
 60c:	e0 e0       	ldi	r30, 0x00	; 0
 60e:	f0 e6       	ldi	r31, 0x60	; 96
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	83 87       	std	Z+11, r24	; 0x0b
        TLE9201SG.OLDIS = 0;
 614:	12 86       	std	Z+10, r1	; 0x0a
        TLE9201SG.SEN = 0; // Disable outputs
 616:	14 86       	std	Z+12, r1	; 0x0c
		uint8_t init_cmd[3] = {TLE9201SG_Write(WR_CTRL), RD_REV, 0}; //write controll and receive control values, read revison, 0- next read will be diag
 618:	80 ee       	ldi	r24, 0xE0	; 224
 61a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TLE9201SG_Write>
 61e:	89 83       	std	Y+1, r24	; 0x01
 620:	80 e2       	ldi	r24, 0x20	; 32
 622:	8a 83       	std	Y+2, r24	; 0x02
 624:	1b 82       	std	Y+3, r1	; 0x03
		for(uint8_t i = 0; i<3; i++){
 626:	f1 2c       	mov	r15, r1
 628:	0d c0       	rjmp	.+26     	; 0x644 <TLE9201SG_Mode_init+0x72>
			init_cmd[i] = SPI0_Exchange_Data(init_cmd[i]);		 
 62a:	01 e0       	ldi	r16, 0x01	; 1
 62c:	10 e0       	ldi	r17, 0x00	; 0
 62e:	0c 0f       	add	r16, r28
 630:	1d 1f       	adc	r17, r29
 632:	0f 0d       	add	r16, r15
 634:	11 1d       	adc	r17, r1
 636:	f8 01       	movw	r30, r16
 638:	80 81       	ld	r24, Z
 63a:	0e 94 00 02 	call	0x400	; 0x400 <SPI0_Exchange_Data>
 63e:	f8 01       	movw	r30, r16
 640:	80 83       	st	Z, r24
        SPI0_init();
        TLE9201SG.SIN = 1; // Enable SPI control
        TLE9201SG.OLDIS = 0;
        TLE9201SG.SEN = 0; // Disable outputs
		uint8_t init_cmd[3] = {TLE9201SG_Write(WR_CTRL), RD_REV, 0}; //write controll and receive control values, read revison, 0- next read will be diag
		for(uint8_t i = 0; i<3; i++){
 642:	f3 94       	inc	r15
 644:	f2 e0       	ldi	r31, 0x02	; 2
 646:	ff 15       	cp	r31, r15
 648:	80 f7       	brcc	.-32     	; 0x62a <TLE9201SG_Mode_init+0x58>
			init_cmd[i] = SPI0_Exchange_Data(init_cmd[i]);		 
		}
		//0  (first)value is nonsense and it not revision.... as it should be... I receiving 0x5c some trash data... this is also not diag data... as datasheet says
		TLE9201SG.control = init_cmd[1];
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	00 e0       	ldi	r16, 0x00	; 0
 64e:	10 e6       	ldi	r17, 0x60	; 96
 650:	f8 01       	movw	r30, r16
 652:	82 83       	std	Z+2, r24	; 0x02
		TLE9201SG.revision = init_cmd[2];
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	80 83       	st	Z, r24
        TLE9201SG_Sort_Control();
 658:	0e 94 b8 02 	call	0x570	; 0x570 <TLE9201SG_Sort_Control>

		sig_calc = 1.0 / CLOCK_read() * 4; //calculating time base according current main clock value
 65c:	0e 94 b3 00 	call	0x166	; 0x166 <CLOCK_read>
 660:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatunsisf>
 664:	9b 01       	movw	r18, r22
 666:	ac 01       	movw	r20, r24
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	80 e8       	ldi	r24, 0x80	; 128
 66e:	9f e3       	ldi	r25, 0x3F	; 63
 670:	0e 94 67 04 	call	0x8ce	; 0x8ce <__divsf3>
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	40 e8       	ldi	r20, 0x80	; 128
 67a:	50 e4       	ldi	r21, 0x40	; 64
 67c:	0e 94 96 05 	call	0xb2c	; 0xb2c <__mulsf3>
 680:	6b 01       	movw	r12, r22
 682:	7c 01       	movw	r14, r24
		sig_period = (1.0 / TLE9201SG.pwm_freq) - TLE9201SG_SPI_TIME_COMPENSATION; //calculating period time for requared frequency
 684:	f8 01       	movw	r30, r16
 686:	61 89       	ldd	r22, Z+17	; 0x11
 688:	72 89       	ldd	r23, Z+18	; 0x12
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatunsisf>
 692:	9b 01       	movw	r18, r22
 694:	ac 01       	movw	r20, r24
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	70 e0       	ldi	r23, 0x00	; 0
 69a:	80 e8       	ldi	r24, 0x80	; 128
 69c:	9f e3       	ldi	r25, 0x3F	; 63
 69e:	0e 94 67 04 	call	0x8ce	; 0x8ce <__divsf3>
 6a2:	2b e8       	ldi	r18, 0x8B	; 139
 6a4:	31 ee       	ldi	r19, 0xE1	; 225
 6a6:	4a e6       	ldi	r20, 0x6A	; 106
 6a8:	57 e3       	ldi	r21, 0x37	; 55
 6aa:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__subsf3>
 6ae:	2b 01       	movw	r4, r22
 6b0:	3c 01       	movw	r6, r24
		sig_on = TLE9201SG.duty_cycle/100 * sig_period; //calculating pwm duty cycle
 6b2:	f8 01       	movw	r30, r16
 6b4:	63 89       	ldd	r22, Z+19	; 0x13
 6b6:	74 89       	ldd	r23, Z+20	; 0x14
 6b8:	85 89       	ldd	r24, Z+21	; 0x15
 6ba:	96 89       	ldd	r25, Z+22	; 0x16
 6bc:	20 e0       	ldi	r18, 0x00	; 0
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	48 ec       	ldi	r20, 0xC8	; 200
 6c2:	52 e4       	ldi	r21, 0x42	; 66
 6c4:	0e 94 67 04 	call	0x8ce	; 0x8ce <__divsf3>
 6c8:	9b 01       	movw	r18, r22
 6ca:	ac 01       	movw	r20, r24
 6cc:	c3 01       	movw	r24, r6
 6ce:	b2 01       	movw	r22, r4
 6d0:	0e 94 96 05 	call	0xb2c	; 0xb2c <__mulsf3>
 6d4:	4b 01       	movw	r8, r22
 6d6:	5c 01       	movw	r10, r24
		TLE9201SG.off = ((sig_period - sig_on)/ sig_calc); //calculating pwm off time
 6d8:	9b 01       	movw	r18, r22
 6da:	ac 01       	movw	r20, r24
 6dc:	c3 01       	movw	r24, r6
 6de:	b2 01       	movw	r22, r4
 6e0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__subsf3>
 6e4:	a7 01       	movw	r20, r14
 6e6:	96 01       	movw	r18, r12
 6e8:	0e 94 67 04 	call	0x8ce	; 0x8ce <__divsf3>
 6ec:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__fixunssfsi>
 6f0:	f8 01       	movw	r30, r16
 6f2:	61 8f       	std	Z+25, r22	; 0x19
 6f4:	72 8f       	std	Z+26, r23	; 0x1a
		TLE9201SG.on =  (sig_on/sig_calc); //calculating pwm on time
 6f6:	a7 01       	movw	r20, r14
 6f8:	96 01       	movw	r18, r12
 6fa:	c5 01       	movw	r24, r10
 6fc:	b4 01       	movw	r22, r8
 6fe:	0e 94 67 04 	call	0x8ce	; 0x8ce <__divsf3>
 702:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__fixunssfsi>
 706:	f8 01       	movw	r30, r16
 708:	67 8b       	std	Z+23, r22	; 0x17
 70a:	70 8f       	std	Z+24, r23	; 0x18
 70c:	10 c0       	rjmp	.+32     	; 0x72e <TLE9201SG_Mode_init+0x15c>

    } else { // PWM/DIR mode
        PLL_init(); ///< Initialize the Phase-Locked Loop (PLL)
 70e:	0e 94 a9 00 	call	0x152	; 0x152 <PLL_init>
        TCD0_init(); ///< Initialize Timer/Counter D (TCD)
 712:	0e 94 8a 02 	call	0x514	; 0x514 <TCD0_init>
        PWM_init(TLE9201SG.pwm_freq, TLE9201SG.duty_cycle);
 716:	e0 e0       	ldi	r30, 0x00	; 0
 718:	f0 e6       	ldi	r31, 0x60	; 96
 71a:	61 89       	ldd	r22, Z+17	; 0x11
 71c:	72 89       	ldd	r23, Z+18	; 0x12
 71e:	23 89       	ldd	r18, Z+19	; 0x13
 720:	34 89       	ldd	r19, Z+20	; 0x14
 722:	45 89       	ldd	r20, Z+21	; 0x15
 724:	56 89       	ldd	r21, Z+22	; 0x16
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 24 02 	call	0x448	; 0x448 <PWM_init>
    }
}
 72e:	23 96       	adiw	r28, 0x03	; 3
 730:	cd bf       	out	0x3d, r28	; 61
 732:	de bf       	out	0x3e, r29	; 62
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	1f 91       	pop	r17
 73a:	0f 91       	pop	r16
 73c:	ff 90       	pop	r15
 73e:	ef 90       	pop	r14
 740:	df 90       	pop	r13
 742:	cf 90       	pop	r12
 744:	bf 90       	pop	r11
 746:	af 90       	pop	r10
 748:	9f 90       	pop	r9
 74a:	8f 90       	pop	r8
 74c:	7f 90       	pop	r7
 74e:	6f 90       	pop	r6
 750:	5f 90       	pop	r5
 752:	4f 90       	pop	r4
 754:	08 95       	ret

00000756 <TLE9201SG_STOP>:
 * 
 * This function disables the TLE9201SG outputs, either via SPI or by controlling 
 * the hardware pin directly, depending on the current control mode.
 */
void TLE9201SG_STOP() {
    if (TLE9201SG.mode) { // SPI mode
 756:	80 91 10 60 	lds	r24, 0x6010	; 0x806010 <__DATA_REGION_ORIGIN__+0x10>
 75a:	88 23       	and	r24, r24
 75c:	19 f0       	breq	.+6      	; 0x764 <TLE9201SG_STOP+0xe>
        TLE9201SG.SEN = 0; // Disable outputs
 75e:	10 92 0c 60 	sts	0x600C, r1	; 0x80600c <__DATA_REGION_ORIGIN__+0xc>
 762:	08 95       	ret
    } else { // PWM/DIR mode
        TCD0_OFF(); // Turn off the timer/counter
 764:	0e 94 1a 02 	call	0x434	; 0x434 <TCD0_OFF>
        PORTD.OUTSET = PIN6_bm; // Set the pin to disable outputs
 768:	80 e4       	ldi	r24, 0x40	; 64
 76a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
 76e:	08 95       	ret

00000770 <TLE9201SG_DIR>:
 * 
 * This function sets the direction of the motor driver outputs, either via SPI or 
 * by controlling the hardware pin directly, depending on the current control mode.
 */
void TLE9201SG_DIR(uint8_t direction) {
    if (TLE9201SG.mode) { // SPI mode
 770:	90 91 10 60 	lds	r25, 0x6010	; 0x806010 <__DATA_REGION_ORIGIN__+0x10>
 774:	99 23       	and	r25, r25
 776:	19 f0       	breq	.+6      	; 0x77e <TLE9201SG_DIR+0xe>
        TLE9201SG.SDIR = direction;
 778:	80 93 0d 60 	sts	0x600D, r24	; 0x80600d <__DATA_REGION_ORIGIN__+0xd>
 77c:	08 95       	ret
    } else { // PWM/DIR mode
        PORTD.OUT = (direction << PIN5_bp); // Set the direction pin
 77e:	82 95       	swap	r24
 780:	88 0f       	add	r24, r24
 782:	80 7e       	andi	r24, 0xE0	; 224
 784:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f0464>
 788:	08 95       	ret

0000078a <TLE9201SG_START>:
 * @brief Starts the motor driver outputs.
 * 
 * This function starts the motor driver outputs, either by toggling the SPWM bit
 * via SPI or by enabling the timer/counter in PWM/DIR mode.
 */
void TLE9201SG_START() {
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
    if (TLE9201SG.mode) { // SPI mode imitating pwm...
 78e:	80 91 10 60 	lds	r24, 0x6010	; 0x806010 <__DATA_REGION_ORIGIN__+0x10>
 792:	88 23       	and	r24, r24
 794:	e1 f0       	breq	.+56     	; 0x7ce <TLE9201SG_START+0x44>
		TLE9201SG.SEN = 1; // Enable outputs
 796:	c0 e0       	ldi	r28, 0x00	; 0
 798:	d0 e6       	ldi	r29, 0x60	; 96
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	8c 87       	std	Y+12, r24	; 0x0c
        TLE9201SG.SPWM = 1;
 79e:	8e 87       	std	Y+14, r24	; 0x0e
		TLE9201SG.diag = SPI0_Exchange_Data(TLE9201SG_Write(WR_CTRL_RD_DIA)); //returning not curent value but value from the past... I hate SPI on TLE9201SG!!!
 7a0:	80 ec       	ldi	r24, 0xC0	; 192
 7a2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TLE9201SG_Write>
 7a6:	0e 94 00 02 	call	0x400	; 0x400 <SPI0_Exchange_Data>
 7aa:	89 83       	std	Y+1, r24	; 0x01
        _delay_loop_2(TLE9201SG.on); // Wait for the on-time duration
 7ac:	8f 89       	ldd	r24, Y+23	; 0x17
 7ae:	98 8d       	ldd	r25, Y+24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	f1 f7       	brne	.-4      	; 0x7b0 <TLE9201SG_START+0x26>
		TLE9201SG_Sort_Diagnosis(); //but spi have good diagnosis...
 7b4:	0e 94 9c 02 	call	0x538	; 0x538 <TLE9201SG_Sort_Diagnosis>
        TLE9201SG.SPWM = 0;
 7b8:	1e 86       	std	Y+14, r1	; 0x0e
	   SPI0_Exchange_Data(TLE9201SG_Write(WR_CTRL_RD_DIA)); //same...
 7ba:	80 ec       	ldi	r24, 0xC0	; 192
 7bc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TLE9201SG_Write>
 7c0:	0e 94 00 02 	call	0x400	; 0x400 <SPI0_Exchange_Data>
        _delay_loop_2(TLE9201SG.off); // Wait for the off-time duration
 7c4:	89 8d       	ldd	r24, Y+25	; 0x19
 7c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
 7c8:	01 97       	sbiw	r24, 0x01	; 1
 7ca:	f1 f7       	brne	.-4      	; 0x7c8 <TLE9201SG_START+0x3e>
 7cc:	10 c0       	rjmp	.+32     	; 0x7ee <TLE9201SG_START+0x64>

    } else { // PWM/DIR mode
        TCD0_ON(); // Enable the timer/counter for easy pwm generation 
 7ce:	0e 94 10 02 	call	0x420	; 0x420 <TCD0_ON>
		PORTD.OUTCLR = PIN6_bm; // Clear the pin to enable outputs
 7d2:	80 e4       	ldi	r24, 0x40	; 64
 7d4:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
		if(PORTA.IN & PIN5_bm)
 7d8:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
 7dc:	85 ff       	sbrs	r24, 5
 7de:	07 c0       	rjmp	.+14     	; 0x7ee <TLE9201SG_START+0x64>
		TLE9201SG.Fault = (PORTA.IN & PIN5_bm) ?  1 : 0; //checking fault flag only...
 7e0:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
 7e4:	85 fb       	bst	r24, 5
 7e6:	88 27       	eor	r24, r24
 7e8:	80 f9       	bld	r24, 0
 7ea:	80 93 08 60 	sts	0x6008, r24	; 0x806008 <__DATA_REGION_ORIGIN__+0x8>
    }
}
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	08 95       	ret

000007f4 <__subsf3>:
 7f4:	50 58       	subi	r21, 0x80	; 128

000007f6 <__addsf3>:
 7f6:	bb 27       	eor	r27, r27
 7f8:	aa 27       	eor	r26, r26
 7fa:	0e 94 12 04 	call	0x824	; 0x824 <__addsf3x>
 7fe:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>
 802:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
 806:	38 f0       	brcs	.+14     	; 0x816 <__addsf3+0x20>
 808:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
 80c:	20 f0       	brcs	.+8      	; 0x816 <__addsf3+0x20>
 80e:	39 f4       	brne	.+14     	; 0x81e <__addsf3+0x28>
 810:	9f 3f       	cpi	r25, 0xFF	; 255
 812:	19 f4       	brne	.+6      	; 0x81a <__addsf3+0x24>
 814:	26 f4       	brtc	.+8      	; 0x81e <__addsf3+0x28>
 816:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>
 81a:	0e f4       	brtc	.+2      	; 0x81e <__addsf3+0x28>
 81c:	e0 95       	com	r30
 81e:	e7 fb       	bst	r30, 7
 820:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>

00000824 <__addsf3x>:
 824:	e9 2f       	mov	r30, r25
 826:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
 82a:	58 f3       	brcs	.-42     	; 0x802 <__addsf3+0xc>
 82c:	ba 17       	cp	r27, r26
 82e:	62 07       	cpc	r22, r18
 830:	73 07       	cpc	r23, r19
 832:	84 07       	cpc	r24, r20
 834:	95 07       	cpc	r25, r21
 836:	20 f0       	brcs	.+8      	; 0x840 <__addsf3x+0x1c>
 838:	79 f4       	brne	.+30     	; 0x858 <__addsf3x+0x34>
 83a:	a6 f5       	brtc	.+104    	; 0x8a4 <__addsf3x+0x80>
 83c:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_zero>
 840:	0e f4       	brtc	.+2      	; 0x844 <__addsf3x+0x20>
 842:	e0 95       	com	r30
 844:	0b 2e       	mov	r0, r27
 846:	ba 2f       	mov	r27, r26
 848:	a0 2d       	mov	r26, r0
 84a:	0b 01       	movw	r0, r22
 84c:	b9 01       	movw	r22, r18
 84e:	90 01       	movw	r18, r0
 850:	0c 01       	movw	r0, r24
 852:	ca 01       	movw	r24, r20
 854:	a0 01       	movw	r20, r0
 856:	11 24       	eor	r1, r1
 858:	ff 27       	eor	r31, r31
 85a:	59 1b       	sub	r21, r25
 85c:	99 f0       	breq	.+38     	; 0x884 <__addsf3x+0x60>
 85e:	59 3f       	cpi	r21, 0xF9	; 249
 860:	50 f4       	brcc	.+20     	; 0x876 <__addsf3x+0x52>
 862:	50 3e       	cpi	r21, 0xE0	; 224
 864:	68 f1       	brcs	.+90     	; 0x8c0 <__addsf3x+0x9c>
 866:	1a 16       	cp	r1, r26
 868:	f0 40       	sbci	r31, 0x00	; 0
 86a:	a2 2f       	mov	r26, r18
 86c:	23 2f       	mov	r18, r19
 86e:	34 2f       	mov	r19, r20
 870:	44 27       	eor	r20, r20
 872:	58 5f       	subi	r21, 0xF8	; 248
 874:	f3 cf       	rjmp	.-26     	; 0x85c <__addsf3x+0x38>
 876:	46 95       	lsr	r20
 878:	37 95       	ror	r19
 87a:	27 95       	ror	r18
 87c:	a7 95       	ror	r26
 87e:	f0 40       	sbci	r31, 0x00	; 0
 880:	53 95       	inc	r21
 882:	c9 f7       	brne	.-14     	; 0x876 <__addsf3x+0x52>
 884:	7e f4       	brtc	.+30     	; 0x8a4 <__addsf3x+0x80>
 886:	1f 16       	cp	r1, r31
 888:	ba 0b       	sbc	r27, r26
 88a:	62 0b       	sbc	r22, r18
 88c:	73 0b       	sbc	r23, r19
 88e:	84 0b       	sbc	r24, r20
 890:	ba f0       	brmi	.+46     	; 0x8c0 <__addsf3x+0x9c>
 892:	91 50       	subi	r25, 0x01	; 1
 894:	a1 f0       	breq	.+40     	; 0x8be <__addsf3x+0x9a>
 896:	ff 0f       	add	r31, r31
 898:	bb 1f       	adc	r27, r27
 89a:	66 1f       	adc	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	c2 f7       	brpl	.-16     	; 0x892 <__addsf3x+0x6e>
 8a2:	0e c0       	rjmp	.+28     	; 0x8c0 <__addsf3x+0x9c>
 8a4:	ba 0f       	add	r27, r26
 8a6:	62 1f       	adc	r22, r18
 8a8:	73 1f       	adc	r23, r19
 8aa:	84 1f       	adc	r24, r20
 8ac:	48 f4       	brcc	.+18     	; 0x8c0 <__addsf3x+0x9c>
 8ae:	87 95       	ror	r24
 8b0:	77 95       	ror	r23
 8b2:	67 95       	ror	r22
 8b4:	b7 95       	ror	r27
 8b6:	f7 95       	ror	r31
 8b8:	9e 3f       	cpi	r25, 0xFE	; 254
 8ba:	08 f0       	brcs	.+2      	; 0x8be <__addsf3x+0x9a>
 8bc:	b0 cf       	rjmp	.-160    	; 0x81e <__addsf3+0x28>
 8be:	93 95       	inc	r25
 8c0:	88 0f       	add	r24, r24
 8c2:	08 f0       	brcs	.+2      	; 0x8c6 <__addsf3x+0xa2>
 8c4:	99 27       	eor	r25, r25
 8c6:	ee 0f       	add	r30, r30
 8c8:	97 95       	ror	r25
 8ca:	87 95       	ror	r24
 8cc:	08 95       	ret

000008ce <__divsf3>:
 8ce:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divsf3x>
 8d2:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>
 8d6:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
 8da:	58 f0       	brcs	.+22     	; 0x8f2 <__divsf3+0x24>
 8dc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
 8e0:	40 f0       	brcs	.+16     	; 0x8f2 <__divsf3+0x24>
 8e2:	29 f4       	brne	.+10     	; 0x8ee <__divsf3+0x20>
 8e4:	5f 3f       	cpi	r21, 0xFF	; 255
 8e6:	29 f0       	breq	.+10     	; 0x8f2 <__divsf3+0x24>
 8e8:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>
 8ec:	51 11       	cpse	r21, r1
 8ee:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 8f2:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>

000008f6 <__divsf3x>:
 8f6:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
 8fa:	68 f3       	brcs	.-38     	; 0x8d6 <__divsf3+0x8>

000008fc <__divsf3_pse>:
 8fc:	99 23       	and	r25, r25
 8fe:	b1 f3       	breq	.-20     	; 0x8ec <__divsf3+0x1e>
 900:	55 23       	and	r21, r21
 902:	91 f3       	breq	.-28     	; 0x8e8 <__divsf3+0x1a>
 904:	95 1b       	sub	r25, r21
 906:	55 0b       	sbc	r21, r21
 908:	bb 27       	eor	r27, r27
 90a:	aa 27       	eor	r26, r26
 90c:	62 17       	cp	r22, r18
 90e:	73 07       	cpc	r23, r19
 910:	84 07       	cpc	r24, r20
 912:	38 f0       	brcs	.+14     	; 0x922 <__divsf3_pse+0x26>
 914:	9f 5f       	subi	r25, 0xFF	; 255
 916:	5f 4f       	sbci	r21, 0xFF	; 255
 918:	22 0f       	add	r18, r18
 91a:	33 1f       	adc	r19, r19
 91c:	44 1f       	adc	r20, r20
 91e:	aa 1f       	adc	r26, r26
 920:	a9 f3       	breq	.-22     	; 0x90c <__divsf3_pse+0x10>
 922:	35 d0       	rcall	.+106    	; 0x98e <__divsf3_pse+0x92>
 924:	0e 2e       	mov	r0, r30
 926:	3a f0       	brmi	.+14     	; 0x936 <__divsf3_pse+0x3a>
 928:	e0 e8       	ldi	r30, 0x80	; 128
 92a:	32 d0       	rcall	.+100    	; 0x990 <__divsf3_pse+0x94>
 92c:	91 50       	subi	r25, 0x01	; 1
 92e:	50 40       	sbci	r21, 0x00	; 0
 930:	e6 95       	lsr	r30
 932:	00 1c       	adc	r0, r0
 934:	ca f7       	brpl	.-14     	; 0x928 <__divsf3_pse+0x2c>
 936:	2b d0       	rcall	.+86     	; 0x98e <__divsf3_pse+0x92>
 938:	fe 2f       	mov	r31, r30
 93a:	29 d0       	rcall	.+82     	; 0x98e <__divsf3_pse+0x92>
 93c:	66 0f       	add	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	bb 1f       	adc	r27, r27
 944:	26 17       	cp	r18, r22
 946:	37 07       	cpc	r19, r23
 948:	48 07       	cpc	r20, r24
 94a:	ab 07       	cpc	r26, r27
 94c:	b0 e8       	ldi	r27, 0x80	; 128
 94e:	09 f0       	breq	.+2      	; 0x952 <__divsf3_pse+0x56>
 950:	bb 0b       	sbc	r27, r27
 952:	80 2d       	mov	r24, r0
 954:	bf 01       	movw	r22, r30
 956:	ff 27       	eor	r31, r31
 958:	93 58       	subi	r25, 0x83	; 131
 95a:	5f 4f       	sbci	r21, 0xFF	; 255
 95c:	3a f0       	brmi	.+14     	; 0x96c <__divsf3_pse+0x70>
 95e:	9e 3f       	cpi	r25, 0xFE	; 254
 960:	51 05       	cpc	r21, r1
 962:	78 f0       	brcs	.+30     	; 0x982 <__divsf3_pse+0x86>
 964:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>
 968:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 96c:	5f 3f       	cpi	r21, 0xFF	; 255
 96e:	e4 f3       	brlt	.-8      	; 0x968 <__divsf3_pse+0x6c>
 970:	98 3e       	cpi	r25, 0xE8	; 232
 972:	d4 f3       	brlt	.-12     	; 0x968 <__divsf3_pse+0x6c>
 974:	86 95       	lsr	r24
 976:	77 95       	ror	r23
 978:	67 95       	ror	r22
 97a:	b7 95       	ror	r27
 97c:	f7 95       	ror	r31
 97e:	9f 5f       	subi	r25, 0xFF	; 255
 980:	c9 f7       	brne	.-14     	; 0x974 <__divsf3_pse+0x78>
 982:	88 0f       	add	r24, r24
 984:	91 1d       	adc	r25, r1
 986:	96 95       	lsr	r25
 988:	87 95       	ror	r24
 98a:	97 f9       	bld	r25, 7
 98c:	08 95       	ret
 98e:	e1 e0       	ldi	r30, 0x01	; 1
 990:	66 0f       	add	r22, r22
 992:	77 1f       	adc	r23, r23
 994:	88 1f       	adc	r24, r24
 996:	bb 1f       	adc	r27, r27
 998:	62 17       	cp	r22, r18
 99a:	73 07       	cpc	r23, r19
 99c:	84 07       	cpc	r24, r20
 99e:	ba 07       	cpc	r27, r26
 9a0:	20 f0       	brcs	.+8      	; 0x9aa <__divsf3_pse+0xae>
 9a2:	62 1b       	sub	r22, r18
 9a4:	73 0b       	sbc	r23, r19
 9a6:	84 0b       	sbc	r24, r20
 9a8:	ba 0b       	sbc	r27, r26
 9aa:	ee 1f       	adc	r30, r30
 9ac:	88 f7       	brcc	.-30     	; 0x990 <__divsf3_pse+0x94>
 9ae:	e0 95       	com	r30
 9b0:	08 95       	ret

000009b2 <__fixunssfsi>:
 9b2:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_splitA>
 9b6:	88 f0       	brcs	.+34     	; 0x9da <__fixunssfsi+0x28>
 9b8:	9f 57       	subi	r25, 0x7F	; 127
 9ba:	98 f0       	brcs	.+38     	; 0x9e2 <__fixunssfsi+0x30>
 9bc:	b9 2f       	mov	r27, r25
 9be:	99 27       	eor	r25, r25
 9c0:	b7 51       	subi	r27, 0x17	; 23
 9c2:	b0 f0       	brcs	.+44     	; 0x9f0 <__fixunssfsi+0x3e>
 9c4:	e1 f0       	breq	.+56     	; 0x9fe <__fixunssfsi+0x4c>
 9c6:	66 0f       	add	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	88 1f       	adc	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	1a f0       	brmi	.+6      	; 0x9d6 <__fixunssfsi+0x24>
 9d0:	ba 95       	dec	r27
 9d2:	c9 f7       	brne	.-14     	; 0x9c6 <__fixunssfsi+0x14>
 9d4:	14 c0       	rjmp	.+40     	; 0x9fe <__fixunssfsi+0x4c>
 9d6:	b1 30       	cpi	r27, 0x01	; 1
 9d8:	91 f0       	breq	.+36     	; 0x9fe <__fixunssfsi+0x4c>
 9da:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_zero>
 9de:	b1 e0       	ldi	r27, 0x01	; 1
 9e0:	08 95       	ret
 9e2:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_zero>
 9e6:	67 2f       	mov	r22, r23
 9e8:	78 2f       	mov	r23, r24
 9ea:	88 27       	eor	r24, r24
 9ec:	b8 5f       	subi	r27, 0xF8	; 248
 9ee:	39 f0       	breq	.+14     	; 0x9fe <__fixunssfsi+0x4c>
 9f0:	b9 3f       	cpi	r27, 0xF9	; 249
 9f2:	cc f3       	brlt	.-14     	; 0x9e6 <__fixunssfsi+0x34>
 9f4:	86 95       	lsr	r24
 9f6:	77 95       	ror	r23
 9f8:	67 95       	ror	r22
 9fa:	b3 95       	inc	r27
 9fc:	d9 f7       	brne	.-10     	; 0x9f4 <__fixunssfsi+0x42>
 9fe:	3e f4       	brtc	.+14     	; 0xa0e <__fixunssfsi+0x5c>
 a00:	90 95       	com	r25
 a02:	80 95       	com	r24
 a04:	70 95       	com	r23
 a06:	61 95       	neg	r22
 a08:	7f 4f       	sbci	r23, 0xFF	; 255
 a0a:	8f 4f       	sbci	r24, 0xFF	; 255
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	08 95       	ret

00000a10 <__floatunsisf>:
 a10:	e8 94       	clt
 a12:	09 c0       	rjmp	.+18     	; 0xa26 <__floatsisf+0x12>

00000a14 <__floatsisf>:
 a14:	97 fb       	bst	r25, 7
 a16:	3e f4       	brtc	.+14     	; 0xa26 <__floatsisf+0x12>
 a18:	90 95       	com	r25
 a1a:	80 95       	com	r24
 a1c:	70 95       	com	r23
 a1e:	61 95       	neg	r22
 a20:	7f 4f       	sbci	r23, 0xFF	; 255
 a22:	8f 4f       	sbci	r24, 0xFF	; 255
 a24:	9f 4f       	sbci	r25, 0xFF	; 255
 a26:	99 23       	and	r25, r25
 a28:	a9 f0       	breq	.+42     	; 0xa54 <__floatsisf+0x40>
 a2a:	f9 2f       	mov	r31, r25
 a2c:	96 e9       	ldi	r25, 0x96	; 150
 a2e:	bb 27       	eor	r27, r27
 a30:	93 95       	inc	r25
 a32:	f6 95       	lsr	r31
 a34:	87 95       	ror	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	f1 11       	cpse	r31, r1
 a3e:	f8 cf       	rjmp	.-16     	; 0xa30 <__floatsisf+0x1c>
 a40:	fa f4       	brpl	.+62     	; 0xa80 <__floatsisf+0x6c>
 a42:	bb 0f       	add	r27, r27
 a44:	11 f4       	brne	.+4      	; 0xa4a <__floatsisf+0x36>
 a46:	60 ff       	sbrs	r22, 0
 a48:	1b c0       	rjmp	.+54     	; 0xa80 <__floatsisf+0x6c>
 a4a:	6f 5f       	subi	r22, 0xFF	; 255
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	16 c0       	rjmp	.+44     	; 0xa80 <__floatsisf+0x6c>
 a54:	88 23       	and	r24, r24
 a56:	11 f0       	breq	.+4      	; 0xa5c <__floatsisf+0x48>
 a58:	96 e9       	ldi	r25, 0x96	; 150
 a5a:	11 c0       	rjmp	.+34     	; 0xa7e <__floatsisf+0x6a>
 a5c:	77 23       	and	r23, r23
 a5e:	21 f0       	breq	.+8      	; 0xa68 <__floatsisf+0x54>
 a60:	9e e8       	ldi	r25, 0x8E	; 142
 a62:	87 2f       	mov	r24, r23
 a64:	76 2f       	mov	r23, r22
 a66:	05 c0       	rjmp	.+10     	; 0xa72 <__floatsisf+0x5e>
 a68:	66 23       	and	r22, r22
 a6a:	71 f0       	breq	.+28     	; 0xa88 <__floatsisf+0x74>
 a6c:	96 e8       	ldi	r25, 0x86	; 134
 a6e:	86 2f       	mov	r24, r22
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	60 e0       	ldi	r22, 0x00	; 0
 a74:	2a f0       	brmi	.+10     	; 0xa80 <__floatsisf+0x6c>
 a76:	9a 95       	dec	r25
 a78:	66 0f       	add	r22, r22
 a7a:	77 1f       	adc	r23, r23
 a7c:	88 1f       	adc	r24, r24
 a7e:	da f7       	brpl	.-10     	; 0xa76 <__floatsisf+0x62>
 a80:	88 0f       	add	r24, r24
 a82:	96 95       	lsr	r25
 a84:	87 95       	ror	r24
 a86:	97 f9       	bld	r25, 7
 a88:	08 95       	ret

00000a8a <__fp_inf>:
 a8a:	97 f9       	bld	r25, 7
 a8c:	9f 67       	ori	r25, 0x7F	; 127
 a8e:	80 e8       	ldi	r24, 0x80	; 128
 a90:	70 e0       	ldi	r23, 0x00	; 0
 a92:	60 e0       	ldi	r22, 0x00	; 0
 a94:	08 95       	ret

00000a96 <__fp_nan>:
 a96:	9f ef       	ldi	r25, 0xFF	; 255
 a98:	80 ec       	ldi	r24, 0xC0	; 192
 a9a:	08 95       	ret

00000a9c <__fp_pscA>:
 a9c:	00 24       	eor	r0, r0
 a9e:	0a 94       	dec	r0
 aa0:	16 16       	cp	r1, r22
 aa2:	17 06       	cpc	r1, r23
 aa4:	18 06       	cpc	r1, r24
 aa6:	09 06       	cpc	r0, r25
 aa8:	08 95       	ret

00000aaa <__fp_pscB>:
 aaa:	00 24       	eor	r0, r0
 aac:	0a 94       	dec	r0
 aae:	12 16       	cp	r1, r18
 ab0:	13 06       	cpc	r1, r19
 ab2:	14 06       	cpc	r1, r20
 ab4:	05 06       	cpc	r0, r21
 ab6:	08 95       	ret

00000ab8 <__fp_round>:
 ab8:	09 2e       	mov	r0, r25
 aba:	03 94       	inc	r0
 abc:	00 0c       	add	r0, r0
 abe:	11 f4       	brne	.+4      	; 0xac4 <__fp_round+0xc>
 ac0:	88 23       	and	r24, r24
 ac2:	52 f0       	brmi	.+20     	; 0xad8 <__fp_round+0x20>
 ac4:	bb 0f       	add	r27, r27
 ac6:	40 f4       	brcc	.+16     	; 0xad8 <__fp_round+0x20>
 ac8:	bf 2b       	or	r27, r31
 aca:	11 f4       	brne	.+4      	; 0xad0 <__fp_round+0x18>
 acc:	60 ff       	sbrs	r22, 0
 ace:	04 c0       	rjmp	.+8      	; 0xad8 <__fp_round+0x20>
 ad0:	6f 5f       	subi	r22, 0xFF	; 255
 ad2:	7f 4f       	sbci	r23, 0xFF	; 255
 ad4:	8f 4f       	sbci	r24, 0xFF	; 255
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	08 95       	ret

00000ada <__fp_split3>:
 ada:	57 fd       	sbrc	r21, 7
 adc:	90 58       	subi	r25, 0x80	; 128
 ade:	44 0f       	add	r20, r20
 ae0:	55 1f       	adc	r21, r21
 ae2:	59 f0       	breq	.+22     	; 0xafa <__fp_splitA+0x10>
 ae4:	5f 3f       	cpi	r21, 0xFF	; 255
 ae6:	71 f0       	breq	.+28     	; 0xb04 <__fp_splitA+0x1a>
 ae8:	47 95       	ror	r20

00000aea <__fp_splitA>:
 aea:	88 0f       	add	r24, r24
 aec:	97 fb       	bst	r25, 7
 aee:	99 1f       	adc	r25, r25
 af0:	61 f0       	breq	.+24     	; 0xb0a <__fp_splitA+0x20>
 af2:	9f 3f       	cpi	r25, 0xFF	; 255
 af4:	79 f0       	breq	.+30     	; 0xb14 <__fp_splitA+0x2a>
 af6:	87 95       	ror	r24
 af8:	08 95       	ret
 afa:	12 16       	cp	r1, r18
 afc:	13 06       	cpc	r1, r19
 afe:	14 06       	cpc	r1, r20
 b00:	55 1f       	adc	r21, r21
 b02:	f2 cf       	rjmp	.-28     	; 0xae8 <__fp_split3+0xe>
 b04:	46 95       	lsr	r20
 b06:	f1 df       	rcall	.-30     	; 0xaea <__fp_splitA>
 b08:	08 c0       	rjmp	.+16     	; 0xb1a <__fp_splitA+0x30>
 b0a:	16 16       	cp	r1, r22
 b0c:	17 06       	cpc	r1, r23
 b0e:	18 06       	cpc	r1, r24
 b10:	99 1f       	adc	r25, r25
 b12:	f1 cf       	rjmp	.-30     	; 0xaf6 <__fp_splitA+0xc>
 b14:	86 95       	lsr	r24
 b16:	71 05       	cpc	r23, r1
 b18:	61 05       	cpc	r22, r1
 b1a:	08 94       	sec
 b1c:	08 95       	ret

00000b1e <__fp_zero>:
 b1e:	e8 94       	clt

00000b20 <__fp_szero>:
 b20:	bb 27       	eor	r27, r27
 b22:	66 27       	eor	r22, r22
 b24:	77 27       	eor	r23, r23
 b26:	cb 01       	movw	r24, r22
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret

00000b2c <__mulsf3>:
 b2c:	0e 94 a9 05 	call	0xb52	; 0xb52 <__mulsf3x>
 b30:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>
 b34:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
 b38:	38 f0       	brcs	.+14     	; 0xb48 <__mulsf3+0x1c>
 b3a:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
 b3e:	20 f0       	brcs	.+8      	; 0xb48 <__mulsf3+0x1c>
 b40:	95 23       	and	r25, r21
 b42:	11 f0       	breq	.+4      	; 0xb48 <__mulsf3+0x1c>
 b44:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>
 b48:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>
 b4c:	11 24       	eor	r1, r1
 b4e:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>

00000b52 <__mulsf3x>:
 b52:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
 b56:	70 f3       	brcs	.-36     	; 0xb34 <__mulsf3+0x8>

00000b58 <__mulsf3_pse>:
 b58:	95 9f       	mul	r25, r21
 b5a:	c1 f3       	breq	.-16     	; 0xb4c <__mulsf3+0x20>
 b5c:	95 0f       	add	r25, r21
 b5e:	50 e0       	ldi	r21, 0x00	; 0
 b60:	55 1f       	adc	r21, r21
 b62:	62 9f       	mul	r22, r18
 b64:	f0 01       	movw	r30, r0
 b66:	72 9f       	mul	r23, r18
 b68:	bb 27       	eor	r27, r27
 b6a:	f0 0d       	add	r31, r0
 b6c:	b1 1d       	adc	r27, r1
 b6e:	63 9f       	mul	r22, r19
 b70:	aa 27       	eor	r26, r26
 b72:	f0 0d       	add	r31, r0
 b74:	b1 1d       	adc	r27, r1
 b76:	aa 1f       	adc	r26, r26
 b78:	64 9f       	mul	r22, r20
 b7a:	66 27       	eor	r22, r22
 b7c:	b0 0d       	add	r27, r0
 b7e:	a1 1d       	adc	r26, r1
 b80:	66 1f       	adc	r22, r22
 b82:	82 9f       	mul	r24, r18
 b84:	22 27       	eor	r18, r18
 b86:	b0 0d       	add	r27, r0
 b88:	a1 1d       	adc	r26, r1
 b8a:	62 1f       	adc	r22, r18
 b8c:	73 9f       	mul	r23, r19
 b8e:	b0 0d       	add	r27, r0
 b90:	a1 1d       	adc	r26, r1
 b92:	62 1f       	adc	r22, r18
 b94:	83 9f       	mul	r24, r19
 b96:	a0 0d       	add	r26, r0
 b98:	61 1d       	adc	r22, r1
 b9a:	22 1f       	adc	r18, r18
 b9c:	74 9f       	mul	r23, r20
 b9e:	33 27       	eor	r19, r19
 ba0:	a0 0d       	add	r26, r0
 ba2:	61 1d       	adc	r22, r1
 ba4:	23 1f       	adc	r18, r19
 ba6:	84 9f       	mul	r24, r20
 ba8:	60 0d       	add	r22, r0
 baa:	21 1d       	adc	r18, r1
 bac:	82 2f       	mov	r24, r18
 bae:	76 2f       	mov	r23, r22
 bb0:	6a 2f       	mov	r22, r26
 bb2:	11 24       	eor	r1, r1
 bb4:	9f 57       	subi	r25, 0x7F	; 127
 bb6:	50 40       	sbci	r21, 0x00	; 0
 bb8:	9a f0       	brmi	.+38     	; 0xbe0 <__mulsf3_pse+0x88>
 bba:	f1 f0       	breq	.+60     	; 0xbf8 <__mulsf3_pse+0xa0>
 bbc:	88 23       	and	r24, r24
 bbe:	4a f0       	brmi	.+18     	; 0xbd2 <__mulsf3_pse+0x7a>
 bc0:	ee 0f       	add	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	bb 1f       	adc	r27, r27
 bc6:	66 1f       	adc	r22, r22
 bc8:	77 1f       	adc	r23, r23
 bca:	88 1f       	adc	r24, r24
 bcc:	91 50       	subi	r25, 0x01	; 1
 bce:	50 40       	sbci	r21, 0x00	; 0
 bd0:	a9 f7       	brne	.-22     	; 0xbbc <__mulsf3_pse+0x64>
 bd2:	9e 3f       	cpi	r25, 0xFE	; 254
 bd4:	51 05       	cpc	r21, r1
 bd6:	80 f0       	brcs	.+32     	; 0xbf8 <__mulsf3_pse+0xa0>
 bd8:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_inf>
 bdc:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
 be0:	5f 3f       	cpi	r21, 0xFF	; 255
 be2:	e4 f3       	brlt	.-8      	; 0xbdc <__mulsf3_pse+0x84>
 be4:	98 3e       	cpi	r25, 0xE8	; 232
 be6:	d4 f3       	brlt	.-12     	; 0xbdc <__mulsf3_pse+0x84>
 be8:	86 95       	lsr	r24
 bea:	77 95       	ror	r23
 bec:	67 95       	ror	r22
 bee:	b7 95       	ror	r27
 bf0:	f7 95       	ror	r31
 bf2:	e7 95       	ror	r30
 bf4:	9f 5f       	subi	r25, 0xFF	; 255
 bf6:	c1 f7       	brne	.-16     	; 0xbe8 <__mulsf3_pse+0x90>
 bf8:	fe 2b       	or	r31, r30
 bfa:	88 0f       	add	r24, r24
 bfc:	91 1d       	adc	r25, r1
 bfe:	96 95       	lsr	r25
 c00:	87 95       	ror	r24
 c02:	97 f9       	bld	r25, 7
 c04:	08 95       	ret

00000c06 <__udivmodsi4>:
 c06:	a1 e2       	ldi	r26, 0x21	; 33
 c08:	1a 2e       	mov	r1, r26
 c0a:	aa 1b       	sub	r26, r26
 c0c:	bb 1b       	sub	r27, r27
 c0e:	fd 01       	movw	r30, r26
 c10:	0d c0       	rjmp	.+26     	; 0xc2c <__udivmodsi4_ep>

00000c12 <__udivmodsi4_loop>:
 c12:	aa 1f       	adc	r26, r26
 c14:	bb 1f       	adc	r27, r27
 c16:	ee 1f       	adc	r30, r30
 c18:	ff 1f       	adc	r31, r31
 c1a:	a2 17       	cp	r26, r18
 c1c:	b3 07       	cpc	r27, r19
 c1e:	e4 07       	cpc	r30, r20
 c20:	f5 07       	cpc	r31, r21
 c22:	20 f0       	brcs	.+8      	; 0xc2c <__udivmodsi4_ep>
 c24:	a2 1b       	sub	r26, r18
 c26:	b3 0b       	sbc	r27, r19
 c28:	e4 0b       	sbc	r30, r20
 c2a:	f5 0b       	sbc	r31, r21

00000c2c <__udivmodsi4_ep>:
 c2c:	66 1f       	adc	r22, r22
 c2e:	77 1f       	adc	r23, r23
 c30:	88 1f       	adc	r24, r24
 c32:	99 1f       	adc	r25, r25
 c34:	1a 94       	dec	r1
 c36:	69 f7       	brne	.-38     	; 0xc12 <__udivmodsi4_loop>
 c38:	60 95       	com	r22
 c3a:	70 95       	com	r23
 c3c:	80 95       	com	r24
 c3e:	90 95       	com	r25
 c40:	9b 01       	movw	r18, r22
 c42:	ac 01       	movw	r20, r24
 c44:	bd 01       	movw	r22, r26
 c46:	cf 01       	movw	r24, r30
 c48:	08 95       	ret

00000c4a <__tablejump2__>:
 c4a:	ee 0f       	add	r30, r30
 c4c:	ff 1f       	adc	r31, r31
 c4e:	05 90       	lpm	r0, Z+
 c50:	f4 91       	lpm	r31, Z
 c52:	e0 2d       	mov	r30, r0
 c54:	09 94       	ijmp

00000c56 <__muluhisi3>:
 c56:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__umulhisi3>
 c5a:	a5 9f       	mul	r26, r21
 c5c:	90 0d       	add	r25, r0
 c5e:	b4 9f       	mul	r27, r20
 c60:	90 0d       	add	r25, r0
 c62:	a4 9f       	mul	r26, r20
 c64:	80 0d       	add	r24, r0
 c66:	91 1d       	adc	r25, r1
 c68:	11 24       	eor	r1, r1
 c6a:	08 95       	ret

00000c6c <__umulsidi3>:
 c6c:	e8 94       	clt

00000c6e <__umulsidi3_helper>:
 c6e:	df 93       	push	r29
 c70:	cf 93       	push	r28
 c72:	fc 01       	movw	r30, r24
 c74:	db 01       	movw	r26, r22
 c76:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__umulhisi3>
 c7a:	7f 93       	push	r23
 c7c:	6f 93       	push	r22
 c7e:	e9 01       	movw	r28, r18
 c80:	9a 01       	movw	r18, r20
 c82:	ac 01       	movw	r20, r24
 c84:	bf 93       	push	r27
 c86:	af 93       	push	r26
 c88:	3f 93       	push	r19
 c8a:	2f 93       	push	r18
 c8c:	df 01       	movw	r26, r30
 c8e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__umulhisi3>
 c92:	26 f4       	brtc	.+8      	; 0xc9c <__umulsidi3_helper+0x2e>
 c94:	6c 1b       	sub	r22, r28
 c96:	7d 0b       	sbc	r23, r29
 c98:	82 0b       	sbc	r24, r18
 c9a:	93 0b       	sbc	r25, r19
 c9c:	9e 01       	movw	r18, r28
 c9e:	eb 01       	movw	r28, r22
 ca0:	fc 01       	movw	r30, r24
 ca2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__muldi3_6>
 ca6:	af 91       	pop	r26
 ca8:	bf 91       	pop	r27
 caa:	2f 91       	pop	r18
 cac:	3f 91       	pop	r19
 cae:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__muldi3_6>
 cb2:	be 01       	movw	r22, r28
 cb4:	cf 01       	movw	r24, r30
 cb6:	f9 01       	movw	r30, r18
 cb8:	2f 91       	pop	r18
 cba:	3f 91       	pop	r19
 cbc:	cf 91       	pop	r28
 cbe:	df 91       	pop	r29
 cc0:	08 95       	ret

00000cc2 <__ashrdi3>:
 cc2:	97 fb       	bst	r25, 7
 cc4:	10 f8       	bld	r1, 0

00000cc6 <__lshrdi3>:
 cc6:	16 94       	lsr	r1
 cc8:	00 08       	sbc	r0, r0
 cca:	0f 93       	push	r16
 ccc:	08 30       	cpi	r16, 0x08	; 8
 cce:	98 f0       	brcs	.+38     	; 0xcf6 <__lshrdi3+0x30>
 cd0:	08 50       	subi	r16, 0x08	; 8
 cd2:	23 2f       	mov	r18, r19
 cd4:	34 2f       	mov	r19, r20
 cd6:	45 2f       	mov	r20, r21
 cd8:	56 2f       	mov	r21, r22
 cda:	67 2f       	mov	r22, r23
 cdc:	78 2f       	mov	r23, r24
 cde:	89 2f       	mov	r24, r25
 ce0:	90 2d       	mov	r25, r0
 ce2:	f4 cf       	rjmp	.-24     	; 0xccc <__lshrdi3+0x6>
 ce4:	05 94       	asr	r0
 ce6:	97 95       	ror	r25
 ce8:	87 95       	ror	r24
 cea:	77 95       	ror	r23
 cec:	67 95       	ror	r22
 cee:	57 95       	ror	r21
 cf0:	47 95       	ror	r20
 cf2:	37 95       	ror	r19
 cf4:	27 95       	ror	r18
 cf6:	0a 95       	dec	r16
 cf8:	aa f7       	brpl	.-22     	; 0xce4 <__lshrdi3+0x1e>
 cfa:	0f 91       	pop	r16
 cfc:	08 95       	ret

00000cfe <__umulhisi3>:
 cfe:	a2 9f       	mul	r26, r18
 d00:	b0 01       	movw	r22, r0
 d02:	b3 9f       	mul	r27, r19
 d04:	c0 01       	movw	r24, r0
 d06:	a3 9f       	mul	r26, r19
 d08:	70 0d       	add	r23, r0
 d0a:	81 1d       	adc	r24, r1
 d0c:	11 24       	eor	r1, r1
 d0e:	91 1d       	adc	r25, r1
 d10:	b2 9f       	mul	r27, r18
 d12:	70 0d       	add	r23, r0
 d14:	81 1d       	adc	r24, r1
 d16:	11 24       	eor	r1, r1
 d18:	91 1d       	adc	r25, r1
 d1a:	08 95       	ret

00000d1c <__muldi3_6>:
 d1c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__umulhisi3>
 d20:	46 0f       	add	r20, r22
 d22:	57 1f       	adc	r21, r23
 d24:	c8 1f       	adc	r28, r24
 d26:	d9 1f       	adc	r29, r25
 d28:	08 f4       	brcc	.+2      	; 0xd2c <__muldi3_6+0x10>
 d2a:	31 96       	adiw	r30, 0x01	; 1
 d2c:	08 95       	ret

00000d2e <ccp_write_io>:
 d2e:	dc 01       	movw	r26, r24
 d30:	28 ed       	ldi	r18, 0xD8	; 216
 d32:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
 d36:	6c 93       	st	X, r22
 d38:	08 95       	ret

00000d3a <_exit>:
 d3a:	f8 94       	cli

00000d3c <__stop_program>:
 d3c:	ff cf       	rjmp	.-2      	; 0xd3c <__stop_program>
