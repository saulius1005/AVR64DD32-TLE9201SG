
AVR64DD32-TLE9201SG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00806000  00806000  00000c72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bfe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00806000  00806000  00000c72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000045d8  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002854  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7a  00000000  00000000  00007c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00008c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c2b  00000000  00000000  00008ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063c  00000000  00000000  0000ab03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000b13f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  10:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  14:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  18:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  20:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  28:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  30:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  38:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  44:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  4c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  50:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  54:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  58:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  5c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  60:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  68:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  6c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  70:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  7c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  80:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  84:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  8c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  90:	f3 00       	.word	0x00f3	; ????
  92:	cb 00       	.word	0x00cb	; ????
  94:	cb 00       	.word	0x00cb	; ????
  96:	cb 00       	.word	0x00cb	; ????
  98:	d0 00       	.word	0x00d0	; ????
  9a:	cb 00       	.word	0x00cb	; ????
  9c:	cb 00       	.word	0x00cb	; ????
  9e:	cb 00       	.word	0x00cb	; ????
  a0:	d5 00       	.word	0x00d5	; ????
  a2:	cb 00       	.word	0x00cb	; ????
  a4:	cb 00       	.word	0x00cb	; ????
  a6:	cb 00       	.word	0x00cb	; ????
  a8:	cb 00       	.word	0x00cb	; ????
  aa:	cb 00       	.word	0x00cb	; ????
  ac:	cb 00       	.word	0x00cb	; ????
  ae:	cb 00       	.word	0x00cb	; ????
  b0:	cb 00       	.word	0x00cb	; ????
  b2:	cb 00       	.word	0x00cb	; ????
  b4:	cb 00       	.word	0x00cb	; ????
  b6:	cb 00       	.word	0x00cb	; ????
  b8:	da 00       	.word	0x00da	; ????
  ba:	cb 00       	.word	0x00cb	; ????
  bc:	cb 00       	.word	0x00cb	; ????
  be:	cb 00       	.word	0x00cb	; ????
  c0:	df 00       	.word	0x00df	; ????
  c2:	cb 00       	.word	0x00cb	; ????
  c4:	cb 00       	.word	0x00cb	; ????
  c6:	cb 00       	.word	0x00cb	; ????
  c8:	e4 00       	.word	0x00e4	; ????
  ca:	cb 00       	.word	0x00cb	; ????
  cc:	cb 00       	.word	0x00cb	; ????
  ce:	cb 00       	.word	0x00cb	; ????
  d0:	e9 00       	.word	0x00e9	; ????
  d2:	cb 00       	.word	0x00cb	; ????
  d4:	cb 00       	.word	0x00cb	; ????
  d6:	cb 00       	.word	0x00cb	; ????
  d8:	ee 00       	.word	0x00ee	; ????
  da:	10 01       	movw	r2, r0
  dc:	7d 01       	movw	r14, r26
  de:	15 01       	movw	r2, r10
  e0:	7d 01       	movw	r14, r26
  e2:	36 01       	movw	r6, r12
  e4:	7d 01       	movw	r14, r26
  e6:	51 01       	movw	r10, r2
  e8:	7d 01       	movw	r14, r26
  ea:	63 01       	movw	r12, r6
  ec:	7d 01       	movw	r14, r26
  ee:	75 01       	movw	r14, r10
  f0:	7d 01       	movw	r14, r26
  f2:	7d 01       	movw	r14, r26
  f4:	7d 01       	movw	r14, r26
  f6:	7d 01       	movw	r14, r26
  f8:	7d 01       	movw	r14, r26
  fa:	1e 01       	movw	r2, r28
  fc:	7d 01       	movw	r14, r26
  fe:	3f 01       	movw	r6, r30
 100:	7d 01       	movw	r14, r26
 102:	48 01       	movw	r8, r16
 104:	7d 01       	movw	r14, r26
 106:	5a 01       	movw	r10, r20
 108:	7d 01       	movw	r14, r26
 10a:	6c 01       	movw	r12, r24

0000010c <__ctors_end>:
 10c:	11 24       	eor	r1, r1
 10e:	1f be       	out	0x3f, r1	; 63
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df e7       	ldi	r29, 0x7F	; 127
 116:	de bf       	out	0x3e, r29	; 62

00000118 <__do_clear_bss>:
 118:	20 e6       	ldi	r18, 0x60	; 96
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b0 e6       	ldi	r27, 0x60	; 96
 11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
 120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
 122:	ac 31       	cpi	r26, 0x1C	; 28
 124:	b2 07       	cpc	r27, r18
 126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
 128:	0e 94 c9 01 	call	0x392	; 0x392 <main>
 12c:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <_exit>

00000130 <__bad_interrupt>:
 130:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000134 <CLOCK_INHF_clock_init>:
 * @details Configures the internal oscillator with a frequency of 24 MHz. 
 *          Optionally enables clock output on pin PA7. A prescaler can be configured if needed.
 */
void CLOCK_INHF_clock_init() {
    /* Enable internal oscillator with a frequency of 24 MHz */
    ccp_write_io((uint8_t *) &CLKCTRL.OSCHFCTRLA, CLKCTRL_FRQSEL_24M_gc); 
 134:	64 e2       	ldi	r22, 0x24	; 36
 136:	88 e6       	ldi	r24, 0x68	; 104
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 f7 05 	call	0xbee	; 0xbee <ccp_write_io>

    /* Set main clock prescaler (uncomment if required) */
    // ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);

    /* Set main clock to use the internal oscillator as the source */
    ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, 
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 f7 05 	call	0xbee	; 0xbee <ccp_write_io>
                 CLKCTRL_CLKSEL_OSCHF_gc /* | CLKCTRL_CLKOUT_bm */); 
    // Uncomment | CLKCTRL_CLKOUT_bm if clock output on PA7 is required

    /* Wait for oscillator change to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
 148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 14c:	80 fd       	sbrc	r24, 0
 14e:	fc cf       	rjmp	.-8      	; 0x148 <CLOCK_INHF_clock_init+0x14>
}
 150:	08 95       	ret

00000152 <PLL_init>:
 * 
 * @note Ensure the input frequency does not exceed the PLL's maximum limit.
 */
void PLL_init() {
    /* Configure PLL with a multiplication factor of 2 */
    ccp_write_io((uint8_t *) &CLKCTRL.PLLCTRLA, CLKCTRL_MULFAC_2x_gc); 
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 f7 05 	call	0xbee	; 0xbee <ccp_write_io>

    /* Wait for PLL configuration to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm) {};
 15c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 160:	85 fd       	sbrc	r24, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <PLL_init+0xa>
}
 164:	08 95       	ret

00000166 <CLOCK_read>:
 * @details Determines the base clock frequency based on oscillator and prescaler settings. 
 *          The maximum frequency is capped at 48 MHz for PLL configurations.
 * 
 * @return uint32_t The current clock frequency in Hz.
 */
uint32_t CLOCK_read() {
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
 17a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
 17e:	e8 2f       	mov	r30, r24
 180:	ec 73       	andi	r30, 0x3C	; 60
 182:	8e 2f       	mov	r24, r30
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	85 32       	cpi	r24, 0x25	; 37
 188:	91 05       	cpc	r25, r1
 18a:	28 f4       	brcc	.+10     	; 0x196 <CLOCK_read+0x30>
 18c:	fc 01       	movw	r30, r24
 18e:	e8 5b       	subi	r30, 0xB8	; 184
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__tablejump2__>
 *          The maximum frequency is capped at 48 MHz for PLL configurations.
 * 
 * @return uint32_t The current clock frequency in Hz.
 */
uint32_t CLOCK_read() {
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	79 e0       	ldi	r23, 0x09	; 9
 19a:	8d e3       	ldi	r24, 0x3D	; 61
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	27 c0       	rjmp	.+78     	; 0x1ee <CLOCK_read+0x88>

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
        case CLKCTRL_FRQSEL_1M_gc: base_freq = 1000000; break;
        case CLKCTRL_FRQSEL_2M_gc: base_freq = 2000000; break;
 1a0:	60 e8       	ldi	r22, 0x80	; 128
 1a2:	74 e8       	ldi	r23, 0x84	; 132
 1a4:	8e e1       	ldi	r24, 0x1E	; 30
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	22 c0       	rjmp	.+68     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_3M_gc: base_freq = 3000000; break;
 1aa:	60 ec       	ldi	r22, 0xC0	; 192
 1ac:	76 ec       	ldi	r23, 0xC6	; 198
 1ae:	8d e2       	ldi	r24, 0x2D	; 45
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	1d c0       	rjmp	.+58     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_8M_gc: base_freq = 8000000; break;
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	72 e1       	ldi	r23, 0x12	; 18
 1b8:	8a e7       	ldi	r24, 0x7A	; 122
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	18 c0       	rjmp	.+48     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_12M_gc: base_freq = 12000000; break;
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	7b e1       	ldi	r23, 0x1B	; 27
 1c2:	87 eb       	ldi	r24, 0xB7	; 183
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_16M_gc: base_freq = 16000000; break;
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	74 e2       	ldi	r23, 0x24	; 36
 1cc:	84 ef       	ldi	r24, 0xF4	; 244
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e c0       	rjmp	.+28     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_20M_gc: base_freq = 20000000; break;
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	7d e2       	ldi	r23, 0x2D	; 45
 1d6:	81 e3       	ldi	r24, 0x31	; 49
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_24M_gc: base_freq = 24000000; break;
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	76 e3       	ldi	r23, 0x36	; 54
 1e0:	8e e6       	ldi	r24, 0x6E	; 110
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <CLOCK_read+0x88>
uint32_t CLOCK_read() {
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
        case CLKCTRL_FRQSEL_1M_gc: base_freq = 1000000; break;
 1e6:	60 e4       	ldi	r22, 0x40	; 64
 1e8:	72 e4       	ldi	r23, 0x42	; 66
 1ea:	8f e0       	ldi	r24, 0x0F	; 15
 1ec:	90 e0       	ldi	r25, 0x00	; 0
        case CLKCTRL_FRQSEL_20M_gc: base_freq = 20000000; break;
        case CLKCTRL_FRQSEL_24M_gc: base_freq = 24000000; break;
    }

    // Adjust base frequency for peripheral clock prescaler
    if ((TCD0.CTRLA & TCD_CLKSEL_gm) == TCD_CLKSEL_CLKPER_gc) {
 1ee:	20 91 80 0b 	lds	r18, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 1f2:	20 76       	andi	r18, 0x60	; 96
 1f4:	20 36       	cpi	r18, 0x60	; 96
 1f6:	09 f0       	breq	.+2      	; 0x1fa <CLOCK_read+0x94>
 1f8:	80 c0       	rjmp	.+256    	; 0x2fa <CLOCK_read+0x194>
        if (CLKCTRL.MCLKCTRLB & CLKCTRL_PEN_bm) {
 1fa:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
 1fe:	20 ff       	sbrs	r18, 0
 200:	7c c0       	rjmp	.+248    	; 0x2fa <CLOCK_read+0x194>
            switch (CLKCTRL.MCLKCTRLB & CLKCTRL_PDIV_gm) {
 202:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
 206:	e2 2f       	mov	r30, r18
 208:	ee 71       	andi	r30, 0x1E	; 30
 20a:	0e 2f       	mov	r16, r30
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	09 31       	cpi	r16, 0x19	; 25
 210:	11 05       	cpc	r17, r1
 212:	08 f0       	brcs	.+2      	; 0x216 <CLOCK_read+0xb0>
 214:	72 c0       	rjmp	.+228    	; 0x2fa <CLOCK_read+0x194>
 216:	f8 01       	movw	r30, r16
 218:	e3 59       	subi	r30, 0x93	; 147
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__tablejump2__>
                case CLKCTRL_PDIV_2X_gc:  base_freq /= 2; break;
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	77 95       	ror	r23
 226:	67 95       	ror	r22
 228:	68 c0       	rjmp	.+208    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_4X_gc:  base_freq /= 4; break;
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	77 95       	ror	r23
 230:	67 95       	ror	r22
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	77 95       	ror	r23
 238:	67 95       	ror	r22
 23a:	5f c0       	rjmp	.+190    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_6X_gc:  base_freq /= 6; break;
 23c:	2b ea       	ldi	r18, 0xAB	; 171
 23e:	3a ea       	ldi	r19, 0xAA	; 170
 240:	4a ea       	ldi	r20, 0xAA	; 170
 242:	5a ea       	ldi	r21, 0xAA	; 170
 244:	0e 94 96 05 	call	0xb2c	; 0xb2c <__umulsidi3>
 248:	00 e2       	ldi	r16, 0x20	; 32
 24a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__lshrdi3>
 24e:	82 2e       	mov	r8, r18
 250:	93 2e       	mov	r9, r19
 252:	a4 2e       	mov	r10, r20
 254:	b5 2e       	mov	r11, r21
 256:	c5 01       	movw	r24, r10
 258:	b4 01       	movw	r22, r8
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	77 95       	ror	r23
 260:	67 95       	ror	r22
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	77 95       	ror	r23
 268:	67 95       	ror	r22
 26a:	47 c0       	rjmp	.+142    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_8X_gc:  base_freq /= 8; break;
 26c:	68 94       	set
 26e:	12 f8       	bld	r1, 2
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	77 95       	ror	r23
 276:	67 95       	ror	r22
 278:	16 94       	lsr	r1
 27a:	d1 f7       	brne	.-12     	; 0x270 <CLOCK_read+0x10a>
 27c:	3e c0       	rjmp	.+124    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_10X_gc: base_freq /= 10; break;
 27e:	2a e0       	ldi	r18, 0x0A	; 10
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	0e 94 63 05 	call	0xac6	; 0xac6 <__udivmodsi4>
 28a:	ca 01       	movw	r24, r20
 28c:	b9 01       	movw	r22, r18
 28e:	35 c0       	rjmp	.+106    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_12X_gc: base_freq /= 12; break;
 290:	2c e0       	ldi	r18, 0x0C	; 12
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	0e 94 63 05 	call	0xac6	; 0xac6 <__udivmodsi4>
 29c:	ca 01       	movw	r24, r20
 29e:	b9 01       	movw	r22, r18
 2a0:	2c c0       	rjmp	.+88     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_16X_gc: base_freq /= 16; break;
 2a2:	68 94       	set
 2a4:	13 f8       	bld	r1, 3
 2a6:	96 95       	lsr	r25
 2a8:	87 95       	ror	r24
 2aa:	77 95       	ror	r23
 2ac:	67 95       	ror	r22
 2ae:	16 94       	lsr	r1
 2b0:	d1 f7       	brne	.-12     	; 0x2a6 <CLOCK_read+0x140>
 2b2:	23 c0       	rjmp	.+70     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_24X_gc: base_freq /= 24; break;
 2b4:	28 e1       	ldi	r18, 0x18	; 24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	0e 94 63 05 	call	0xac6	; 0xac6 <__udivmodsi4>
 2c0:	ca 01       	movw	r24, r20
 2c2:	b9 01       	movw	r22, r18
 2c4:	1a c0       	rjmp	.+52     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_32X_gc: base_freq /= 32; break;
 2c6:	68 94       	set
 2c8:	14 f8       	bld	r1, 4
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	77 95       	ror	r23
 2d0:	67 95       	ror	r22
 2d2:	16 94       	lsr	r1
 2d4:	d1 f7       	brne	.-12     	; 0x2ca <CLOCK_read+0x164>
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_48X_gc: base_freq /= 48; break;
 2d8:	20 e3       	ldi	r18, 0x30	; 48
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 63 05 	call	0xac6	; 0xac6 <__udivmodsi4>
 2e4:	ca 01       	movw	r24, r20
 2e6:	b9 01       	movw	r22, r18
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_64X_gc: base_freq /= 64; break;
 2ea:	68 94       	set
 2ec:	15 f8       	bld	r1, 5
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	77 95       	ror	r23
 2f4:	67 95       	ror	r22
 2f6:	16 94       	lsr	r1
 2f8:	d1 f7       	brne	.-12     	; 0x2ee <CLOCK_read+0x188>
            }
        }
    }

    // Adjust base frequency for PLL
    if ((TCD0.CTRLA & TCD_CLKSEL_gm) == TCD_CLKSEL_PLL_gc) {
 2fa:	20 91 80 0b 	lds	r18, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 2fe:	20 76       	andi	r18, 0x60	; 96
 300:	20 32       	cpi	r18, 0x20	; 32
 302:	49 f5       	brne	.+82     	; 0x356 <CLOCK_read+0x1f0>
        if ((CLKCTRL.PLLCTRLA & CLKCTRL_PLLCTRLA) == CLKCTRL_MULFAC_2x_gc) {
 304:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 308:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 30c:	23 23       	and	r18, r19
 30e:	21 30       	cpi	r18, 0x01	; 1
 310:	29 f4       	brne	.+10     	; 0x31c <CLOCK_read+0x1b6>
            base_freq *= 2;
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	11 c0       	rjmp	.+34     	; 0x33e <CLOCK_read+0x1d8>
        } else if ((CLKCTRL.PLLCTRLA & CLKCTRL_PLLCTRLA) == CLKCTRL_MULFAC_3x_gc) {
 31c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 320:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 324:	23 23       	and	r18, r19
 326:	22 30       	cpi	r18, 0x02	; 2
 328:	51 f4       	brne	.+20     	; 0x33e <CLOCK_read+0x1d8>
            base_freq *= 3;
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
 32e:	cc 0c       	add	r12, r12
 330:	dd 1c       	adc	r13, r13
 332:	ee 1c       	adc	r14, r14
 334:	ff 1c       	adc	r15, r15
 336:	6c 0d       	add	r22, r12
 338:	7d 1d       	adc	r23, r13
 33a:	8e 1d       	adc	r24, r14
 33c:	9f 1d       	adc	r25, r15
        }

        if (base_freq > 48000000) {
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	2c e6       	ldi	r18, 0x6C	; 108
 342:	72 07       	cpc	r23, r18
 344:	2c ed       	ldi	r18, 0xDC	; 220
 346:	82 07       	cpc	r24, r18
 348:	22 e0       	ldi	r18, 0x02	; 2
 34a:	92 07       	cpc	r25, r18
 34c:	20 f0       	brcs	.+8      	; 0x356 <CLOCK_read+0x1f0>
            base_freq = 48000000; ///< Cap at 48 MHz (maximum PLL frequency)
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	7c e6       	ldi	r23, 0x6C	; 108
 352:	8c ed       	ldi	r24, 0xDC	; 220
 354:	92 e0       	ldi	r25, 0x02	; 2
        }
    }

    return base_freq;
}
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	af 90       	pop	r10
 366:	9f 90       	pop	r9
 368:	8f 90       	pop	r8
 36a:	08 95       	ret

0000036c <GPIO_init>:
 * - Configures PORTD for motor control: PWM, DIR, DIS as output.
 * - Configures PORTF for input buttons with pull-up resistors: START/STOP, DIR.
 */
void GPIO_init() {
    /* Configure SPI pins on PORTA */
    PORTA.DIRSET = PIN4_bm | PIN6_bm | PIN7_bm; // Set MOSI (PA4), SCK (PA6), SS (PA7) as outputs
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	f4 e0       	ldi	r31, 0x04	; 4
 370:	80 ed       	ldi	r24, 0xD0	; 208
 372:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN5_bm;                     // Set MISO (PA5) as input
 374:	80 e2       	ldi	r24, 0x20	; 32
 376:	82 83       	std	Z+2, r24	; 0x02
    SPI0_Stop();                                // Ensure SPI0 module is stopped
 378:	0e 94 02 02 	call	0x404	; 0x404 <SPI0_Stop>

    /* Configure motor control pins on PORTD */
    PORTD.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm; // Set PWM (PD4), DIR (PD5), DIS (PD6) as outputs
 37c:	80 e7       	ldi	r24, 0x70	; 112
 37e:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>

    /* Configure input buttons on PORTF */
    PORTF.DIRCLR = PIN5_bm | PIN6_bm;           // Set START/STOP (PF5), DIR (PF6) as inputs
 382:	e0 ea       	ldi	r30, 0xA0	; 160
 384:	f4 e0       	ldi	r31, 0x04	; 4
 386:	80 e6       	ldi	r24, 0x60	; 96
 388:	82 83       	std	Z+2, r24	; 0x02
    PORTF.PIN5CTRL = PORT_PULLUPEN_bm;          // Enable pull-up resistor for START/STOP (PF5)
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	85 8b       	std	Z+21, r24	; 0x15
    PORTF.PIN6CTRL = PORT_PULLUPEN_bm;          // Enable pull-up resistor for DIR (PF6)
 38e:	86 8b       	std	Z+22, r24	; 0x16
 390:	08 95       	ret

00000392 <main>:
 * 
 * @return int Always returns 0 (not used in embedded systems).
 */
int main(void)
{
    GPIO_init();
 392:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_init>
    CLOCK_INHF_clock_init(); ///< Initializes the internal high-frequency clock.
 396:	0e 94 9a 00 	call	0x134	; 0x134 <CLOCK_INHF_clock_init>

    TLE9201SG.pwm_freq = 20000; ///< Sets PWM frequency to 20 kHz. Always set this before mode initialization.
 39a:	e1 e0       	ldi	r30, 0x01	; 1
 39c:	f0 e6       	ldi	r31, 0x60	; 96
 39e:	80 e2       	ldi	r24, 0x20	; 32
 3a0:	9e e4       	ldi	r25, 0x4E	; 78
 3a2:	81 8b       	std	Z+17, r24	; 0x11
 3a4:	92 8b       	std	Z+18, r25	; 0x12
    TLE9201SG.duty_cycle = 50.0; ///< Sets duty cycle to 50%. Always set this before mode initialization.
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	a8 e4       	ldi	r26, 0x48	; 72
 3ac:	b2 e4       	ldi	r27, 0x42	; 66
 3ae:	83 8b       	std	Z+19, r24	; 0x13
 3b0:	94 8b       	std	Z+20, r25	; 0x14
 3b2:	a5 8b       	std	Z+21, r26	; 0x15
 3b4:	b6 8b       	std	Z+22, r27	; 0x16

    TLE9201SG_Mode_init(TLE9201SG_MODE_SPI); ///< Initializes the TLE9201SG in SPI mode.
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 46 03 	call	0x68c	; 0x68c <TLE9201SG_Mode_init>
    // TLE9201SG_OFF(); ///< Optionally disables all outputs.

    while (1) {
        if (!(PORTF.IN & PIN5_bm)) { ///< Starts TLE9201SG if PF5 is low.
 3bc:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f04a8>
 3c0:	85 fd       	sbrc	r24, 5
 3c2:	10 c0       	rjmp	.+32     	; 0x3e4 <main+0x52>
            TLE9201SG_ON();
 3c4:	0e 94 76 03 	call	0x6ec	; 0x6ec <TLE9201SG_ON>
            TLE9201SG_START();
 3c8:	0e 94 9e 03 	call	0x73c	; 0x73c <TLE9201SG_START>
            if (!(PORTF.IN & PIN6_bm)) { ///< Changes direction based on PF6.
 3cc:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f04a8>
 3d0:	86 fd       	sbrc	r24, 6
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <main+0x4a>
                TLE9201SG_DIR(1); ///< Sets direction to forward.
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 91 03 	call	0x722	; 0x722 <TLE9201SG_DIR>
 3da:	f0 cf       	rjmp	.-32     	; 0x3bc <main+0x2a>
            } else {
                TLE9201SG_DIR(0); ///< Sets direction to reverse.
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 91 03 	call	0x722	; 0x722 <TLE9201SG_DIR>
 3e2:	ec cf       	rjmp	.-40     	; 0x3bc <main+0x2a>
            }
        } else { ///< Stops TLE9201SG if PF5 is high.
            TLE9201SG_STOP();
 3e4:	0e 94 bd 03 	call	0x77a	; 0x77a <TLE9201SG_STOP>
            TLE9201SG_OFF();
 3e8:	0e 94 82 03 	call	0x704	; 0x704 <TLE9201SG_OFF>
 3ec:	e7 cf       	rjmp	.-50     	; 0x3bc <main+0x2a>

000003ee <SPI0_init>:
 * - Configures SPI0 as a Master with a clock speed of 6 MHz (F_CPU/4).
 * - Sets SPI mode 1 for communication with TLE9201SG.
 * - Enables the SPI0 module.
 */
void SPI0_init() {
    SPI0.CTRLA = SPI_MASTER_bm          // Configure as Master
 3ee:	e0 e4       	ldi	r30, 0x40	; 64
 3f0:	f9 e0       	ldi	r31, 0x09	; 9
 3f2:	81 e2       	ldi	r24, 0x21	; 33
 3f4:	80 83       	st	Z, r24
               | SPI_PRESC_DIV4_gc      // Clock speed = F_CPU / 4 = 24 MHz / 4 = 6 MHz
               | SPI_ENABLE_bm;         // Enable SPI

    SPI0.CTRLB = SPI_MODE_1_gc;         // Set SPI mode 1 for TLE9201SG
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	81 83       	std	Z+1, r24	; 0x01
 3fa:	08 95       	ret

000003fc <SPI0_Start>:
 * @details 
 * - Pulls the Slave Select (SS) line low to indicate the start of communication 
 *   with the SPI slave device.
 */
void SPI0_Start() {
    PORTA.OUTCLR = PIN7_bm; // Set SS (PA7) low
 3fc:	80 e8       	ldi	r24, 0x80	; 128
 3fe:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
 402:	08 95       	ret

00000404 <SPI0_Stop>:
 * @details 
 * - Pulls the Slave Select (SS) line high to indicate the end of communication 
 *   with the SPI slave device.
 */
void SPI0_Stop() {
    PORTA.OUTSET = PIN7_bm; // Set SS (PA7) high
 404:	80 e8       	ldi	r24, 0x80	; 128
 406:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
 40a:	08 95       	ret

0000040c <TCD0_ON>:
 * @brief Turns on the TCD0 counter.
 * 
 * @details Waits until the TCD is ready to be enabled, then activates the timer.
 */
void TCD0_ON() {
    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until the TCD is ready
 40c:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 410:	80 ff       	sbrs	r24, 0
 412:	fc cf       	rjmp	.-8      	; 0x40c <TCD0_ON>
    TCD0.CTRLA |= TCD_ENABLE_bm; ///< Enable the TCD0 counter
 414:	e0 e8       	ldi	r30, 0x80	; 128
 416:	fb e0       	ldi	r31, 0x0B	; 11
 418:	80 81       	ld	r24, Z
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	80 83       	st	Z, r24
 41e:	08 95       	ret

00000420 <TCD0_OFF>:
 * @brief Turns off the TCD0 counter.
 * 
 * @details Waits until the TCD is ready to be disabled, then deactivates the timer.
 */
void TCD0_OFF() {
    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until the TCD is ready
 420:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 424:	80 ff       	sbrs	r24, 0
 426:	fc cf       	rjmp	.-8      	; 0x420 <TCD0_OFF>
    TCD0.CTRLA &= ~TCD_ENABLE_bm; ///< Disable the TCD0 counter
 428:	e0 e8       	ldi	r30, 0x80	; 128
 42a:	fb e0       	ldi	r31, 0x0B	; 11
 42c:	80 81       	ld	r24, Z
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <PWM_init>:
}


void PWM_init(uint32_t target_freq, float duty_cycle) {
 434:	4f 92       	push	r4
 436:	5f 92       	push	r5
 438:	6f 92       	push	r6
 43a:	7f 92       	push	r7
 43c:	8f 92       	push	r8
 43e:	9f 92       	push	r9
 440:	af 92       	push	r10
 442:	bf 92       	push	r11
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	2b 01       	movw	r4, r22
 452:	3c 01       	movw	r6, r24
 454:	69 01       	movw	r12, r18
 456:	7a 01       	movw	r14, r20
    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
 458:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 45c:	88 71       	andi	r24, 0x18	; 24
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	31 f0       	breq	.+12     	; 0x46e <PWM_init+0x3a>
 462:	80 31       	cpi	r24, 0x10	; 16
 464:	11 f0       	breq	.+4      	; 0x46a <PWM_init+0x36>
}


void PWM_init(uint32_t target_freq, float duty_cycle) {
    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
 466:	c1 e0       	ldi	r28, 0x01	; 1
 468:	03 c0       	rjmp	.+6      	; 0x470 <PWM_init+0x3c>
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
        case TCD_CNTPRES_DIV4_gc:  TCD_prescaler = 4; break;
        case TCD_CNTPRES_DIV32_gc: TCD_prescaler = 32; break;
 46a:	c0 e2       	ldi	r28, 0x20	; 32
 46c:	01 c0       	rjmp	.+2      	; 0x470 <PWM_init+0x3c>

void PWM_init(uint32_t target_freq, float duty_cycle) {
    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
        case TCD_CNTPRES_DIV4_gc:  TCD_prescaler = 4; break;
 46e:	c4 e0       	ldi	r28, 0x04	; 4
        case TCD_CNTPRES_DIV32_gc: TCD_prescaler = 32; break;
    }
    // Calculate compare registers
    uint16_t cmpbclr = (CLOCK_read() / (TCD_prescaler * target_freq * 2)) - 1;
 470:	0e 94 b3 00 	call	0x166	; 0x166 <CLOCK_read>
 474:	4b 01       	movw	r8, r22
 476:	5c 01       	movw	r10, r24
 478:	ac 2f       	mov	r26, r28
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	a3 01       	movw	r20, r6
 47e:	92 01       	movw	r18, r4
 480:	0e 94 8b 05 	call	0xb16	; 0xb16 <__muluhisi3>
 484:	9b 01       	movw	r18, r22
 486:	ac 01       	movw	r20, r24
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	44 1f       	adc	r20, r20
 48e:	55 1f       	adc	r21, r21
 490:	c5 01       	movw	r24, r10
 492:	b4 01       	movw	r22, r8
 494:	0e 94 63 05 	call	0xac6	; 0xac6 <__udivmodsi4>
 498:	e9 01       	movw	r28, r18
 49a:	21 97       	sbiw	r28, 0x01	; 1
    uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_cycle / 100.0f)) + 1;
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	48 ec       	ldi	r20, 0xC8	; 200
 4a2:	52 e4       	ldi	r21, 0x42	; 66
 4a4:	c7 01       	movw	r24, r14
 4a6:	b6 01       	movw	r22, r12
 4a8:	0e 94 c7 03 	call	0x78e	; 0x78e <__divsf3>
 4ac:	6b 01       	movw	r12, r22
 4ae:	7c 01       	movw	r14, r24
 4b0:	be 01       	movw	r22, r28
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__floatunsisf>
 4ba:	a7 01       	movw	r20, r14
 4bc:	96 01       	movw	r18, r12
 4be:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__mulsf3>
 4c2:	0e 94 39 04 	call	0x872	; 0x872 <__fixunssfsi>
 4c6:	6f 5f       	subi	r22, 0xFF	; 255
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
    uint16_t cmpbset = cmpbclr - cmpaset - 1;
 4ca:	ce 01       	movw	r24, r28
 4cc:	86 1b       	sub	r24, r22
 4ce:	97 0b       	sbc	r25, r23
 4d0:	01 97       	sbiw	r24, 0x01	; 1

    // Set TCD compare registers
    TCD0.CMPBCLR = cmpbclr;
 4d2:	e0 e8       	ldi	r30, 0x80	; 128
 4d4:	fb e0       	ldi	r31, 0x0B	; 11
 4d6:	c6 a7       	std	Z+46, r28	; 0x2e
 4d8:	d7 a7       	std	Z+47, r29	; 0x2f
    TCD0.CMPBSET = cmpbset;
 4da:	84 a7       	std	Z+44, r24	; 0x2c
 4dc:	95 a7       	std	Z+45, r25	; 0x2d
    TCD0.CMPASET = cmpaset;
 4de:	60 a7       	std	Z+40, r22	; 0x28
 4e0:	71 a7       	std	Z+41, r23	; 0x29

}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	bf 90       	pop	r11
 4f0:	af 90       	pop	r10
 4f2:	9f 90       	pop	r9
 4f4:	8f 90       	pop	r8
 4f6:	7f 90       	pop	r7
 4f8:	6f 90       	pop	r6
 4fa:	5f 90       	pop	r5
 4fc:	4f 90       	pop	r4
 4fe:	08 95       	ret

00000500 <TCD0_init>:
 * 
 * @details Configures the waveform generation mode, fault control, and clock source.
 *          This function also selects the WOC (Waveform Output Compare) pin configuration.
 */
void TCD0_init() {
    PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT4_gc; ///< Select alternative WOC pin variant 4
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <__TEXT_REGION_LENGTH__+0x7f05e9>
    ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PD4 (pin 14)
 506:	60 e4       	ldi	r22, 0x40	; 64
 508:	82 e9       	ldi	r24, 0x92	; 146
 50a:	9b e0       	ldi	r25, 0x0B	; 11
 50c:	0e 94 f7 05 	call	0xbee	; 0xbee <ccp_write_io>

    TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
 510:	83 e0       	ldi	r24, 0x03	; 3
 512:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7f0b81>

    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until TCD is ready for configuration
 516:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 51a:	80 ff       	sbrs	r24, 0
 51c:	fc cf       	rjmp	.-8      	; 0x516 <TCD0_init+0x16>
    TCD0.CTRLA = TCD_CLKSEL_OSCHF_gc | ///< Select PLL as clock source
 51e:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 522:	08 95       	ret

00000524 <TLE9201SG_Read>:
        while (!(SPI0.INTFLAGS & SPI_RXCIF_bm)); // Wait until data is exchanged
        SPI0_Stop();
    }
    firsttime = 1;
    return SPI0.DATA;
}
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	18 2f       	mov	r17, r24
 52c:	d6 2f       	mov	r29, r22
 52e:	c0 e0       	ldi	r28, 0x00	; 0
 530:	27 c0       	rjmp	.+78     	; 0x580 <TLE9201SG_Read+0x5c>
 532:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SPI0_Start>
 536:	dd 23       	and	r29, r29
 538:	d1 f0       	breq	.+52     	; 0x56e <TLE9201SG_Read+0x4a>
 53a:	e1 e0       	ldi	r30, 0x01	; 1
 53c:	f0 e6       	ldi	r31, 0x60	; 96
 53e:	82 85       	ldd	r24, Z+10	; 0x0a
 540:	33 85       	ldd	r19, Z+11	; 0x0b
 542:	24 85       	ldd	r18, Z+12	; 0x0c
 544:	95 85       	ldd	r25, Z+13	; 0x0d
 546:	46 85       	ldd	r20, Z+14	; 0x0e
 548:	61 2f       	mov	r22, r17
 54a:	50 e1       	ldi	r21, 0x10	; 16
 54c:	85 9f       	mul	r24, r21
 54e:	60 0d       	add	r22, r0
 550:	11 24       	eor	r1, r1
 552:	86 2f       	mov	r24, r22
 554:	33 0f       	add	r19, r19
 556:	33 0f       	add	r19, r19
 558:	33 0f       	add	r19, r19
 55a:	83 0f       	add	r24, r19
 55c:	22 0f       	add	r18, r18
 55e:	22 0f       	add	r18, r18
 560:	82 0f       	add	r24, r18
 562:	99 0f       	add	r25, r25
 564:	89 0f       	add	r24, r25
 566:	84 0f       	add	r24, r20
 568:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 56c:	02 c0       	rjmp	.+4      	; 0x572 <TLE9201SG_Read+0x4e>
 56e:	10 93 44 09 	sts	0x0944, r17	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 572:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 576:	88 23       	and	r24, r24
 578:	e4 f7       	brge	.-8      	; 0x572 <TLE9201SG_Read+0x4e>
 57a:	0e 94 02 02 	call	0x404	; 0x404 <SPI0_Stop>
 57e:	cf 5f       	subi	r28, 0xFF	; 255
 580:	2c 2f       	mov	r18, r28
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	40 91 00 60 	lds	r20, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	84 1b       	sub	r24, r20
 58e:	91 09       	sbc	r25, r1
 590:	28 17       	cp	r18, r24
 592:	39 07       	cpc	r19, r25
 594:	74 f2       	brlt	.-100    	; 0x532 <TLE9201SG_Read+0xe>
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 00 60 	sts	0x6000, r24	; 0x806000 <__DATA_REGION_ORIGIN__>
 59c:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	08 95       	ret

000005a8 <TLE9201SG_Revision>:
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	80 e2       	ldi	r24, 0x20	; 32
 5ac:	0e 94 92 02 	call	0x524	; 0x524 <TLE9201SG_Read>
 5b0:	80 93 01 60 	sts	0x6001, r24	; 0x806001 <TLE9201SG>
 5b4:	08 95       	ret

000005b6 <TLE9201SG_Sort_Diagnosis>:
 5b6:	e1 e0       	ldi	r30, 0x01	; 1
 5b8:	f0 e6       	ldi	r31, 0x60	; 96
 5ba:	81 81       	ldd	r24, Z+1	; 0x01
 5bc:	98 2f       	mov	r25, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	99 27       	eor	r25, r25
 5c2:	99 1f       	adc	r25, r25
 5c4:	93 83       	std	Z+3, r25	; 0x03
 5c6:	86 fb       	bst	r24, 6
 5c8:	99 27       	eor	r25, r25
 5ca:	90 f9       	bld	r25, 0
 5cc:	94 83       	std	Z+4, r25	; 0x04
 5ce:	85 fb       	bst	r24, 5
 5d0:	99 27       	eor	r25, r25
 5d2:	90 f9       	bld	r25, 0
 5d4:	95 83       	std	Z+5, r25	; 0x05
 5d6:	84 fb       	bst	r24, 4
 5d8:	99 27       	eor	r25, r25
 5da:	90 f9       	bld	r25, 0
 5dc:	96 83       	std	Z+6, r25	; 0x06
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	87 83       	std	Z+7, r24	; 0x07
 5e2:	8f 30       	cpi	r24, 0x0F	; 15
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <TLE9201SG_Sort_Diagnosis+0x32>
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	80 93 09 60 	sts	0x6009, r24	; 0x806009 <TLE9201SG+0x8>
 5ec:	08 95       	ret

000005ee <TLE9201SG_Sort_Control_>:
 5ee:	e1 e0       	ldi	r30, 0x01	; 1
 5f0:	f0 e6       	ldi	r31, 0x60	; 96
 5f2:	82 81       	ldd	r24, Z+2	; 0x02
 5f4:	98 2f       	mov	r25, r24
 5f6:	92 95       	swap	r25
 5f8:	96 95       	lsr	r25
 5fa:	97 70       	andi	r25, 0x07	; 7
 5fc:	91 87       	std	Z+9, r25	; 0x09
 5fe:	84 fb       	bst	r24, 4
 600:	99 27       	eor	r25, r25
 602:	90 f9       	bld	r25, 0
 604:	92 87       	std	Z+10, r25	; 0x0a
 606:	83 fb       	bst	r24, 3
 608:	99 27       	eor	r25, r25
 60a:	90 f9       	bld	r25, 0
 60c:	93 87       	std	Z+11, r25	; 0x0b
 60e:	82 fb       	bst	r24, 2
 610:	99 27       	eor	r25, r25
 612:	90 f9       	bld	r25, 0
 614:	94 87       	std	Z+12, r25	; 0x0c
 616:	81 fb       	bst	r24, 1
 618:	99 27       	eor	r25, r25
 61a:	90 f9       	bld	r25, 0
 61c:	95 87       	std	Z+13, r25	; 0x0d
 61e:	81 70       	andi	r24, 0x01	; 1
 620:	86 87       	std	Z+14, r24	; 0x0e
 622:	08 95       	ret

00000624 <TLE9201SG_Write>:

/**
 * @brief Writes a command to the TLE9201SG and updates internal control or diagnostic data.
 * @param command The SPI command to execute.
 */
void TLE9201SG_Write(uint8_t command) {
 624:	cf 93       	push	r28
 626:	c8 2f       	mov	r28, r24
    SPI0_Start();
 628:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SPI0_Start>
    SPI0.DATA = command + (TLE9201SG.OLDIS << 4) + (TLE9201SG.SIN << 3) +
 62c:	e1 e0       	ldi	r30, 0x01	; 1
 62e:	f0 e6       	ldi	r31, 0x60	; 96
 630:	82 85       	ldd	r24, Z+10	; 0x0a
 632:	33 85       	ldd	r19, Z+11	; 0x0b
                (TLE9201SG.SEN << 2) + (TLE9201SG.SDIR << 1) + TLE9201SG.SPWM;
 634:	24 85       	ldd	r18, Z+12	; 0x0c
 636:	95 85       	ldd	r25, Z+13	; 0x0d
 638:	46 85       	ldd	r20, Z+14	; 0x0e
 * @brief Writes a command to the TLE9201SG and updates internal control or diagnostic data.
 * @param command The SPI command to execute.
 */
void TLE9201SG_Write(uint8_t command) {
    SPI0_Start();
    SPI0.DATA = command + (TLE9201SG.OLDIS << 4) + (TLE9201SG.SIN << 3) +
 63a:	6c 2f       	mov	r22, r28
 63c:	50 e1       	ldi	r21, 0x10	; 16
 63e:	85 9f       	mul	r24, r21
 640:	60 0d       	add	r22, r0
 642:	11 24       	eor	r1, r1
 644:	86 2f       	mov	r24, r22
 646:	33 0f       	add	r19, r19
 648:	33 0f       	add	r19, r19
 64a:	33 0f       	add	r19, r19
 64c:	83 0f       	add	r24, r19
 64e:	22 0f       	add	r18, r18
 650:	22 0f       	add	r18, r18
 652:	82 0f       	add	r24, r18
 654:	99 0f       	add	r25, r25
 656:	89 0f       	add	r24, r25
 658:	84 0f       	add	r24, r20
 65a:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
                (TLE9201SG.SEN << 2) + (TLE9201SG.SDIR << 1) + TLE9201SG.SPWM;
    while (!(SPI0.INTFLAGS & SPI_RXCIF_bm)); // Wait for data exchange
 65e:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 662:	88 23       	and	r24, r24
 664:	e4 f7       	brge	.-8      	; 0x65e <TLE9201SG_Write+0x3a>

    if (command == WR_CTRL) {
 666:	c0 3e       	cpi	r28, 0xE0	; 224
 668:	39 f4       	brne	.+14     	; 0x678 <TLE9201SG_Write+0x54>
        TLE9201SG.control = SPI0.DATA; // Update control data
 66a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 66e:	80 93 03 60 	sts	0x6003, r24	; 0x806003 <TLE9201SG+0x2>
        TLE9201SG_Sort_Control_();
 672:	0e 94 f7 02 	call	0x5ee	; 0x5ee <TLE9201SG_Sort_Control_>
 676:	06 c0       	rjmp	.+12     	; 0x684 <TLE9201SG_Write+0x60>
    } else {
        TLE9201SG.diag = SPI0.DATA; // Update diagnostic data
 678:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 67c:	80 93 02 60 	sts	0x6002, r24	; 0x806002 <TLE9201SG+0x1>
        TLE9201SG_Sort_Diagnosis();
 680:	0e 94 db 02 	call	0x5b6	; 0x5b6 <TLE9201SG_Sort_Diagnosis>
    }
    SPI0_Stop();
 684:	0e 94 02 02 	call	0x404	; 0x404 <SPI0_Stop>
}
 688:	cf 91       	pop	r28
 68a:	08 95       	ret

0000068c <TLE9201SG_Mode_init>:

/**
 * @brief Initializes the TLE9201SG control mode (SPI or PWM/DIR).
 * @param mode 0 for PWM/DIR, 1 for SPI.
 */
void TLE9201SG_Mode_init(uint8_t mode) {
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
    TLE9201SG.mode = mode;
 690:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <TLE9201SG+0x10>
    if (mode) { // SPI mode
 694:	88 23       	and	r24, r24
 696:	b9 f0       	breq	.+46     	; 0x6c6 <TLE9201SG_Mode_init+0x3a>
        SPI0_init();
 698:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI0_init>
        TLE9201SG.SIN = 1; // Enable SPI control
 69c:	c1 e0       	ldi	r28, 0x01	; 1
 69e:	d0 e6       	ldi	r29, 0x60	; 96
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	8b 87       	std	Y+11, r24	; 0x0b
        TLE9201SG.OLDIS = 0;
 6a4:	1a 86       	std	Y+10, r1	; 0x0a
        TLE9201SG.SEN = 0; // Disable outputs
 6a6:	1c 86       	std	Y+12, r1	; 0x0c
        TLE9201SG_Write(WR_CTRL);
 6a8:	80 ee       	ldi	r24, 0xE0	; 224
 6aa:	0e 94 12 03 	call	0x624	; 0x624 <TLE9201SG_Write>
        TLE9201SG_Revision();
 6ae:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TLE9201SG_Revision>
        TLE9201SG.control = TLE9201SG_Read(RD_CTRL, 0); // Read all data
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	80 e6       	ldi	r24, 0x60	; 96
 6b6:	0e 94 92 02 	call	0x524	; 0x524 <TLE9201SG_Read>
 6ba:	8a 83       	std	Y+2, r24	; 0x02
        TLE9201SG_Sort_Control_();
 6bc:	0e 94 f7 02 	call	0x5ee	; 0x5ee <TLE9201SG_Sort_Control_>
        SPI0_Stop();
 6c0:	0e 94 02 02 	call	0x404	; 0x404 <SPI0_Stop>
 6c4:	10 c0       	rjmp	.+32     	; 0x6e6 <TLE9201SG_Mode_init+0x5a>
    } else { // PWM/DIR mode
        PLL_init(); ///< Initialize the Phase-Locked Loop (PLL)
 6c6:	0e 94 a9 00 	call	0x152	; 0x152 <PLL_init>
        TCD0_init(); ///< Initialize Timer/Counter D (TCD)
 6ca:	0e 94 80 02 	call	0x500	; 0x500 <TCD0_init>
        PWM_init(TLE9201SG.pwm_freq, TLE9201SG.duty_cycle);
 6ce:	e1 e0       	ldi	r30, 0x01	; 1
 6d0:	f0 e6       	ldi	r31, 0x60	; 96
 6d2:	61 89       	ldd	r22, Z+17	; 0x11
 6d4:	72 89       	ldd	r23, Z+18	; 0x12
 6d6:	23 89       	ldd	r18, Z+19	; 0x13
 6d8:	34 89       	ldd	r19, Z+20	; 0x14
 6da:	45 89       	ldd	r20, Z+21	; 0x15
 6dc:	56 89       	ldd	r21, Z+22	; 0x16
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 1a 02 	call	0x434	; 0x434 <PWM_init>
    }
}
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <TLE9201SG_ON>:
 * 
 * This function enables the TLE9201SG outputs, either via SPI or by controlling 
 * the hardware pin directly, depending on the current control mode.
 */
void TLE9201SG_ON() {
    if (TLE9201SG.mode) { // SPI mode
 6ec:	80 91 11 60 	lds	r24, 0x6011	; 0x806011 <TLE9201SG+0x10>
 6f0:	88 23       	and	r24, r24
 6f2:	21 f0       	breq	.+8      	; 0x6fc <TLE9201SG_ON+0x10>
        TLE9201SG.SEN = 1; // Enable outputs
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	80 93 0d 60 	sts	0x600D, r24	; 0x80600d <TLE9201SG+0xc>
 6fa:	08 95       	ret
    } else { // PWM/DIR mode
        PORTD.OUTCLR = PIN6_bm; // Clear the pin to enable outputs
 6fc:	80 e4       	ldi	r24, 0x40	; 64
 6fe:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
 702:	08 95       	ret

00000704 <TLE9201SG_OFF>:
 * 
 * This function disables the TLE9201SG outputs, either via SPI or by controlling 
 * the hardware pin directly, depending on the current control mode.
 */
void TLE9201SG_OFF() {
    if (TLE9201SG.mode) { // SPI mode
 704:	80 91 11 60 	lds	r24, 0x6011	; 0x806011 <TLE9201SG+0x10>
 708:	88 23       	and	r24, r24
 70a:	29 f0       	breq	.+10     	; 0x716 <TLE9201SG_OFF+0x12>
        TLE9201SG.SEN = 0; // Disable outputs
 70c:	10 92 0d 60 	sts	0x600D, r1	; 0x80600d <TLE9201SG+0xc>
        SPI0_Stop();
 710:	0e 94 02 02 	call	0x404	; 0x404 <SPI0_Stop>
 714:	08 95       	ret
    } else { // PWM/DIR mode
        TCD0_OFF(); // Turn off the timer/counter
 716:	0e 94 10 02 	call	0x420	; 0x420 <TCD0_OFF>
        PORTD.OUTSET = PIN6_bm; // Set the pin to disable outputs
 71a:	80 e4       	ldi	r24, 0x40	; 64
 71c:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
 720:	08 95       	ret

00000722 <TLE9201SG_DIR>:
 * 
 * This function sets the direction of the motor driver outputs, either via SPI or 
 * by controlling the hardware pin directly, depending on the current control mode.
 */
void TLE9201SG_DIR(uint8_t direction) {
    if (TLE9201SG.mode) { // SPI mode
 722:	90 91 11 60 	lds	r25, 0x6011	; 0x806011 <TLE9201SG+0x10>
 726:	99 23       	and	r25, r25
 728:	19 f0       	breq	.+6      	; 0x730 <TLE9201SG_DIR+0xe>
        TLE9201SG.SDIR = direction;
 72a:	80 93 0e 60 	sts	0x600E, r24	; 0x80600e <TLE9201SG+0xd>
 72e:	08 95       	ret
    } else { // PWM/DIR mode
        PORTD.OUT = (direction << PIN5_bp); // Set the direction pin
 730:	82 95       	swap	r24
 732:	88 0f       	add	r24, r24
 734:	80 7e       	andi	r24, 0xE0	; 224
 736:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f0464>
 73a:	08 95       	ret

0000073c <TLE9201SG_START>:
 * @brief Starts the motor driver outputs.
 * 
 * This function starts the motor driver outputs, either by toggling the SPWM bit
 * via SPI or by enabling the timer/counter in PWM/DIR mode.
 */
void TLE9201SG_START() {
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
    if (TLE9201SG.mode) { // SPI mode
 740:	80 91 11 60 	lds	r24, 0x6011	; 0x806011 <TLE9201SG+0x10>
 744:	88 23       	and	r24, r24
 746:	a1 f0       	breq	.+40     	; 0x770 <TLE9201SG_START+0x34>
        TLE9201SG.SPWM = 1;
 748:	c1 e0       	ldi	r28, 0x01	; 1
 74a:	d0 e6       	ldi	r29, 0x60	; 96
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	8e 87       	std	Y+14, r24	; 0x0e
        TLE9201SG_Write(WR_CTRL_RD_DIA);
 750:	80 ec       	ldi	r24, 0xC0	; 192
 752:	0e 94 12 03 	call	0x624	; 0x624 <TLE9201SG_Write>
        _delay_loop_2(TLE9201SG.on); // Wait for the on-time duration
 756:	8f 89       	ldd	r24, Y+23	; 0x17
 758:	98 8d       	ldd	r25, Y+24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <TLE9201SG_START+0x1e>
        TLE9201SG.SPWM = 0;
 75e:	1e 86       	std	Y+14, r1	; 0x0e
        TLE9201SG_Write(WR_CTRL_RD_DIA);
 760:	80 ec       	ldi	r24, 0xC0	; 192
 762:	0e 94 12 03 	call	0x624	; 0x624 <TLE9201SG_Write>
        _delay_loop_2(TLE9201SG.off); // Wait for the off-time duration
 766:	89 8d       	ldd	r24, Y+25	; 0x19
 768:	9a 8d       	ldd	r25, Y+26	; 0x1a
 76a:	01 97       	sbiw	r24, 0x01	; 1
 76c:	f1 f7       	brne	.-4      	; 0x76a <TLE9201SG_START+0x2e>
 76e:	02 c0       	rjmp	.+4      	; 0x774 <TLE9201SG_START+0x38>
    } else { // PWM/DIR mode
        TCD0_ON(); // Enable the timer/counter
 770:	0e 94 06 02 	call	0x40c	; 0x40c <TCD0_ON>
    }
}
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	08 95       	ret

0000077a <TLE9201SG_STOP>:
 * 
 * This function stops the motor driver outputs, either via SPI or by disabling
 * the timer/counter in PWM/DIR mode.
 */
void TLE9201SG_STOP() {
    if (TLE9201SG.mode) { // SPI mode
 77a:	80 91 11 60 	lds	r24, 0x6011	; 0x806011 <TLE9201SG+0x10>
 77e:	88 23       	and	r24, r24
 780:	19 f0       	breq	.+6      	; 0x788 <TLE9201SG_STOP+0xe>
        SPI0_Stop();
 782:	0e 94 02 02 	call	0x404	; 0x404 <SPI0_Stop>
 786:	08 95       	ret
    } else { // PWM/DIR mode
        TCD0_OFF(); // Disable the timer/counter
 788:	0e 94 10 02 	call	0x420	; 0x420 <TCD0_OFF>
 78c:	08 95       	ret

0000078e <__divsf3>:
 78e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__divsf3x>
 792:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_round>
 796:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_pscB>
 79a:	58 f0       	brcs	.+22     	; 0x7b2 <__divsf3+0x24>
 79c:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscA>
 7a0:	40 f0       	brcs	.+16     	; 0x7b2 <__divsf3+0x24>
 7a2:	29 f4       	brne	.+10     	; 0x7ae <__divsf3+0x20>
 7a4:	5f 3f       	cpi	r21, 0xFF	; 255
 7a6:	29 f0       	breq	.+10     	; 0x7b2 <__divsf3+0x24>
 7a8:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 7ac:	51 11       	cpse	r21, r1
 7ae:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 7b2:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_nan>

000007b6 <__divsf3x>:
 7b6:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_split3>
 7ba:	68 f3       	brcs	.-38     	; 0x796 <__divsf3+0x8>

000007bc <__divsf3_pse>:
 7bc:	99 23       	and	r25, r25
 7be:	b1 f3       	breq	.-20     	; 0x7ac <__divsf3+0x1e>
 7c0:	55 23       	and	r21, r21
 7c2:	91 f3       	breq	.-28     	; 0x7a8 <__divsf3+0x1a>
 7c4:	95 1b       	sub	r25, r21
 7c6:	55 0b       	sbc	r21, r21
 7c8:	bb 27       	eor	r27, r27
 7ca:	aa 27       	eor	r26, r26
 7cc:	62 17       	cp	r22, r18
 7ce:	73 07       	cpc	r23, r19
 7d0:	84 07       	cpc	r24, r20
 7d2:	38 f0       	brcs	.+14     	; 0x7e2 <__divsf3_pse+0x26>
 7d4:	9f 5f       	subi	r25, 0xFF	; 255
 7d6:	5f 4f       	sbci	r21, 0xFF	; 255
 7d8:	22 0f       	add	r18, r18
 7da:	33 1f       	adc	r19, r19
 7dc:	44 1f       	adc	r20, r20
 7de:	aa 1f       	adc	r26, r26
 7e0:	a9 f3       	breq	.-22     	; 0x7cc <__divsf3_pse+0x10>
 7e2:	35 d0       	rcall	.+106    	; 0x84e <__divsf3_pse+0x92>
 7e4:	0e 2e       	mov	r0, r30
 7e6:	3a f0       	brmi	.+14     	; 0x7f6 <__divsf3_pse+0x3a>
 7e8:	e0 e8       	ldi	r30, 0x80	; 128
 7ea:	32 d0       	rcall	.+100    	; 0x850 <__divsf3_pse+0x94>
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	e6 95       	lsr	r30
 7f2:	00 1c       	adc	r0, r0
 7f4:	ca f7       	brpl	.-14     	; 0x7e8 <__divsf3_pse+0x2c>
 7f6:	2b d0       	rcall	.+86     	; 0x84e <__divsf3_pse+0x92>
 7f8:	fe 2f       	mov	r31, r30
 7fa:	29 d0       	rcall	.+82     	; 0x84e <__divsf3_pse+0x92>
 7fc:	66 0f       	add	r22, r22
 7fe:	77 1f       	adc	r23, r23
 800:	88 1f       	adc	r24, r24
 802:	bb 1f       	adc	r27, r27
 804:	26 17       	cp	r18, r22
 806:	37 07       	cpc	r19, r23
 808:	48 07       	cpc	r20, r24
 80a:	ab 07       	cpc	r26, r27
 80c:	b0 e8       	ldi	r27, 0x80	; 128
 80e:	09 f0       	breq	.+2      	; 0x812 <__divsf3_pse+0x56>
 810:	bb 0b       	sbc	r27, r27
 812:	80 2d       	mov	r24, r0
 814:	bf 01       	movw	r22, r30
 816:	ff 27       	eor	r31, r31
 818:	93 58       	subi	r25, 0x83	; 131
 81a:	5f 4f       	sbci	r21, 0xFF	; 255
 81c:	3a f0       	brmi	.+14     	; 0x82c <__divsf3_pse+0x70>
 81e:	9e 3f       	cpi	r25, 0xFE	; 254
 820:	51 05       	cpc	r21, r1
 822:	78 f0       	brcs	.+30     	; 0x842 <__divsf3_pse+0x86>
 824:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 828:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	e4 f3       	brlt	.-8      	; 0x828 <__divsf3_pse+0x6c>
 830:	98 3e       	cpi	r25, 0xE8	; 232
 832:	d4 f3       	brlt	.-12     	; 0x828 <__divsf3_pse+0x6c>
 834:	86 95       	lsr	r24
 836:	77 95       	ror	r23
 838:	67 95       	ror	r22
 83a:	b7 95       	ror	r27
 83c:	f7 95       	ror	r31
 83e:	9f 5f       	subi	r25, 0xFF	; 255
 840:	c9 f7       	brne	.-14     	; 0x834 <__divsf3_pse+0x78>
 842:	88 0f       	add	r24, r24
 844:	91 1d       	adc	r25, r1
 846:	96 95       	lsr	r25
 848:	87 95       	ror	r24
 84a:	97 f9       	bld	r25, 7
 84c:	08 95       	ret
 84e:	e1 e0       	ldi	r30, 0x01	; 1
 850:	66 0f       	add	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	bb 1f       	adc	r27, r27
 858:	62 17       	cp	r22, r18
 85a:	73 07       	cpc	r23, r19
 85c:	84 07       	cpc	r24, r20
 85e:	ba 07       	cpc	r27, r26
 860:	20 f0       	brcs	.+8      	; 0x86a <__divsf3_pse+0xae>
 862:	62 1b       	sub	r22, r18
 864:	73 0b       	sbc	r23, r19
 866:	84 0b       	sbc	r24, r20
 868:	ba 0b       	sbc	r27, r26
 86a:	ee 1f       	adc	r30, r30
 86c:	88 f7       	brcc	.-30     	; 0x850 <__divsf3_pse+0x94>
 86e:	e0 95       	com	r30
 870:	08 95       	ret

00000872 <__fixunssfsi>:
 872:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fp_splitA>
 876:	88 f0       	brcs	.+34     	; 0x89a <__fixunssfsi+0x28>
 878:	9f 57       	subi	r25, 0x7F	; 127
 87a:	98 f0       	brcs	.+38     	; 0x8a2 <__fixunssfsi+0x30>
 87c:	b9 2f       	mov	r27, r25
 87e:	99 27       	eor	r25, r25
 880:	b7 51       	subi	r27, 0x17	; 23
 882:	b0 f0       	brcs	.+44     	; 0x8b0 <__fixunssfsi+0x3e>
 884:	e1 f0       	breq	.+56     	; 0x8be <__fixunssfsi+0x4c>
 886:	66 0f       	add	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	1a f0       	brmi	.+6      	; 0x896 <__fixunssfsi+0x24>
 890:	ba 95       	dec	r27
 892:	c9 f7       	brne	.-14     	; 0x886 <__fixunssfsi+0x14>
 894:	14 c0       	rjmp	.+40     	; 0x8be <__fixunssfsi+0x4c>
 896:	b1 30       	cpi	r27, 0x01	; 1
 898:	91 f0       	breq	.+36     	; 0x8be <__fixunssfsi+0x4c>
 89a:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_zero>
 89e:	b1 e0       	ldi	r27, 0x01	; 1
 8a0:	08 95       	ret
 8a2:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_zero>
 8a6:	67 2f       	mov	r22, r23
 8a8:	78 2f       	mov	r23, r24
 8aa:	88 27       	eor	r24, r24
 8ac:	b8 5f       	subi	r27, 0xF8	; 248
 8ae:	39 f0       	breq	.+14     	; 0x8be <__fixunssfsi+0x4c>
 8b0:	b9 3f       	cpi	r27, 0xF9	; 249
 8b2:	cc f3       	brlt	.-14     	; 0x8a6 <__fixunssfsi+0x34>
 8b4:	86 95       	lsr	r24
 8b6:	77 95       	ror	r23
 8b8:	67 95       	ror	r22
 8ba:	b3 95       	inc	r27
 8bc:	d9 f7       	brne	.-10     	; 0x8b4 <__fixunssfsi+0x42>
 8be:	3e f4       	brtc	.+14     	; 0x8ce <__fixunssfsi+0x5c>
 8c0:	90 95       	com	r25
 8c2:	80 95       	com	r24
 8c4:	70 95       	com	r23
 8c6:	61 95       	neg	r22
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	8f 4f       	sbci	r24, 0xFF	; 255
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	08 95       	ret

000008d0 <__floatunsisf>:
 8d0:	e8 94       	clt
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__floatsisf+0x12>

000008d4 <__floatsisf>:
 8d4:	97 fb       	bst	r25, 7
 8d6:	3e f4       	brtc	.+14     	; 0x8e6 <__floatsisf+0x12>
 8d8:	90 95       	com	r25
 8da:	80 95       	com	r24
 8dc:	70 95       	com	r23
 8de:	61 95       	neg	r22
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
 8e2:	8f 4f       	sbci	r24, 0xFF	; 255
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	99 23       	and	r25, r25
 8e8:	a9 f0       	breq	.+42     	; 0x914 <__floatsisf+0x40>
 8ea:	f9 2f       	mov	r31, r25
 8ec:	96 e9       	ldi	r25, 0x96	; 150
 8ee:	bb 27       	eor	r27, r27
 8f0:	93 95       	inc	r25
 8f2:	f6 95       	lsr	r31
 8f4:	87 95       	ror	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b7 95       	ror	r27
 8fc:	f1 11       	cpse	r31, r1
 8fe:	f8 cf       	rjmp	.-16     	; 0x8f0 <__floatsisf+0x1c>
 900:	fa f4       	brpl	.+62     	; 0x940 <__floatsisf+0x6c>
 902:	bb 0f       	add	r27, r27
 904:	11 f4       	brne	.+4      	; 0x90a <__floatsisf+0x36>
 906:	60 ff       	sbrs	r22, 0
 908:	1b c0       	rjmp	.+54     	; 0x940 <__floatsisf+0x6c>
 90a:	6f 5f       	subi	r22, 0xFF	; 255
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	8f 4f       	sbci	r24, 0xFF	; 255
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	16 c0       	rjmp	.+44     	; 0x940 <__floatsisf+0x6c>
 914:	88 23       	and	r24, r24
 916:	11 f0       	breq	.+4      	; 0x91c <__floatsisf+0x48>
 918:	96 e9       	ldi	r25, 0x96	; 150
 91a:	11 c0       	rjmp	.+34     	; 0x93e <__floatsisf+0x6a>
 91c:	77 23       	and	r23, r23
 91e:	21 f0       	breq	.+8      	; 0x928 <__floatsisf+0x54>
 920:	9e e8       	ldi	r25, 0x8E	; 142
 922:	87 2f       	mov	r24, r23
 924:	76 2f       	mov	r23, r22
 926:	05 c0       	rjmp	.+10     	; 0x932 <__floatsisf+0x5e>
 928:	66 23       	and	r22, r22
 92a:	71 f0       	breq	.+28     	; 0x948 <__floatsisf+0x74>
 92c:	96 e8       	ldi	r25, 0x86	; 134
 92e:	86 2f       	mov	r24, r22
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	2a f0       	brmi	.+10     	; 0x940 <__floatsisf+0x6c>
 936:	9a 95       	dec	r25
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	da f7       	brpl	.-10     	; 0x936 <__floatsisf+0x62>
 940:	88 0f       	add	r24, r24
 942:	96 95       	lsr	r25
 944:	87 95       	ror	r24
 946:	97 f9       	bld	r25, 7
 948:	08 95       	ret

0000094a <__fp_inf>:
 94a:	97 f9       	bld	r25, 7
 94c:	9f 67       	ori	r25, 0x7F	; 127
 94e:	80 e8       	ldi	r24, 0x80	; 128
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	08 95       	ret

00000956 <__fp_nan>:
 956:	9f ef       	ldi	r25, 0xFF	; 255
 958:	80 ec       	ldi	r24, 0xC0	; 192
 95a:	08 95       	ret

0000095c <__fp_pscA>:
 95c:	00 24       	eor	r0, r0
 95e:	0a 94       	dec	r0
 960:	16 16       	cp	r1, r22
 962:	17 06       	cpc	r1, r23
 964:	18 06       	cpc	r1, r24
 966:	09 06       	cpc	r0, r25
 968:	08 95       	ret

0000096a <__fp_pscB>:
 96a:	00 24       	eor	r0, r0
 96c:	0a 94       	dec	r0
 96e:	12 16       	cp	r1, r18
 970:	13 06       	cpc	r1, r19
 972:	14 06       	cpc	r1, r20
 974:	05 06       	cpc	r0, r21
 976:	08 95       	ret

00000978 <__fp_round>:
 978:	09 2e       	mov	r0, r25
 97a:	03 94       	inc	r0
 97c:	00 0c       	add	r0, r0
 97e:	11 f4       	brne	.+4      	; 0x984 <__fp_round+0xc>
 980:	88 23       	and	r24, r24
 982:	52 f0       	brmi	.+20     	; 0x998 <__fp_round+0x20>
 984:	bb 0f       	add	r27, r27
 986:	40 f4       	brcc	.+16     	; 0x998 <__fp_round+0x20>
 988:	bf 2b       	or	r27, r31
 98a:	11 f4       	brne	.+4      	; 0x990 <__fp_round+0x18>
 98c:	60 ff       	sbrs	r22, 0
 98e:	04 c0       	rjmp	.+8      	; 0x998 <__fp_round+0x20>
 990:	6f 5f       	subi	r22, 0xFF	; 255
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	08 95       	ret

0000099a <__fp_split3>:
 99a:	57 fd       	sbrc	r21, 7
 99c:	90 58       	subi	r25, 0x80	; 128
 99e:	44 0f       	add	r20, r20
 9a0:	55 1f       	adc	r21, r21
 9a2:	59 f0       	breq	.+22     	; 0x9ba <__fp_splitA+0x10>
 9a4:	5f 3f       	cpi	r21, 0xFF	; 255
 9a6:	71 f0       	breq	.+28     	; 0x9c4 <__fp_splitA+0x1a>
 9a8:	47 95       	ror	r20

000009aa <__fp_splitA>:
 9aa:	88 0f       	add	r24, r24
 9ac:	97 fb       	bst	r25, 7
 9ae:	99 1f       	adc	r25, r25
 9b0:	61 f0       	breq	.+24     	; 0x9ca <__fp_splitA+0x20>
 9b2:	9f 3f       	cpi	r25, 0xFF	; 255
 9b4:	79 f0       	breq	.+30     	; 0x9d4 <__fp_splitA+0x2a>
 9b6:	87 95       	ror	r24
 9b8:	08 95       	ret
 9ba:	12 16       	cp	r1, r18
 9bc:	13 06       	cpc	r1, r19
 9be:	14 06       	cpc	r1, r20
 9c0:	55 1f       	adc	r21, r21
 9c2:	f2 cf       	rjmp	.-28     	; 0x9a8 <__fp_split3+0xe>
 9c4:	46 95       	lsr	r20
 9c6:	f1 df       	rcall	.-30     	; 0x9aa <__fp_splitA>
 9c8:	08 c0       	rjmp	.+16     	; 0x9da <__fp_splitA+0x30>
 9ca:	16 16       	cp	r1, r22
 9cc:	17 06       	cpc	r1, r23
 9ce:	18 06       	cpc	r1, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	f1 cf       	rjmp	.-30     	; 0x9b6 <__fp_splitA+0xc>
 9d4:	86 95       	lsr	r24
 9d6:	71 05       	cpc	r23, r1
 9d8:	61 05       	cpc	r22, r1
 9da:	08 94       	sec
 9dc:	08 95       	ret

000009de <__fp_zero>:
 9de:	e8 94       	clt

000009e0 <__fp_szero>:
 9e0:	bb 27       	eor	r27, r27
 9e2:	66 27       	eor	r22, r22
 9e4:	77 27       	eor	r23, r23
 9e6:	cb 01       	movw	r24, r22
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <__mulsf3>:
 9ec:	0e 94 09 05 	call	0xa12	; 0xa12 <__mulsf3x>
 9f0:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_round>
 9f4:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscA>
 9f8:	38 f0       	brcs	.+14     	; 0xa08 <__mulsf3+0x1c>
 9fa:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_pscB>
 9fe:	20 f0       	brcs	.+8      	; 0xa08 <__mulsf3+0x1c>
 a00:	95 23       	and	r25, r21
 a02:	11 f0       	breq	.+4      	; 0xa08 <__mulsf3+0x1c>
 a04:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 a08:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_nan>
 a0c:	11 24       	eor	r1, r1
 a0e:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>

00000a12 <__mulsf3x>:
 a12:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_split3>
 a16:	70 f3       	brcs	.-36     	; 0x9f4 <__mulsf3+0x8>

00000a18 <__mulsf3_pse>:
 a18:	95 9f       	mul	r25, r21
 a1a:	c1 f3       	breq	.-16     	; 0xa0c <__mulsf3+0x20>
 a1c:	95 0f       	add	r25, r21
 a1e:	50 e0       	ldi	r21, 0x00	; 0
 a20:	55 1f       	adc	r21, r21
 a22:	62 9f       	mul	r22, r18
 a24:	f0 01       	movw	r30, r0
 a26:	72 9f       	mul	r23, r18
 a28:	bb 27       	eor	r27, r27
 a2a:	f0 0d       	add	r31, r0
 a2c:	b1 1d       	adc	r27, r1
 a2e:	63 9f       	mul	r22, r19
 a30:	aa 27       	eor	r26, r26
 a32:	f0 0d       	add	r31, r0
 a34:	b1 1d       	adc	r27, r1
 a36:	aa 1f       	adc	r26, r26
 a38:	64 9f       	mul	r22, r20
 a3a:	66 27       	eor	r22, r22
 a3c:	b0 0d       	add	r27, r0
 a3e:	a1 1d       	adc	r26, r1
 a40:	66 1f       	adc	r22, r22
 a42:	82 9f       	mul	r24, r18
 a44:	22 27       	eor	r18, r18
 a46:	b0 0d       	add	r27, r0
 a48:	a1 1d       	adc	r26, r1
 a4a:	62 1f       	adc	r22, r18
 a4c:	73 9f       	mul	r23, r19
 a4e:	b0 0d       	add	r27, r0
 a50:	a1 1d       	adc	r26, r1
 a52:	62 1f       	adc	r22, r18
 a54:	83 9f       	mul	r24, r19
 a56:	a0 0d       	add	r26, r0
 a58:	61 1d       	adc	r22, r1
 a5a:	22 1f       	adc	r18, r18
 a5c:	74 9f       	mul	r23, r20
 a5e:	33 27       	eor	r19, r19
 a60:	a0 0d       	add	r26, r0
 a62:	61 1d       	adc	r22, r1
 a64:	23 1f       	adc	r18, r19
 a66:	84 9f       	mul	r24, r20
 a68:	60 0d       	add	r22, r0
 a6a:	21 1d       	adc	r18, r1
 a6c:	82 2f       	mov	r24, r18
 a6e:	76 2f       	mov	r23, r22
 a70:	6a 2f       	mov	r22, r26
 a72:	11 24       	eor	r1, r1
 a74:	9f 57       	subi	r25, 0x7F	; 127
 a76:	50 40       	sbci	r21, 0x00	; 0
 a78:	9a f0       	brmi	.+38     	; 0xaa0 <__mulsf3_pse+0x88>
 a7a:	f1 f0       	breq	.+60     	; 0xab8 <__mulsf3_pse+0xa0>
 a7c:	88 23       	and	r24, r24
 a7e:	4a f0       	brmi	.+18     	; 0xa92 <__mulsf3_pse+0x7a>
 a80:	ee 0f       	add	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	bb 1f       	adc	r27, r27
 a86:	66 1f       	adc	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	91 50       	subi	r25, 0x01	; 1
 a8e:	50 40       	sbci	r21, 0x00	; 0
 a90:	a9 f7       	brne	.-22     	; 0xa7c <__mulsf3_pse+0x64>
 a92:	9e 3f       	cpi	r25, 0xFE	; 254
 a94:	51 05       	cpc	r21, r1
 a96:	80 f0       	brcs	.+32     	; 0xab8 <__mulsf3_pse+0xa0>
 a98:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 a9c:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 aa0:	5f 3f       	cpi	r21, 0xFF	; 255
 aa2:	e4 f3       	brlt	.-8      	; 0xa9c <__mulsf3_pse+0x84>
 aa4:	98 3e       	cpi	r25, 0xE8	; 232
 aa6:	d4 f3       	brlt	.-12     	; 0xa9c <__mulsf3_pse+0x84>
 aa8:	86 95       	lsr	r24
 aaa:	77 95       	ror	r23
 aac:	67 95       	ror	r22
 aae:	b7 95       	ror	r27
 ab0:	f7 95       	ror	r31
 ab2:	e7 95       	ror	r30
 ab4:	9f 5f       	subi	r25, 0xFF	; 255
 ab6:	c1 f7       	brne	.-16     	; 0xaa8 <__mulsf3_pse+0x90>
 ab8:	fe 2b       	or	r31, r30
 aba:	88 0f       	add	r24, r24
 abc:	91 1d       	adc	r25, r1
 abe:	96 95       	lsr	r25
 ac0:	87 95       	ror	r24
 ac2:	97 f9       	bld	r25, 7
 ac4:	08 95       	ret

00000ac6 <__udivmodsi4>:
 ac6:	a1 e2       	ldi	r26, 0x21	; 33
 ac8:	1a 2e       	mov	r1, r26
 aca:	aa 1b       	sub	r26, r26
 acc:	bb 1b       	sub	r27, r27
 ace:	fd 01       	movw	r30, r26
 ad0:	0d c0       	rjmp	.+26     	; 0xaec <__udivmodsi4_ep>

00000ad2 <__udivmodsi4_loop>:
 ad2:	aa 1f       	adc	r26, r26
 ad4:	bb 1f       	adc	r27, r27
 ad6:	ee 1f       	adc	r30, r30
 ad8:	ff 1f       	adc	r31, r31
 ada:	a2 17       	cp	r26, r18
 adc:	b3 07       	cpc	r27, r19
 ade:	e4 07       	cpc	r30, r20
 ae0:	f5 07       	cpc	r31, r21
 ae2:	20 f0       	brcs	.+8      	; 0xaec <__udivmodsi4_ep>
 ae4:	a2 1b       	sub	r26, r18
 ae6:	b3 0b       	sbc	r27, r19
 ae8:	e4 0b       	sbc	r30, r20
 aea:	f5 0b       	sbc	r31, r21

00000aec <__udivmodsi4_ep>:
 aec:	66 1f       	adc	r22, r22
 aee:	77 1f       	adc	r23, r23
 af0:	88 1f       	adc	r24, r24
 af2:	99 1f       	adc	r25, r25
 af4:	1a 94       	dec	r1
 af6:	69 f7       	brne	.-38     	; 0xad2 <__udivmodsi4_loop>
 af8:	60 95       	com	r22
 afa:	70 95       	com	r23
 afc:	80 95       	com	r24
 afe:	90 95       	com	r25
 b00:	9b 01       	movw	r18, r22
 b02:	ac 01       	movw	r20, r24
 b04:	bd 01       	movw	r22, r26
 b06:	cf 01       	movw	r24, r30
 b08:	08 95       	ret

00000b0a <__tablejump2__>:
 b0a:	ee 0f       	add	r30, r30
 b0c:	ff 1f       	adc	r31, r31
 b0e:	05 90       	lpm	r0, Z+
 b10:	f4 91       	lpm	r31, Z
 b12:	e0 2d       	mov	r30, r0
 b14:	09 94       	ijmp

00000b16 <__muluhisi3>:
 b16:	0e 94 df 05 	call	0xbbe	; 0xbbe <__umulhisi3>
 b1a:	a5 9f       	mul	r26, r21
 b1c:	90 0d       	add	r25, r0
 b1e:	b4 9f       	mul	r27, r20
 b20:	90 0d       	add	r25, r0
 b22:	a4 9f       	mul	r26, r20
 b24:	80 0d       	add	r24, r0
 b26:	91 1d       	adc	r25, r1
 b28:	11 24       	eor	r1, r1
 b2a:	08 95       	ret

00000b2c <__umulsidi3>:
 b2c:	e8 94       	clt

00000b2e <__umulsidi3_helper>:
 b2e:	df 93       	push	r29
 b30:	cf 93       	push	r28
 b32:	fc 01       	movw	r30, r24
 b34:	db 01       	movw	r26, r22
 b36:	0e 94 df 05 	call	0xbbe	; 0xbbe <__umulhisi3>
 b3a:	7f 93       	push	r23
 b3c:	6f 93       	push	r22
 b3e:	e9 01       	movw	r28, r18
 b40:	9a 01       	movw	r18, r20
 b42:	ac 01       	movw	r20, r24
 b44:	bf 93       	push	r27
 b46:	af 93       	push	r26
 b48:	3f 93       	push	r19
 b4a:	2f 93       	push	r18
 b4c:	df 01       	movw	r26, r30
 b4e:	0e 94 df 05 	call	0xbbe	; 0xbbe <__umulhisi3>
 b52:	26 f4       	brtc	.+8      	; 0xb5c <__umulsidi3_helper+0x2e>
 b54:	6c 1b       	sub	r22, r28
 b56:	7d 0b       	sbc	r23, r29
 b58:	82 0b       	sbc	r24, r18
 b5a:	93 0b       	sbc	r25, r19
 b5c:	9e 01       	movw	r18, r28
 b5e:	eb 01       	movw	r28, r22
 b60:	fc 01       	movw	r30, r24
 b62:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__muldi3_6>
 b66:	af 91       	pop	r26
 b68:	bf 91       	pop	r27
 b6a:	2f 91       	pop	r18
 b6c:	3f 91       	pop	r19
 b6e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__muldi3_6>
 b72:	be 01       	movw	r22, r28
 b74:	cf 01       	movw	r24, r30
 b76:	f9 01       	movw	r30, r18
 b78:	2f 91       	pop	r18
 b7a:	3f 91       	pop	r19
 b7c:	cf 91       	pop	r28
 b7e:	df 91       	pop	r29
 b80:	08 95       	ret

00000b82 <__ashrdi3>:
 b82:	97 fb       	bst	r25, 7
 b84:	10 f8       	bld	r1, 0

00000b86 <__lshrdi3>:
 b86:	16 94       	lsr	r1
 b88:	00 08       	sbc	r0, r0
 b8a:	0f 93       	push	r16
 b8c:	08 30       	cpi	r16, 0x08	; 8
 b8e:	98 f0       	brcs	.+38     	; 0xbb6 <__lshrdi3+0x30>
 b90:	08 50       	subi	r16, 0x08	; 8
 b92:	23 2f       	mov	r18, r19
 b94:	34 2f       	mov	r19, r20
 b96:	45 2f       	mov	r20, r21
 b98:	56 2f       	mov	r21, r22
 b9a:	67 2f       	mov	r22, r23
 b9c:	78 2f       	mov	r23, r24
 b9e:	89 2f       	mov	r24, r25
 ba0:	90 2d       	mov	r25, r0
 ba2:	f4 cf       	rjmp	.-24     	; 0xb8c <__lshrdi3+0x6>
 ba4:	05 94       	asr	r0
 ba6:	97 95       	ror	r25
 ba8:	87 95       	ror	r24
 baa:	77 95       	ror	r23
 bac:	67 95       	ror	r22
 bae:	57 95       	ror	r21
 bb0:	47 95       	ror	r20
 bb2:	37 95       	ror	r19
 bb4:	27 95       	ror	r18
 bb6:	0a 95       	dec	r16
 bb8:	aa f7       	brpl	.-22     	; 0xba4 <__lshrdi3+0x1e>
 bba:	0f 91       	pop	r16
 bbc:	08 95       	ret

00000bbe <__umulhisi3>:
 bbe:	a2 9f       	mul	r26, r18
 bc0:	b0 01       	movw	r22, r0
 bc2:	b3 9f       	mul	r27, r19
 bc4:	c0 01       	movw	r24, r0
 bc6:	a3 9f       	mul	r26, r19
 bc8:	70 0d       	add	r23, r0
 bca:	81 1d       	adc	r24, r1
 bcc:	11 24       	eor	r1, r1
 bce:	91 1d       	adc	r25, r1
 bd0:	b2 9f       	mul	r27, r18
 bd2:	70 0d       	add	r23, r0
 bd4:	81 1d       	adc	r24, r1
 bd6:	11 24       	eor	r1, r1
 bd8:	91 1d       	adc	r25, r1
 bda:	08 95       	ret

00000bdc <__muldi3_6>:
 bdc:	0e 94 df 05 	call	0xbbe	; 0xbbe <__umulhisi3>
 be0:	46 0f       	add	r20, r22
 be2:	57 1f       	adc	r21, r23
 be4:	c8 1f       	adc	r28, r24
 be6:	d9 1f       	adc	r29, r25
 be8:	08 f4       	brcc	.+2      	; 0xbec <__muldi3_6+0x10>
 bea:	31 96       	adiw	r30, 0x01	; 1
 bec:	08 95       	ret

00000bee <ccp_write_io>:
 bee:	dc 01       	movw	r26, r24
 bf0:	28 ed       	ldi	r18, 0xD8	; 216
 bf2:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
 bf6:	6c 93       	st	X, r22
 bf8:	08 95       	ret

00000bfa <_exit>:
 bfa:	f8 94       	cli

00000bfc <__stop_program>:
 bfc:	ff cf       	rjmp	.-2      	; 0xbfc <__stop_program>
