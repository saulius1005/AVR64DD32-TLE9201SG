
AVR64DD32-TLE9201SG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00806000  00806000  00000de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00806000  00806000  00000de0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004613  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000285c  00000000  00000000  000055e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f79  00000000  00000000  00007e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00008db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c61  00000000  00000000  000090c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d8  00000000  00000000  0000ad25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000b3fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  10:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  14:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  18:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  20:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  28:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  30:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  38:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  44:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  4c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  50:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  54:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  58:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  5c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  60:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  68:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  6c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  70:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  7c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  80:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  84:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  8c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  90:	f3 00       	.word	0x00f3	; ????
  92:	cb 00       	.word	0x00cb	; ????
  94:	cb 00       	.word	0x00cb	; ????
  96:	cb 00       	.word	0x00cb	; ????
  98:	d0 00       	.word	0x00d0	; ????
  9a:	cb 00       	.word	0x00cb	; ????
  9c:	cb 00       	.word	0x00cb	; ????
  9e:	cb 00       	.word	0x00cb	; ????
  a0:	d5 00       	.word	0x00d5	; ????
  a2:	cb 00       	.word	0x00cb	; ????
  a4:	cb 00       	.word	0x00cb	; ????
  a6:	cb 00       	.word	0x00cb	; ????
  a8:	cb 00       	.word	0x00cb	; ????
  aa:	cb 00       	.word	0x00cb	; ????
  ac:	cb 00       	.word	0x00cb	; ????
  ae:	cb 00       	.word	0x00cb	; ????
  b0:	cb 00       	.word	0x00cb	; ????
  b2:	cb 00       	.word	0x00cb	; ????
  b4:	cb 00       	.word	0x00cb	; ????
  b6:	cb 00       	.word	0x00cb	; ????
  b8:	da 00       	.word	0x00da	; ????
  ba:	cb 00       	.word	0x00cb	; ????
  bc:	cb 00       	.word	0x00cb	; ????
  be:	cb 00       	.word	0x00cb	; ????
  c0:	df 00       	.word	0x00df	; ????
  c2:	cb 00       	.word	0x00cb	; ????
  c4:	cb 00       	.word	0x00cb	; ????
  c6:	cb 00       	.word	0x00cb	; ????
  c8:	e4 00       	.word	0x00e4	; ????
  ca:	cb 00       	.word	0x00cb	; ????
  cc:	cb 00       	.word	0x00cb	; ????
  ce:	cb 00       	.word	0x00cb	; ????
  d0:	e9 00       	.word	0x00e9	; ????
  d2:	cb 00       	.word	0x00cb	; ????
  d4:	cb 00       	.word	0x00cb	; ????
  d6:	cb 00       	.word	0x00cb	; ????
  d8:	ee 00       	.word	0x00ee	; ????
  da:	10 01       	movw	r2, r0
  dc:	7d 01       	movw	r14, r26
  de:	15 01       	movw	r2, r10
  e0:	7d 01       	movw	r14, r26
  e2:	36 01       	movw	r6, r12
  e4:	7d 01       	movw	r14, r26
  e6:	51 01       	movw	r10, r2
  e8:	7d 01       	movw	r14, r26
  ea:	63 01       	movw	r12, r6
  ec:	7d 01       	movw	r14, r26
  ee:	75 01       	movw	r14, r10
  f0:	7d 01       	movw	r14, r26
  f2:	7d 01       	movw	r14, r26
  f4:	7d 01       	movw	r14, r26
  f6:	7d 01       	movw	r14, r26
  f8:	7d 01       	movw	r14, r26
  fa:	1e 01       	movw	r2, r28
  fc:	7d 01       	movw	r14, r26
  fe:	3f 01       	movw	r6, r30
 100:	7d 01       	movw	r14, r26
 102:	48 01       	movw	r8, r16
 104:	7d 01       	movw	r14, r26
 106:	5a 01       	movw	r10, r20
 108:	7d 01       	movw	r14, r26
 10a:	6c 01       	movw	r12, r24

0000010c <__ctors_end>:
 10c:	11 24       	eor	r1, r1
 10e:	1f be       	out	0x3f, r1	; 63
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df e7       	ldi	r29, 0x7F	; 127
 116:	de bf       	out	0x3e, r29	; 62

00000118 <__do_clear_bss>:
 118:	20 e6       	ldi	r18, 0x60	; 96
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b0 e6       	ldi	r27, 0x60	; 96
 11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
 120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
 122:	a8 32       	cpi	r26, 0x28	; 40
 124:	b2 07       	cpc	r27, r18
 126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
 128:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
 12c:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <_exit>

00000130 <__bad_interrupt>:
 130:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000134 <CLOCK_INHF_clock_init>:
 * @details Configures the internal oscillator with a frequency of 24 MHz. 
 *          Optionally enables clock output on pin PA7. A prescaler can be configured if needed.
 */
void CLOCK_INHF_clock_init() {
    /* Enable internal oscillator with a frequency of 24 MHz */
    ccp_write_io((uint8_t *) &CLKCTRL.OSCHFCTRLA, CLKCTRL_FRQSEL_24M_gc); 
 134:	64 e2       	ldi	r22, 0x24	; 36
 136:	88 e6       	ldi	r24, 0x68	; 104
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <ccp_write_io>

    /* Set main clock prescaler (uncomment if required) */
    // ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);

    /* Set main clock to use the internal oscillator as the source */
    ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSCHF_gc /*| CLKCTRL_CLKOUT_bm*/); 
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 ae 06 	call	0xd5c	; 0xd5c <ccp_write_io>
    // Comment | CLKCTRL_CLKOUT_bm if clock output on PA7 is not required

    /* Wait for oscillator change to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
 148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 14c:	80 fd       	sbrc	r24, 0
 14e:	fc cf       	rjmp	.-8      	; 0x148 <CLOCK_INHF_clock_init+0x14>
}
 150:	08 95       	ret

00000152 <PLL_init>:
 * 
 * @note Ensure the input frequency does not exceed the PLL's maximum limit.
 */
void PLL_init() {
    /* Configure PLL with a multiplication factor of 2 */
    ccp_write_io((uint8_t *) &CLKCTRL.PLLCTRLA, CLKCTRL_MULFAC_2x_gc); 
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 ae 06 	call	0xd5c	; 0xd5c <ccp_write_io>

    /* Wait for PLL configuration to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm) {};
 15c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 160:	85 fd       	sbrc	r24, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <PLL_init+0xa>
}
 164:	08 95       	ret

00000166 <CLOCK_read>:


uint32_t CLOCK_read(){
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
 17a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
 17e:	e8 2f       	mov	r30, r24
 180:	ec 73       	andi	r30, 0x3C	; 60
 182:	8e 2f       	mov	r24, r30
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	85 32       	cpi	r24, 0x25	; 37
 188:	91 05       	cpc	r25, r1
 18a:	28 f4       	brcc	.+10     	; 0x196 <CLOCK_read+0x30>
 18c:	fc 01       	movw	r30, r24
 18e:	e8 5b       	subi	r30, 0xB8	; 184
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__tablejump2__>
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm) {};
}


uint32_t CLOCK_read(){
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	79 e0       	ldi	r23, 0x09	; 9
 19a:	8d e3       	ldi	r24, 0x3D	; 61
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	27 c0       	rjmp	.+78     	; 0x1ee <CLOCK_read+0x88>

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
	    case CLKCTRL_FRQSEL_1M_gc: base_freq = 1000000; break;
	    case CLKCTRL_FRQSEL_2M_gc: base_freq = 2000000; break;
 1a0:	60 e8       	ldi	r22, 0x80	; 128
 1a2:	74 e8       	ldi	r23, 0x84	; 132
 1a4:	8e e1       	ldi	r24, 0x1E	; 30
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	22 c0       	rjmp	.+68     	; 0x1ee <CLOCK_read+0x88>
	    case CLKCTRL_FRQSEL_3M_gc: base_freq = 3000000; break;
 1aa:	60 ec       	ldi	r22, 0xC0	; 192
 1ac:	76 ec       	ldi	r23, 0xC6	; 198
 1ae:	8d e2       	ldi	r24, 0x2D	; 45
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	1d c0       	rjmp	.+58     	; 0x1ee <CLOCK_read+0x88>
	    case CLKCTRL_FRQSEL_8M_gc: base_freq = 8000000; break;
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	72 e1       	ldi	r23, 0x12	; 18
 1b8:	8a e7       	ldi	r24, 0x7A	; 122
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	18 c0       	rjmp	.+48     	; 0x1ee <CLOCK_read+0x88>
	    case CLKCTRL_FRQSEL_12M_gc: base_freq = 12000000; break;
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	7b e1       	ldi	r23, 0x1B	; 27
 1c2:	87 eb       	ldi	r24, 0xB7	; 183
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <CLOCK_read+0x88>
	    case CLKCTRL_FRQSEL_16M_gc: base_freq = 16000000; break;
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	74 e2       	ldi	r23, 0x24	; 36
 1cc:	84 ef       	ldi	r24, 0xF4	; 244
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e c0       	rjmp	.+28     	; 0x1ee <CLOCK_read+0x88>
	    case CLKCTRL_FRQSEL_20M_gc: base_freq = 20000000; break;
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	7d e2       	ldi	r23, 0x2D	; 45
 1d6:	81 e3       	ldi	r24, 0x31	; 49
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <CLOCK_read+0x88>
	    case CLKCTRL_FRQSEL_24M_gc: base_freq = 24000000; break;
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	76 e3       	ldi	r23, 0x36	; 54
 1e0:	8e e6       	ldi	r24, 0x6E	; 110
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <CLOCK_read+0x88>
uint32_t CLOCK_read(){
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
	    case CLKCTRL_FRQSEL_1M_gc: base_freq = 1000000; break;
 1e6:	60 e4       	ldi	r22, 0x40	; 64
 1e8:	72 e4       	ldi	r23, 0x42	; 66
 1ea:	8f e0       	ldi	r24, 0x0F	; 15
 1ec:	90 e0       	ldi	r25, 0x00	; 0
	    case CLKCTRL_FRQSEL_20M_gc: base_freq = 20000000; break;
	    case CLKCTRL_FRQSEL_24M_gc: base_freq = 24000000; break;
    }

    // Adjust base frequency for peripheral clock prescaler
    if ((TCD0.CTRLA & TCD_CLKSEL_gm) == TCD_CLKSEL_CLKPER_gc) {
 1ee:	20 91 80 0b 	lds	r18, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 1f2:	20 76       	andi	r18, 0x60	; 96
 1f4:	20 36       	cpi	r18, 0x60	; 96
 1f6:	09 f0       	breq	.+2      	; 0x1fa <CLOCK_read+0x94>
 1f8:	80 c0       	rjmp	.+256    	; 0x2fa <CLOCK_read+0x194>
	    if (CLKCTRL.MCLKCTRLB & CLKCTRL_PEN_bm) {
 1fa:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
 1fe:	20 ff       	sbrs	r18, 0
 200:	7c c0       	rjmp	.+248    	; 0x2fa <CLOCK_read+0x194>
		    switch (CLKCTRL.MCLKCTRLB & CLKCTRL_PDIV_gm) {
 202:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
 206:	e2 2f       	mov	r30, r18
 208:	ee 71       	andi	r30, 0x1E	; 30
 20a:	0e 2f       	mov	r16, r30
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	09 31       	cpi	r16, 0x19	; 25
 210:	11 05       	cpc	r17, r1
 212:	08 f0       	brcs	.+2      	; 0x216 <CLOCK_read+0xb0>
 214:	72 c0       	rjmp	.+228    	; 0x2fa <CLOCK_read+0x194>
 216:	f8 01       	movw	r30, r16
 218:	e3 59       	subi	r30, 0x93	; 147
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__tablejump2__>
			    case CLKCTRL_PDIV_2X_gc:  base_freq /= 2; break;
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	77 95       	ror	r23
 226:	67 95       	ror	r22
 228:	68 c0       	rjmp	.+208    	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_4X_gc:  base_freq /= 4; break;
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	77 95       	ror	r23
 230:	67 95       	ror	r22
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	77 95       	ror	r23
 238:	67 95       	ror	r22
 23a:	5f c0       	rjmp	.+190    	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_6X_gc:  base_freq /= 6; break;
 23c:	2b ea       	ldi	r18, 0xAB	; 171
 23e:	3a ea       	ldi	r19, 0xAA	; 170
 240:	4a ea       	ldi	r20, 0xAA	; 170
 242:	5a ea       	ldi	r21, 0xAA	; 170
 244:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__umulsidi3>
 248:	00 e2       	ldi	r16, 0x20	; 32
 24a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__lshrdi3>
 24e:	82 2e       	mov	r8, r18
 250:	93 2e       	mov	r9, r19
 252:	a4 2e       	mov	r10, r20
 254:	b5 2e       	mov	r11, r21
 256:	c5 01       	movw	r24, r10
 258:	b4 01       	movw	r22, r8
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	77 95       	ror	r23
 260:	67 95       	ror	r22
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	77 95       	ror	r23
 268:	67 95       	ror	r22
 26a:	47 c0       	rjmp	.+142    	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_8X_gc:  base_freq /= 8; break;
 26c:	68 94       	set
 26e:	12 f8       	bld	r1, 2
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	77 95       	ror	r23
 276:	67 95       	ror	r22
 278:	16 94       	lsr	r1
 27a:	d1 f7       	brne	.-12     	; 0x270 <CLOCK_read+0x10a>
 27c:	3e c0       	rjmp	.+124    	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_10X_gc: base_freq /= 10; break;
 27e:	2a e0       	ldi	r18, 0x0A	; 10
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	0e 94 1a 06 	call	0xc34	; 0xc34 <__udivmodsi4>
 28a:	ca 01       	movw	r24, r20
 28c:	b9 01       	movw	r22, r18
 28e:	35 c0       	rjmp	.+106    	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_12X_gc: base_freq /= 12; break;
 290:	2c e0       	ldi	r18, 0x0C	; 12
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	0e 94 1a 06 	call	0xc34	; 0xc34 <__udivmodsi4>
 29c:	ca 01       	movw	r24, r20
 29e:	b9 01       	movw	r22, r18
 2a0:	2c c0       	rjmp	.+88     	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_16X_gc: base_freq /= 16; break;
 2a2:	68 94       	set
 2a4:	13 f8       	bld	r1, 3
 2a6:	96 95       	lsr	r25
 2a8:	87 95       	ror	r24
 2aa:	77 95       	ror	r23
 2ac:	67 95       	ror	r22
 2ae:	16 94       	lsr	r1
 2b0:	d1 f7       	brne	.-12     	; 0x2a6 <CLOCK_read+0x140>
 2b2:	23 c0       	rjmp	.+70     	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_24X_gc: base_freq /= 24; break;
 2b4:	28 e1       	ldi	r18, 0x18	; 24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	0e 94 1a 06 	call	0xc34	; 0xc34 <__udivmodsi4>
 2c0:	ca 01       	movw	r24, r20
 2c2:	b9 01       	movw	r22, r18
 2c4:	1a c0       	rjmp	.+52     	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_32X_gc: base_freq /= 32; break;
 2c6:	68 94       	set
 2c8:	14 f8       	bld	r1, 4
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	77 95       	ror	r23
 2d0:	67 95       	ror	r22
 2d2:	16 94       	lsr	r1
 2d4:	d1 f7       	brne	.-12     	; 0x2ca <CLOCK_read+0x164>
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_48X_gc: base_freq /= 48; break;
 2d8:	20 e3       	ldi	r18, 0x30	; 48
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 1a 06 	call	0xc34	; 0xc34 <__udivmodsi4>
 2e4:	ca 01       	movw	r24, r20
 2e6:	b9 01       	movw	r22, r18
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <CLOCK_read+0x194>
			    case CLKCTRL_PDIV_64X_gc: base_freq /= 64; break;
 2ea:	68 94       	set
 2ec:	15 f8       	bld	r1, 5
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	77 95       	ror	r23
 2f4:	67 95       	ror	r22
 2f6:	16 94       	lsr	r1
 2f8:	d1 f7       	brne	.-12     	; 0x2ee <CLOCK_read+0x188>
		    }
	    }
    }

    // Adjust base frequency for PLL
    if ((TCD0.CTRLA & TCD_CLKSEL_gm) == TCD_CLKSEL_PLL_gc) {
 2fa:	20 91 80 0b 	lds	r18, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 2fe:	20 76       	andi	r18, 0x60	; 96
 300:	20 32       	cpi	r18, 0x20	; 32
 302:	49 f5       	brne	.+82     	; 0x356 <CLOCK_read+0x1f0>
	    if ((CLKCTRL.PLLCTRLA & CLKCTRL_PLLCTRLA) == CLKCTRL_MULFAC_2x_gc) {
 304:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 308:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 30c:	23 23       	and	r18, r19
 30e:	21 30       	cpi	r18, 0x01	; 1
 310:	29 f4       	brne	.+10     	; 0x31c <CLOCK_read+0x1b6>
		    base_freq *= 2;
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	11 c0       	rjmp	.+34     	; 0x33e <CLOCK_read+0x1d8>
		    } else if ((CLKCTRL.PLLCTRLA & CLKCTRL_PLLCTRLA) == CLKCTRL_MULFAC_3x_gc) {
 31c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 320:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 324:	23 23       	and	r18, r19
 326:	22 30       	cpi	r18, 0x02	; 2
 328:	51 f4       	brne	.+20     	; 0x33e <CLOCK_read+0x1d8>
		    base_freq *= 3;
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
 32e:	cc 0c       	add	r12, r12
 330:	dd 1c       	adc	r13, r13
 332:	ee 1c       	adc	r14, r14
 334:	ff 1c       	adc	r15, r15
 336:	6c 0d       	add	r22, r12
 338:	7d 1d       	adc	r23, r13
 33a:	8e 1d       	adc	r24, r14
 33c:	9f 1d       	adc	r25, r15
	    }

	    if (base_freq > 48000000) {
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	2c e6       	ldi	r18, 0x6C	; 108
 342:	72 07       	cpc	r23, r18
 344:	2c ed       	ldi	r18, 0xDC	; 220
 346:	82 07       	cpc	r24, r18
 348:	22 e0       	ldi	r18, 0x02	; 2
 34a:	92 07       	cpc	r25, r18
 34c:	20 f0       	brcs	.+8      	; 0x356 <CLOCK_read+0x1f0>
		    base_freq = 48000000; ///< Cap at 48 MHz (maximum PLL frequency)
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	7c e6       	ldi	r23, 0x6C	; 108
 352:	8c ed       	ldi	r24, 0xDC	; 220
 354:	92 e0       	ldi	r25, 0x02	; 2
	    }
    }
	return base_freq;
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	af 90       	pop	r10
 366:	9f 90       	pop	r9
 368:	8f 90       	pop	r8
 36a:	08 95       	ret

0000036c <GPIO_init>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void GPIO_init(){
	PORTA.DIRSET = PIN4_bm |PIN6_bm | PIN7_bm; // MOSI, SCK, SS
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	f4 e0       	ldi	r31, 0x04	; 4
 370:	80 ed       	ldi	r24, 0xD0	; 208
 372:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRCLR = PIN5_bm; //MISO
 374:	80 e2       	ldi	r24, 0x20	; 32
 376:	82 83       	std	Z+2, r24	; 0x02

	PORTD.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm; //PWM, DIR, DIS
 378:	80 e7       	ldi	r24, 0x70	; 112
 37a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>

	PORTF.DIRCLR = PIN5_bm | PIN6_bm; // START/STOP, DIR
 37e:	e0 ea       	ldi	r30, 0xA0	; 160
 380:	f4 e0       	ldi	r31, 0x04	; 4
 382:	80 e6       	ldi	r24, 0x60	; 96
 384:	82 83       	std	Z+2, r24	; 0x02
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
 386:	88 e0       	ldi	r24, 0x08	; 8
 388:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
 38a:	86 8b       	std	Z+22, r24	; 0x16
 38c:	08 95       	ret

0000038e <main>:

#include "Settings.h"

int main(void)
{
	GPIO_init();
 38e:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_init>
    CLOCK_INHF_clock_init(); ///< Initialize the internal high-frequency clock
 392:	0e 94 9a 00 	call	0x134	; 0x134 <CLOCK_INHF_clock_init>
	TLE9201SG.pwm_freq = 20000; //20kHz //allways before mode init
 396:	ed e0       	ldi	r30, 0x0D	; 13
 398:	f0 e6       	ldi	r31, 0x60	; 96
 39a:	80 e2       	ldi	r24, 0x20	; 32
 39c:	9e e4       	ldi	r25, 0x4E	; 78
 39e:	81 8b       	std	Z+17, r24	; 0x11
 3a0:	92 8b       	std	Z+18, r25	; 0x12
	TLE9201SG.duty_cycle = 50.0; //10% duty cycle //allways before mode init
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	a8 e4       	ldi	r26, 0x48	; 72
 3a8:	b2 e4       	ldi	r27, 0x42	; 66
 3aa:	83 8b       	std	Z+19, r24	; 0x13
 3ac:	94 8b       	std	Z+20, r25	; 0x14
 3ae:	a5 8b       	std	Z+21, r26	; 0x15
 3b0:	b6 8b       	std	Z+22, r27	; 0x16
	TLE9201SG_Mode_init(TLE9201SG_MODE_PWMDIR);
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 16 03 	call	0x62c	; 0x62c <TLE9201SG_Mode_init>
	TLE9201SG_OFF(); // disable all outputs
 3b8:	0e 94 cc 03 	call	0x798	; 0x798 <TLE9201SG_OFF>

    while (1) {
		if(!(PORTF.IN & PIN5_bm)){ //start TLE9201SG
 3bc:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f04a8>
 3c0:	85 fd       	sbrc	r24, 5
 3c2:	10 c0       	rjmp	.+32     	; 0x3e4 <main+0x56>
			TLE9201SG_ON();
 3c4:	0e 94 c0 03 	call	0x780	; 0x780 <TLE9201SG_ON>
			TLE9201SG_START();
 3c8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <TLE9201SG_START>
			if(!(PORTF.IN & PIN6_bm))
 3cc:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f04a8>
 3d0:	86 fd       	sbrc	r24, 6
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <main+0x4e>
				TLE9201SG_DIR(1);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TLE9201SG_DIR>
 3da:	f0 cf       	rjmp	.-32     	; 0x3bc <main+0x2e>
			else
				TLE9201SG_DIR(0);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TLE9201SG_DIR>
 3e2:	ec cf       	rjmp	.-40     	; 0x3bc <main+0x2e>
		}
		else { //stop TLE9201SG
			TLE9201SG_STOP();
 3e4:	0e 94 07 04 	call	0x80e	; 0x80e <TLE9201SG_STOP>
			TLE9201SG_OFF();
 3e8:	0e 94 cc 03 	call	0x798	; 0x798 <TLE9201SG_OFF>
 3ec:	e7 cf       	rjmp	.-50     	; 0x3bc <main+0x2e>

000003ee <SPI0_init>:
 */ 
#include "Settings.h"

void SPI0_init(){

	SPI0.CTRLA = SPI_CLK2X_bm	//Double speed
 3ee:	e0 e4       	ldi	r30, 0x40	; 64
 3f0:	f9 e0       	ldi	r31, 0x09	; 9
 3f2:	81 e3       	ldi	r24, 0x31	; 49
 3f4:	80 83       	st	Z, r24
			   | SPI_MASTER_bm	//Run as Master
			   | SPI_PRESC_DIV4_gc //Speed = 24Mhz/4*2 = 12Mhz
			   | SPI_ENABLE_bm; //Enable spi

	SPI0.CTRLB =  SPI_MODE_1_gc; //SPI mode 1 for TLE9201SG
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	81 83       	std	Z+1, r24	; 0x01
 3fa:	08 95       	ret

000003fc <SPI0_Start>:
}

void SPI0_Start(){
 PORTA.OUTCLR = PIN7_bm; //Pull SS low
 3fc:	80 e8       	ldi	r24, 0x80	; 128
 3fe:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
 402:	08 95       	ret

00000404 <SPI0_Stop>:
}

void SPI0_Stop(){
	PORTA.OUTSET = PIN7_bm; //Pull SS high
 404:	80 e8       	ldi	r24, 0x80	; 128
 406:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
 40a:	08 95       	ret

0000040c <TCD0_ON>:
 * @brief Turns on the TCD0 counter.
 * 
 * @details Waits until the TCD is ready to be enabled, then activates the timer.
 */
void TCD0_ON() {
    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until the TCD is ready
 40c:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 410:	80 ff       	sbrs	r24, 0
 412:	fc cf       	rjmp	.-8      	; 0x40c <TCD0_ON>
    TCD0.CTRLA |= TCD_ENABLE_bm; ///< Enable the TCD0 counter
 414:	e0 e8       	ldi	r30, 0x80	; 128
 416:	fb e0       	ldi	r31, 0x0B	; 11
 418:	80 81       	ld	r24, Z
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	80 83       	st	Z, r24
 41e:	08 95       	ret

00000420 <TCD0_OFF>:
 * @brief Turns off the TCD0 counter.
 * 
 * @details Waits until the TCD is ready to be disabled, then deactivates the timer.
 */
void TCD0_OFF() {
    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until the TCD is ready
 420:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 424:	80 ff       	sbrs	r24, 0
 426:	fc cf       	rjmp	.-8      	; 0x420 <TCD0_OFF>
    TCD0.CTRLA &= ~TCD_ENABLE_bm; ///< Disable the TCD0 counter
 428:	e0 e8       	ldi	r30, 0x80	; 128
 42a:	fb e0       	ldi	r31, 0x0B	; 11
 42c:	80 81       	ld	r24, Z
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <PWM_init>:
}


void PWM_init(uint32_t target_freq, float duty_cycle) {
 434:	4f 92       	push	r4
 436:	5f 92       	push	r5
 438:	6f 92       	push	r6
 43a:	7f 92       	push	r7
 43c:	8f 92       	push	r8
 43e:	9f 92       	push	r9
 440:	af 92       	push	r10
 442:	bf 92       	push	r11
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	2b 01       	movw	r4, r22
 452:	3c 01       	movw	r6, r24
 454:	69 01       	movw	r12, r18
 456:	7a 01       	movw	r14, r20
        }
    }*/

    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
 458:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 45c:	88 71       	andi	r24, 0x18	; 24
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	31 f0       	breq	.+12     	; 0x46e <PWM_init+0x3a>
 462:	80 31       	cpi	r24, 0x10	; 16
 464:	11 f0       	breq	.+4      	; 0x46a <PWM_init+0x36>
            base_freq = 48000000; ///< Cap at 48 MHz (maximum PLL frequency)
        }
    }*/

    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
 466:	c1 e0       	ldi	r28, 0x01	; 1
 468:	03 c0       	rjmp	.+6      	; 0x470 <PWM_init+0x3c>
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
        case TCD_CNTPRES_DIV4_gc:  TCD_prescaler = 4; break;
        case TCD_CNTPRES_DIV32_gc: TCD_prescaler = 32; break;
 46a:	c0 e2       	ldi	r28, 0x20	; 32
 46c:	01 c0       	rjmp	.+2      	; 0x470 <PWM_init+0x3c>
    }*/

    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
        case TCD_CNTPRES_DIV4_gc:  TCD_prescaler = 4; break;
 46e:	c4 e0       	ldi	r28, 0x04	; 4
        case TCD_CNTPRES_DIV32_gc: TCD_prescaler = 32; break;
    }

    // Calculate compare registers
    uint16_t cmpbclr = (CLOCK_read() / (TCD_prescaler * target_freq * 2)) - 1;
 470:	0e 94 b3 00 	call	0x166	; 0x166 <CLOCK_read>
 474:	4b 01       	movw	r8, r22
 476:	5c 01       	movw	r10, r24
 478:	ac 2f       	mov	r26, r28
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	a3 01       	movw	r20, r6
 47e:	92 01       	movw	r18, r4
 480:	0e 94 42 06 	call	0xc84	; 0xc84 <__muluhisi3>
 484:	9b 01       	movw	r18, r22
 486:	ac 01       	movw	r20, r24
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	44 1f       	adc	r20, r20
 48e:	55 1f       	adc	r21, r21
 490:	c5 01       	movw	r24, r10
 492:	b4 01       	movw	r22, r8
 494:	0e 94 1a 06 	call	0xc34	; 0xc34 <__udivmodsi4>
 498:	e9 01       	movw	r28, r18
 49a:	21 97       	sbiw	r28, 0x01	; 1
    uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_cycle / 100.0f)) + 1;
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	48 ec       	ldi	r20, 0xC8	; 200
 4a2:	52 e4       	ldi	r21, 0x42	; 66
 4a4:	c7 01       	movw	r24, r14
 4a6:	b6 01       	movw	r22, r12
 4a8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3>
 4ac:	6b 01       	movw	r12, r22
 4ae:	7c 01       	movw	r14, r24
 4b0:	be 01       	movw	r22, r28
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__floatunsisf>
 4ba:	a7 01       	movw	r20, r14
 4bc:	96 01       	movw	r18, r12
 4be:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__mulsf3>
 4c2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fixunssfsi>
 4c6:	6f 5f       	subi	r22, 0xFF	; 255
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
    uint16_t cmpbset = cmpbclr - cmpaset - 1;
 4ca:	ce 01       	movw	r24, r28
 4cc:	86 1b       	sub	r24, r22
 4ce:	97 0b       	sbc	r25, r23
 4d0:	01 97       	sbiw	r24, 0x01	; 1

    // Set TCD compare registers
    TCD0.CMPBCLR = cmpbclr;
 4d2:	e0 e8       	ldi	r30, 0x80	; 128
 4d4:	fb e0       	ldi	r31, 0x0B	; 11
 4d6:	c6 a7       	std	Z+46, r28	; 0x2e
 4d8:	d7 a7       	std	Z+47, r29	; 0x2f
    TCD0.CMPBSET = cmpbset;
 4da:	84 a7       	std	Z+44, r24	; 0x2c
 4dc:	95 a7       	std	Z+45, r25	; 0x2d
    TCD0.CMPASET = cmpaset;
 4de:	60 a7       	std	Z+40, r22	; 0x28
 4e0:	71 a7       	std	Z+41, r23	; 0x29

}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	bf 90       	pop	r11
 4f0:	af 90       	pop	r10
 4f2:	9f 90       	pop	r9
 4f4:	8f 90       	pop	r8
 4f6:	7f 90       	pop	r7
 4f8:	6f 90       	pop	r6
 4fa:	5f 90       	pop	r5
 4fc:	4f 90       	pop	r4
 4fe:	08 95       	ret

00000500 <TCD0_init>:
 * 
 * @details Configures the waveform generation mode, fault control, and clock source.
 *          This function also selects the WOC (Waveform Output Compare) pin configuration.
 */
void TCD0_init() {
    PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT4_gc; ///< Select alternative WOC pin variant 4
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <__TEXT_REGION_LENGTH__+0x7f05e9>
    ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PD4 (pin 14)
 506:	60 e4       	ldi	r22, 0x40	; 64
 508:	82 e9       	ldi	r24, 0x92	; 146
 50a:	9b e0       	ldi	r25, 0x0B	; 11
 50c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <ccp_write_io>

    TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
 510:	83 e0       	ldi	r24, 0x03	; 3
 512:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7f0b81>

    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until TCD is ready for configuration
 516:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 51a:	80 ff       	sbrs	r24, 0
 51c:	fc cf       	rjmp	.-8      	; 0x516 <TCD0_init+0x16>
    TCD0.CTRLA = TCD_CLKSEL_OSCHF_gc | ///< Select PLL as clock source
 51e:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 522:	08 95       	ret

00000524 <TLE9201SG_Diagnosis>:
 		while (!(SPI0.INTFLAGS & SPI_RXCIF_bm));  // waiting until all data will be exchanged
		SPI0_Stop();		
	}
	firstime = 1;
	return SPI0.DATA;
 }
 524:	ed e0       	ldi	r30, 0x0D	; 13
 526:	f0 e6       	ldi	r31, 0x60	; 96
 528:	81 81       	ldd	r24, Z+1	; 0x01
 52a:	98 2f       	mov	r25, r24
 52c:	99 1f       	adc	r25, r25
 52e:	99 27       	eor	r25, r25
 530:	99 1f       	adc	r25, r25
 532:	93 83       	std	Z+3, r25	; 0x03
 534:	86 fb       	bst	r24, 6
 536:	99 27       	eor	r25, r25
 538:	90 f9       	bld	r25, 0
 53a:	94 83       	std	Z+4, r25	; 0x04
 53c:	85 fb       	bst	r24, 5
 53e:	99 27       	eor	r25, r25
 540:	90 f9       	bld	r25, 0
 542:	95 83       	std	Z+5, r25	; 0x05
 544:	84 fb       	bst	r24, 4
 546:	99 27       	eor	r25, r25
 548:	90 f9       	bld	r25, 0
 54a:	96 83       	std	Z+6, r25	; 0x06
 54c:	8f 70       	andi	r24, 0x0F	; 15
 54e:	87 83       	std	Z+7, r24	; 0x07
 550:	8f 30       	cpi	r24, 0x0F	; 15
 552:	11 f0       	breq	.+4      	; 0x558 <TLE9201SG_Diagnosis+0x34>
 554:	80 93 15 60 	sts	0x6015, r24	; 0x806015 <TLE9201SG+0x8>
 558:	08 95       	ret

0000055a <TLE9201SG_Read_Control>:
 55a:	ed e0       	ldi	r30, 0x0D	; 13
 55c:	f0 e6       	ldi	r31, 0x60	; 96
 55e:	82 81       	ldd	r24, Z+2	; 0x02
 560:	98 2f       	mov	r25, r24
 562:	92 95       	swap	r25
 564:	96 95       	lsr	r25
 566:	97 70       	andi	r25, 0x07	; 7
 568:	91 87       	std	Z+9, r25	; 0x09
 56a:	84 fb       	bst	r24, 4
 56c:	99 27       	eor	r25, r25
 56e:	90 f9       	bld	r25, 0
 570:	92 87       	std	Z+10, r25	; 0x0a
 572:	83 fb       	bst	r24, 3
 574:	99 27       	eor	r25, r25
 576:	90 f9       	bld	r25, 0
 578:	93 87       	std	Z+11, r25	; 0x0b
 57a:	82 fb       	bst	r24, 2
 57c:	99 27       	eor	r25, r25
 57e:	90 f9       	bld	r25, 0
 580:	94 87       	std	Z+12, r25	; 0x0c
 582:	81 fb       	bst	r24, 1
 584:	99 27       	eor	r25, r25
 586:	90 f9       	bld	r25, 0
 588:	95 87       	std	Z+13, r25	; 0x0d
 58a:	81 70       	andi	r24, 0x01	; 1
 58c:	86 87       	std	Z+14, r24	; 0x0e
 58e:	08 95       	ret

00000590 <TLE9201SG_Write>:

void TLE9201SG_Write(uint8_t command){
 590:	cf 93       	push	r28
 592:	c8 2f       	mov	r28, r24
	static uint8_t fakeread = 0,
		   counter = 0;
	SPI0_Start();
 594:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SPI0_Start>
		SPI0.DATA = command+ (TLE9201SG.OLDIS<<4) + (TLE9201SG.SIN<<3) + (TLE9201SG.SEN<<2) + (TLE9201SG.SDIR<<1) + TLE9201SG.SPWM;
 598:	ed e0       	ldi	r30, 0x0D	; 13
 59a:	f0 e6       	ldi	r31, 0x60	; 96
 59c:	82 85       	ldd	r24, Z+10	; 0x0a
 59e:	33 85       	ldd	r19, Z+11	; 0x0b
 5a0:	24 85       	ldd	r18, Z+12	; 0x0c
 5a2:	95 85       	ldd	r25, Z+13	; 0x0d
 5a4:	46 85       	ldd	r20, Z+14	; 0x0e
 5a6:	6c 2f       	mov	r22, r28
 5a8:	50 e1       	ldi	r21, 0x10	; 16
 5aa:	85 9f       	mul	r24, r21
 5ac:	60 0d       	add	r22, r0
 5ae:	11 24       	eor	r1, r1
 5b0:	86 2f       	mov	r24, r22
 5b2:	33 0f       	add	r19, r19
 5b4:	33 0f       	add	r19, r19
 5b6:	33 0f       	add	r19, r19
 5b8:	83 0f       	add	r24, r19
 5ba:	22 0f       	add	r18, r18
 5bc:	22 0f       	add	r18, r18
 5be:	82 0f       	add	r24, r18
 5c0:	99 0f       	add	r25, r25
 5c2:	89 0f       	add	r24, r25
 5c4:	84 0f       	add	r24, r20
 5c6:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm));
 5ca:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 5ce:	88 23       	and	r24, r24
 5d0:	e4 f7       	brge	.-8      	; 0x5ca <TLE9201SG_Write+0x3a>
	SPI0_Stop();
 5d2:	0e 94 02 02 	call	0x404	; 0x404 <SPI0_Stop>
	if(counter != 3){
 5d6:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
 5da:	83 30       	cpi	r24, 0x03	; 3
 5dc:	81 f0       	breq	.+32     	; 0x5fe <TLE9201SG_Write+0x6e>
		if(command == WR_CTRL){
 5de:	c0 3e       	cpi	r28, 0xE0	; 224
 5e0:	39 f4       	brne	.+14     	; 0x5f0 <TLE9201SG_Write+0x60>
			TLE9201SG.control = SPI0.DATA;
 5e2:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 5e6:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <TLE9201SG+0x2>
			TLE9201SG_Read_Control();
 5ea:	0e 94 ad 02 	call	0x55a	; 0x55a <TLE9201SG_Read_Control>
 5ee:	1c c0       	rjmp	.+56     	; 0x628 <TLE9201SG_Write+0x98>
		}
		else{
			TLE9201SG.diag = SPI0.DATA;
 5f0:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 5f4:	80 93 0e 60 	sts	0x600E, r24	; 0x80600e <TLE9201SG+0x1>
			TLE9201SG_Diagnosis();
 5f8:	0e 94 92 02 	call	0x524	; 0x524 <TLE9201SG_Diagnosis>
 5fc:	15 c0       	rjmp	.+42     	; 0x628 <TLE9201SG_Write+0x98>
		}
	}
	else{
		if(command == WR_CTRL){
 5fe:	c0 3e       	cpi	r28, 0xE0	; 224
 600:	39 f4       	brne	.+14     	; 0x610 <TLE9201SG_Write+0x80>
			fakeread = SPI0.DATA;
 602:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
			fakeread = 0x00;
			TLE9201SG.control = fakeread; //default
 606:	10 92 0f 60 	sts	0x600F, r1	; 0x80600f <TLE9201SG+0x2>
			TLE9201SG_Read_Control();
 60a:	0e 94 ad 02 	call	0x55a	; 0x55a <TLE9201SG_Read_Control>
 60e:	07 c0       	rjmp	.+14     	; 0x61e <TLE9201SG_Write+0x8e>
		}
		else{
			fakeread = SPI0.DATA;
 610:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
			fakeread = 0xdf;
			TLE9201SG.diag = fakeread; //default
 614:	8f ed       	ldi	r24, 0xDF	; 223
 616:	80 93 0e 60 	sts	0x600E, r24	; 0x80600e <TLE9201SG+0x1>
			TLE9201SG_Diagnosis();
 61a:	0e 94 92 02 	call	0x524	; 0x524 <TLE9201SG_Diagnosis>
		}
		counter++;			
 61e:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
 622:	8f 5f       	subi	r24, 0xFF	; 255
 624:	80 93 00 60 	sts	0x6000, r24	; 0x806000 <__DATA_REGION_ORIGIN__>
	}
}
 628:	cf 91       	pop	r28
 62a:	08 95       	ret

0000062c <TLE9201SG_Mode_init>:
		double sig_period = 0.0;
		double sig_calc = 0.0;
		double sig_on = 0.0;


void TLE9201SG_Mode_init(uint8_t mode){ //This function allows selection of controll type 0- DIR/PWM or 1- SPI
 62c:	4f 92       	push	r4
 62e:	5f 92       	push	r5
 630:	6f 92       	push	r6
 632:	7f 92       	push	r7
 634:	8f 92       	push	r8
 636:	9f 92       	push	r9
 638:	af 92       	push	r10
 63a:	bf 92       	push	r11
 63c:	cf 92       	push	r12
 63e:	df 92       	push	r13
 640:	ef 92       	push	r14
 642:	ff 92       	push	r15
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
	TLE9201SG.mode = mode;
 648:	80 93 1d 60 	sts	0x601D, r24	; 0x80601d <TLE9201SG+0x10>
	if(mode){ //SPI
 64c:	88 23       	and	r24, r24
 64e:	09 f4       	brne	.+2      	; 0x652 <TLE9201SG_Mode_init+0x26>
 650:	78 c0       	rjmp	.+240    	; 0x742 <TLE9201SG_Mode_init+0x116>

		SPI0_init();
 652:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI0_init>
		TLE9201SG.SIN = 1; //enabling control via SPI
 656:	cd e0       	ldi	r28, 0x0D	; 13
 658:	d0 e6       	ldi	r29, 0x60	; 96
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	8b 87       	std	Y+11, r24	; 0x0b
		TLE9201SG.OLDIS = 0;
 65e:	1a 86       	std	Y+10, r1	; 0x0a
		TLE9201SG.SEN = 0; //disable outputs
 660:	1c 86       	std	Y+12, r1	; 0x0c
		TLE9201SG_Write(WR_CTRL);
 662:	80 ee       	ldi	r24, 0xE0	; 224
 664:	0e 94 c8 02 	call	0x590	; 0x590 <TLE9201SG_Write>

		sig_calc = 1.0 / CLOCK_read() * 4; //calculating time base according current main clock value
 668:	0e 94 b3 00 	call	0x166	; 0x166 <CLOCK_read>
 66c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__floatunsisf>
 670:	9b 01       	movw	r18, r22
 672:	ac 01       	movw	r20, r24
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	80 e8       	ldi	r24, 0x80	; 128
 67a:	9f e3       	ldi	r25, 0x3F	; 63
 67c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3>
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	40 e8       	ldi	r20, 0x80	; 128
 686:	50 e4       	ldi	r21, 0x40	; 64
 688:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__mulsf3>
 68c:	4b 01       	movw	r8, r22
 68e:	5c 01       	movw	r10, r24
 690:	60 93 05 60 	sts	0x6005, r22	; 0x806005 <sig_calc>
 694:	70 93 06 60 	sts	0x6006, r23	; 0x806006 <sig_calc+0x1>
 698:	80 93 07 60 	sts	0x6007, r24	; 0x806007 <sig_calc+0x2>
 69c:	90 93 08 60 	sts	0x6008, r25	; 0x806008 <sig_calc+0x3>
		sig_period = (1.0 / TLE9201SG.pwm_freq) - TLE9201SG_SPI_TIME_COMPENSATION; //calculating period time for requared frequency
 6a0:	69 89       	ldd	r22, Y+17	; 0x11
 6a2:	7a 89       	ldd	r23, Y+18	; 0x12
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__floatunsisf>
 6ac:	9b 01       	movw	r18, r22
 6ae:	ac 01       	movw	r20, r24
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	80 e8       	ldi	r24, 0x80	; 128
 6b6:	9f e3       	ldi	r25, 0x3F	; 63
 6b8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3>
 6bc:	2f ef       	ldi	r18, 0xFF	; 255
 6be:	35 e0       	ldi	r19, 0x05	; 5
 6c0:	42 e8       	ldi	r20, 0x82	; 130
 6c2:	57 e3       	ldi	r21, 0x37	; 55
 6c4:	0e 94 11 04 	call	0x822	; 0x822 <__subsf3>
 6c8:	2b 01       	movw	r4, r22
 6ca:	3c 01       	movw	r6, r24
 6cc:	60 93 09 60 	sts	0x6009, r22	; 0x806009 <sig_period>
 6d0:	70 93 0a 60 	sts	0x600A, r23	; 0x80600a <sig_period+0x1>
 6d4:	80 93 0b 60 	sts	0x600B, r24	; 0x80600b <sig_period+0x2>
 6d8:	90 93 0c 60 	sts	0x600C, r25	; 0x80600c <sig_period+0x3>
		sig_on = TLE9201SG.duty_cycle/100 * sig_period; //calculating pwm duty cycle
 6dc:	6b 89       	ldd	r22, Y+19	; 0x13
 6de:	7c 89       	ldd	r23, Y+20	; 0x14
 6e0:	8d 89       	ldd	r24, Y+21	; 0x15
 6e2:	9e 89       	ldd	r25, Y+22	; 0x16
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	48 ec       	ldi	r20, 0xC8	; 200
 6ea:	52 e4       	ldi	r21, 0x42	; 66
 6ec:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3>
 6f0:	9b 01       	movw	r18, r22
 6f2:	ac 01       	movw	r20, r24
 6f4:	c3 01       	movw	r24, r6
 6f6:	b2 01       	movw	r22, r4
 6f8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__mulsf3>
 6fc:	6b 01       	movw	r12, r22
 6fe:	7c 01       	movw	r14, r24
 700:	60 93 01 60 	sts	0x6001, r22	; 0x806001 <sig_on>
 704:	70 93 02 60 	sts	0x6002, r23	; 0x806002 <sig_on+0x1>
 708:	80 93 03 60 	sts	0x6003, r24	; 0x806003 <sig_on+0x2>
 70c:	90 93 04 60 	sts	0x6004, r25	; 0x806004 <sig_on+0x3>
		TLE9201SG.off = ((sig_period - sig_on)/ sig_calc); //calculating pwm off time
 710:	9b 01       	movw	r18, r22
 712:	ac 01       	movw	r20, r24
 714:	c3 01       	movw	r24, r6
 716:	b2 01       	movw	r22, r4
 718:	0e 94 11 04 	call	0x822	; 0x822 <__subsf3>
 71c:	a5 01       	movw	r20, r10
 71e:	94 01       	movw	r18, r8
 720:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3>
 724:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fixunssfsi>
 728:	69 8f       	std	Y+25, r22	; 0x19
 72a:	7a 8f       	std	Y+26, r23	; 0x1a
		TLE9201SG.on =  (sig_on/sig_calc); //calculating pwm on time
 72c:	a5 01       	movw	r20, r10
 72e:	94 01       	movw	r18, r8
 730:	c7 01       	movw	r24, r14
 732:	b6 01       	movw	r22, r12
 734:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3>
 738:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fixunssfsi>
 73c:	6f 8b       	std	Y+23, r22	; 0x17
 73e:	78 8f       	std	Y+24, r23	; 0x18
 740:	10 c0       	rjmp	.+32     	; 0x762 <TLE9201SG_Mode_init+0x136>

	}
	else{ //PWM DIR
		PLL_init(); ///< Initialize the Phase-Locked Loop (PLL)
 742:	0e 94 a9 00 	call	0x152	; 0x152 <PLL_init>
		TCD0_init(); ///< Initialize Timer/Counter D (TCD)
 746:	0e 94 80 02 	call	0x500	; 0x500 <TCD0_init>
		PWM_init(TLE9201SG.pwm_freq, TLE9201SG.duty_cycle);
 74a:	ed e0       	ldi	r30, 0x0D	; 13
 74c:	f0 e6       	ldi	r31, 0x60	; 96
 74e:	61 89       	ldd	r22, Z+17	; 0x11
 750:	72 89       	ldd	r23, Z+18	; 0x12
 752:	23 89       	ldd	r18, Z+19	; 0x13
 754:	34 89       	ldd	r19, Z+20	; 0x14
 756:	45 89       	ldd	r20, Z+21	; 0x15
 758:	56 89       	ldd	r21, Z+22	; 0x16
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 1a 02 	call	0x434	; 0x434 <PWM_init>
	}
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	bf 90       	pop	r11
 770:	af 90       	pop	r10
 772:	9f 90       	pop	r9
 774:	8f 90       	pop	r8
 776:	7f 90       	pop	r7
 778:	6f 90       	pop	r6
 77a:	5f 90       	pop	r5
 77c:	4f 90       	pop	r4
 77e:	08 95       	ret

00000780 <TLE9201SG_ON>:

void TLE9201SG_ON(){
	if(TLE9201SG.mode){ //Mode SPI
 780:	80 91 1d 60 	lds	r24, 0x601D	; 0x80601d <TLE9201SG+0x10>
 784:	88 23       	and	r24, r24
 786:	21 f0       	breq	.+8      	; 0x790 <TLE9201SG_ON+0x10>
		TLE9201SG.SEN = 1; //enable outputs
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	80 93 19 60 	sts	0x6019, r24	; 0x806019 <TLE9201SG+0xc>
 78e:	08 95       	ret
	}
	else{
		PORTD.OUTCLR = PIN6_bm; // 
 790:	80 e4       	ldi	r24, 0x40	; 64
 792:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
 796:	08 95       	ret

00000798 <TLE9201SG_OFF>:
	}
}

void TLE9201SG_OFF(){ //stop and turn off
	if(TLE9201SG.mode){ //Mode SPI
 798:	80 91 1d 60 	lds	r24, 0x601D	; 0x80601d <TLE9201SG+0x10>
 79c:	88 23       	and	r24, r24
 79e:	29 f0       	breq	.+10     	; 0x7aa <TLE9201SG_OFF+0x12>
		TLE9201SG.SEN = 0; //disable outputs
 7a0:	10 92 19 60 	sts	0x6019, r1	; 0x806019 <TLE9201SG+0xc>
		SPI0_Stop();
 7a4:	0e 94 02 02 	call	0x404	; 0x404 <SPI0_Stop>
 7a8:	08 95       	ret
	}
	else{
		TCD0_OFF();
 7aa:	0e 94 10 02 	call	0x420	; 0x420 <TCD0_OFF>
		PORTD.OUTSET = PIN6_bm;
 7ae:	80 e4       	ldi	r24, 0x40	; 64
 7b0:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
 7b4:	08 95       	ret

000007b6 <TLE9201SG_DIR>:
	}
}

void TLE9201SG_DIR(uint8_t direction){
	if(TLE9201SG.mode){ //Mode SPI
 7b6:	90 91 1d 60 	lds	r25, 0x601D	; 0x80601d <TLE9201SG+0x10>
 7ba:	99 23       	and	r25, r25
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <TLE9201SG_DIR+0xe>
		TLE9201SG.SDIR = direction;
 7be:	80 93 1a 60 	sts	0x601A, r24	; 0x80601a <TLE9201SG+0xd>
 7c2:	08 95       	ret
	}
	else{
		PORTD.OUT = (direction << PIN5_bp);
 7c4:	82 95       	swap	r24
 7c6:	88 0f       	add	r24, r24
 7c8:	80 7e       	andi	r24, 0xE0	; 224
 7ca:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f0464>
 7ce:	08 95       	ret

000007d0 <TLE9201SG_START>:
	}
}

void TLE9201SG_START(){
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
	if(TLE9201SG.mode){ //Mode SPI
 7d4:	80 91 1d 60 	lds	r24, 0x601D	; 0x80601d <TLE9201SG+0x10>
 7d8:	88 23       	and	r24, r24
 7da:	a1 f0       	breq	.+40     	; 0x804 <TLE9201SG_START+0x34>

		TLE9201SG.SPWM = 1;
 7dc:	cd e0       	ldi	r28, 0x0D	; 13
 7de:	d0 e6       	ldi	r29, 0x60	; 96
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	8e 87       	std	Y+14, r24	; 0x0e
		TLE9201SG_Write(WR_CTRL_RD_DIA);
 7e4:	80 ec       	ldi	r24, 0xC0	; 192
 7e6:	0e 94 c8 02 	call	0x590	; 0x590 <TLE9201SG_Write>
		//_delay_loop_2(calculate_delay_loop2_value(sig_on)); //50us = 20khz //_delay can be changed with other timer exmpl.: TCA or TCB or RTC or even TCD
		_delay_loop_2(TLE9201SG.on);
 7ea:	8f 89       	ldd	r24, Y+23	; 0x17
 7ec:	98 8d       	ldd	r25, Y+24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <TLE9201SG_START+0x1e>
		//_delay_loop_2(25);
		TLE9201SG.SPWM = 0;
 7f2:	1e 86       	std	Y+14, r1	; 0x0e
		TLE9201SG_Write(WR_CTRL_RD_DIA);
 7f4:	80 ec       	ldi	r24, 0xC0	; 192
 7f6:	0e 94 c8 02 	call	0x590	; 0x590 <TLE9201SG_Write>
		//_delay_loop_2(calculate_delay_loop2_value(sig_off));	
		_delay_loop_2(TLE9201SG.off);
 7fa:	89 8d       	ldd	r24, Y+25	; 0x19
 7fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	f1 f7       	brne	.-4      	; 0x7fe <TLE9201SG_START+0x2e>
 802:	02 c0       	rjmp	.+4      	; 0x808 <TLE9201SG_START+0x38>
		//_delay_loop_2(475);
	}
	else{
		TCD0_ON();
 804:	0e 94 06 02 	call	0x40c	; 0x40c <TCD0_ON>
	}	
}
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	08 95       	ret

0000080e <TLE9201SG_STOP>:

void TLE9201SG_STOP(){
	if(TLE9201SG.mode){ //Mode SPI
 80e:	80 91 1d 60 	lds	r24, 0x601D	; 0x80601d <TLE9201SG+0x10>
 812:	88 23       	and	r24, r24
 814:	19 f0       	breq	.+6      	; 0x81c <TLE9201SG_STOP+0xe>
		SPI0_Stop();
 816:	0e 94 02 02 	call	0x404	; 0x404 <SPI0_Stop>
 81a:	08 95       	ret
	}
	else{
		TCD0_OFF();
 81c:	0e 94 10 02 	call	0x420	; 0x420 <TCD0_OFF>
 820:	08 95       	ret

00000822 <__subsf3>:
 822:	50 58       	subi	r21, 0x80	; 128

00000824 <__addsf3>:
 824:	bb 27       	eor	r27, r27
 826:	aa 27       	eor	r26, r26
 828:	0e 94 29 04 	call	0x852	; 0x852 <__addsf3x>
 82c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_round>
 830:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_pscA>
 834:	38 f0       	brcs	.+14     	; 0x844 <__addsf3+0x20>
 836:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_pscB>
 83a:	20 f0       	brcs	.+8      	; 0x844 <__addsf3+0x20>
 83c:	39 f4       	brne	.+14     	; 0x84c <__addsf3+0x28>
 83e:	9f 3f       	cpi	r25, 0xFF	; 255
 840:	19 f4       	brne	.+6      	; 0x848 <__addsf3+0x24>
 842:	26 f4       	brtc	.+8      	; 0x84c <__addsf3+0x28>
 844:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__fp_nan>
 848:	0e f4       	brtc	.+2      	; 0x84c <__addsf3+0x28>
 84a:	e0 95       	com	r30
 84c:	e7 fb       	bst	r30, 7
 84e:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_inf>

00000852 <__addsf3x>:
 852:	e9 2f       	mov	r30, r25
 854:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_split3>
 858:	58 f3       	brcs	.-42     	; 0x830 <__addsf3+0xc>
 85a:	ba 17       	cp	r27, r26
 85c:	62 07       	cpc	r22, r18
 85e:	73 07       	cpc	r23, r19
 860:	84 07       	cpc	r24, r20
 862:	95 07       	cpc	r25, r21
 864:	20 f0       	brcs	.+8      	; 0x86e <__addsf3x+0x1c>
 866:	79 f4       	brne	.+30     	; 0x886 <__addsf3x+0x34>
 868:	a6 f5       	brtc	.+104    	; 0x8d2 <__addsf3x+0x80>
 86a:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_zero>
 86e:	0e f4       	brtc	.+2      	; 0x872 <__addsf3x+0x20>
 870:	e0 95       	com	r30
 872:	0b 2e       	mov	r0, r27
 874:	ba 2f       	mov	r27, r26
 876:	a0 2d       	mov	r26, r0
 878:	0b 01       	movw	r0, r22
 87a:	b9 01       	movw	r22, r18
 87c:	90 01       	movw	r18, r0
 87e:	0c 01       	movw	r0, r24
 880:	ca 01       	movw	r24, r20
 882:	a0 01       	movw	r20, r0
 884:	11 24       	eor	r1, r1
 886:	ff 27       	eor	r31, r31
 888:	59 1b       	sub	r21, r25
 88a:	99 f0       	breq	.+38     	; 0x8b2 <__addsf3x+0x60>
 88c:	59 3f       	cpi	r21, 0xF9	; 249
 88e:	50 f4       	brcc	.+20     	; 0x8a4 <__addsf3x+0x52>
 890:	50 3e       	cpi	r21, 0xE0	; 224
 892:	68 f1       	brcs	.+90     	; 0x8ee <__addsf3x+0x9c>
 894:	1a 16       	cp	r1, r26
 896:	f0 40       	sbci	r31, 0x00	; 0
 898:	a2 2f       	mov	r26, r18
 89a:	23 2f       	mov	r18, r19
 89c:	34 2f       	mov	r19, r20
 89e:	44 27       	eor	r20, r20
 8a0:	58 5f       	subi	r21, 0xF8	; 248
 8a2:	f3 cf       	rjmp	.-26     	; 0x88a <__addsf3x+0x38>
 8a4:	46 95       	lsr	r20
 8a6:	37 95       	ror	r19
 8a8:	27 95       	ror	r18
 8aa:	a7 95       	ror	r26
 8ac:	f0 40       	sbci	r31, 0x00	; 0
 8ae:	53 95       	inc	r21
 8b0:	c9 f7       	brne	.-14     	; 0x8a4 <__addsf3x+0x52>
 8b2:	7e f4       	brtc	.+30     	; 0x8d2 <__addsf3x+0x80>
 8b4:	1f 16       	cp	r1, r31
 8b6:	ba 0b       	sbc	r27, r26
 8b8:	62 0b       	sbc	r22, r18
 8ba:	73 0b       	sbc	r23, r19
 8bc:	84 0b       	sbc	r24, r20
 8be:	ba f0       	brmi	.+46     	; 0x8ee <__addsf3x+0x9c>
 8c0:	91 50       	subi	r25, 0x01	; 1
 8c2:	a1 f0       	breq	.+40     	; 0x8ec <__addsf3x+0x9a>
 8c4:	ff 0f       	add	r31, r31
 8c6:	bb 1f       	adc	r27, r27
 8c8:	66 1f       	adc	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	c2 f7       	brpl	.-16     	; 0x8c0 <__addsf3x+0x6e>
 8d0:	0e c0       	rjmp	.+28     	; 0x8ee <__addsf3x+0x9c>
 8d2:	ba 0f       	add	r27, r26
 8d4:	62 1f       	adc	r22, r18
 8d6:	73 1f       	adc	r23, r19
 8d8:	84 1f       	adc	r24, r20
 8da:	48 f4       	brcc	.+18     	; 0x8ee <__addsf3x+0x9c>
 8dc:	87 95       	ror	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b7 95       	ror	r27
 8e4:	f7 95       	ror	r31
 8e6:	9e 3f       	cpi	r25, 0xFE	; 254
 8e8:	08 f0       	brcs	.+2      	; 0x8ec <__addsf3x+0x9a>
 8ea:	b0 cf       	rjmp	.-160    	; 0x84c <__addsf3+0x28>
 8ec:	93 95       	inc	r25
 8ee:	88 0f       	add	r24, r24
 8f0:	08 f0       	brcs	.+2      	; 0x8f4 <__addsf3x+0xa2>
 8f2:	99 27       	eor	r25, r25
 8f4:	ee 0f       	add	r30, r30
 8f6:	97 95       	ror	r25
 8f8:	87 95       	ror	r24
 8fa:	08 95       	ret

000008fc <__divsf3>:
 8fc:	0e 94 92 04 	call	0x924	; 0x924 <__divsf3x>
 900:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_round>
 904:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_pscB>
 908:	58 f0       	brcs	.+22     	; 0x920 <__divsf3+0x24>
 90a:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_pscA>
 90e:	40 f0       	brcs	.+16     	; 0x920 <__divsf3+0x24>
 910:	29 f4       	brne	.+10     	; 0x91c <__divsf3+0x20>
 912:	5f 3f       	cpi	r21, 0xFF	; 255
 914:	29 f0       	breq	.+10     	; 0x920 <__divsf3+0x24>
 916:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_inf>
 91a:	51 11       	cpse	r21, r1
 91c:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_szero>
 920:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__fp_nan>

00000924 <__divsf3x>:
 924:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_split3>
 928:	68 f3       	brcs	.-38     	; 0x904 <__divsf3+0x8>

0000092a <__divsf3_pse>:
 92a:	99 23       	and	r25, r25
 92c:	b1 f3       	breq	.-20     	; 0x91a <__divsf3+0x1e>
 92e:	55 23       	and	r21, r21
 930:	91 f3       	breq	.-28     	; 0x916 <__divsf3+0x1a>
 932:	95 1b       	sub	r25, r21
 934:	55 0b       	sbc	r21, r21
 936:	bb 27       	eor	r27, r27
 938:	aa 27       	eor	r26, r26
 93a:	62 17       	cp	r22, r18
 93c:	73 07       	cpc	r23, r19
 93e:	84 07       	cpc	r24, r20
 940:	38 f0       	brcs	.+14     	; 0x950 <__divsf3_pse+0x26>
 942:	9f 5f       	subi	r25, 0xFF	; 255
 944:	5f 4f       	sbci	r21, 0xFF	; 255
 946:	22 0f       	add	r18, r18
 948:	33 1f       	adc	r19, r19
 94a:	44 1f       	adc	r20, r20
 94c:	aa 1f       	adc	r26, r26
 94e:	a9 f3       	breq	.-22     	; 0x93a <__divsf3_pse+0x10>
 950:	35 d0       	rcall	.+106    	; 0x9bc <__divsf3_pse+0x92>
 952:	0e 2e       	mov	r0, r30
 954:	3a f0       	brmi	.+14     	; 0x964 <__divsf3_pse+0x3a>
 956:	e0 e8       	ldi	r30, 0x80	; 128
 958:	32 d0       	rcall	.+100    	; 0x9be <__divsf3_pse+0x94>
 95a:	91 50       	subi	r25, 0x01	; 1
 95c:	50 40       	sbci	r21, 0x00	; 0
 95e:	e6 95       	lsr	r30
 960:	00 1c       	adc	r0, r0
 962:	ca f7       	brpl	.-14     	; 0x956 <__divsf3_pse+0x2c>
 964:	2b d0       	rcall	.+86     	; 0x9bc <__divsf3_pse+0x92>
 966:	fe 2f       	mov	r31, r30
 968:	29 d0       	rcall	.+82     	; 0x9bc <__divsf3_pse+0x92>
 96a:	66 0f       	add	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	bb 1f       	adc	r27, r27
 972:	26 17       	cp	r18, r22
 974:	37 07       	cpc	r19, r23
 976:	48 07       	cpc	r20, r24
 978:	ab 07       	cpc	r26, r27
 97a:	b0 e8       	ldi	r27, 0x80	; 128
 97c:	09 f0       	breq	.+2      	; 0x980 <__divsf3_pse+0x56>
 97e:	bb 0b       	sbc	r27, r27
 980:	80 2d       	mov	r24, r0
 982:	bf 01       	movw	r22, r30
 984:	ff 27       	eor	r31, r31
 986:	93 58       	subi	r25, 0x83	; 131
 988:	5f 4f       	sbci	r21, 0xFF	; 255
 98a:	3a f0       	brmi	.+14     	; 0x99a <__divsf3_pse+0x70>
 98c:	9e 3f       	cpi	r25, 0xFE	; 254
 98e:	51 05       	cpc	r21, r1
 990:	78 f0       	brcs	.+30     	; 0x9b0 <__divsf3_pse+0x86>
 992:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_inf>
 996:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_szero>
 99a:	5f 3f       	cpi	r21, 0xFF	; 255
 99c:	e4 f3       	brlt	.-8      	; 0x996 <__divsf3_pse+0x6c>
 99e:	98 3e       	cpi	r25, 0xE8	; 232
 9a0:	d4 f3       	brlt	.-12     	; 0x996 <__divsf3_pse+0x6c>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b7 95       	ror	r27
 9aa:	f7 95       	ror	r31
 9ac:	9f 5f       	subi	r25, 0xFF	; 255
 9ae:	c9 f7       	brne	.-14     	; 0x9a2 <__divsf3_pse+0x78>
 9b0:	88 0f       	add	r24, r24
 9b2:	91 1d       	adc	r25, r1
 9b4:	96 95       	lsr	r25
 9b6:	87 95       	ror	r24
 9b8:	97 f9       	bld	r25, 7
 9ba:	08 95       	ret
 9bc:	e1 e0       	ldi	r30, 0x01	; 1
 9be:	66 0f       	add	r22, r22
 9c0:	77 1f       	adc	r23, r23
 9c2:	88 1f       	adc	r24, r24
 9c4:	bb 1f       	adc	r27, r27
 9c6:	62 17       	cp	r22, r18
 9c8:	73 07       	cpc	r23, r19
 9ca:	84 07       	cpc	r24, r20
 9cc:	ba 07       	cpc	r27, r26
 9ce:	20 f0       	brcs	.+8      	; 0x9d8 <__divsf3_pse+0xae>
 9d0:	62 1b       	sub	r22, r18
 9d2:	73 0b       	sbc	r23, r19
 9d4:	84 0b       	sbc	r24, r20
 9d6:	ba 0b       	sbc	r27, r26
 9d8:	ee 1f       	adc	r30, r30
 9da:	88 f7       	brcc	.-30     	; 0x9be <__divsf3_pse+0x94>
 9dc:	e0 95       	com	r30
 9de:	08 95       	ret

000009e0 <__fixunssfsi>:
 9e0:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fp_splitA>
 9e4:	88 f0       	brcs	.+34     	; 0xa08 <__fixunssfsi+0x28>
 9e6:	9f 57       	subi	r25, 0x7F	; 127
 9e8:	98 f0       	brcs	.+38     	; 0xa10 <__fixunssfsi+0x30>
 9ea:	b9 2f       	mov	r27, r25
 9ec:	99 27       	eor	r25, r25
 9ee:	b7 51       	subi	r27, 0x17	; 23
 9f0:	b0 f0       	brcs	.+44     	; 0xa1e <__fixunssfsi+0x3e>
 9f2:	e1 f0       	breq	.+56     	; 0xa2c <__fixunssfsi+0x4c>
 9f4:	66 0f       	add	r22, r22
 9f6:	77 1f       	adc	r23, r23
 9f8:	88 1f       	adc	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	1a f0       	brmi	.+6      	; 0xa04 <__fixunssfsi+0x24>
 9fe:	ba 95       	dec	r27
 a00:	c9 f7       	brne	.-14     	; 0x9f4 <__fixunssfsi+0x14>
 a02:	14 c0       	rjmp	.+40     	; 0xa2c <__fixunssfsi+0x4c>
 a04:	b1 30       	cpi	r27, 0x01	; 1
 a06:	91 f0       	breq	.+36     	; 0xa2c <__fixunssfsi+0x4c>
 a08:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_zero>
 a0c:	b1 e0       	ldi	r27, 0x01	; 1
 a0e:	08 95       	ret
 a10:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_zero>
 a14:	67 2f       	mov	r22, r23
 a16:	78 2f       	mov	r23, r24
 a18:	88 27       	eor	r24, r24
 a1a:	b8 5f       	subi	r27, 0xF8	; 248
 a1c:	39 f0       	breq	.+14     	; 0xa2c <__fixunssfsi+0x4c>
 a1e:	b9 3f       	cpi	r27, 0xF9	; 249
 a20:	cc f3       	brlt	.-14     	; 0xa14 <__fixunssfsi+0x34>
 a22:	86 95       	lsr	r24
 a24:	77 95       	ror	r23
 a26:	67 95       	ror	r22
 a28:	b3 95       	inc	r27
 a2a:	d9 f7       	brne	.-10     	; 0xa22 <__fixunssfsi+0x42>
 a2c:	3e f4       	brtc	.+14     	; 0xa3c <__fixunssfsi+0x5c>
 a2e:	90 95       	com	r25
 a30:	80 95       	com	r24
 a32:	70 95       	com	r23
 a34:	61 95       	neg	r22
 a36:	7f 4f       	sbci	r23, 0xFF	; 255
 a38:	8f 4f       	sbci	r24, 0xFF	; 255
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	08 95       	ret

00000a3e <__floatunsisf>:
 a3e:	e8 94       	clt
 a40:	09 c0       	rjmp	.+18     	; 0xa54 <__floatsisf+0x12>

00000a42 <__floatsisf>:
 a42:	97 fb       	bst	r25, 7
 a44:	3e f4       	brtc	.+14     	; 0xa54 <__floatsisf+0x12>
 a46:	90 95       	com	r25
 a48:	80 95       	com	r24
 a4a:	70 95       	com	r23
 a4c:	61 95       	neg	r22
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	99 23       	and	r25, r25
 a56:	a9 f0       	breq	.+42     	; 0xa82 <__floatsisf+0x40>
 a58:	f9 2f       	mov	r31, r25
 a5a:	96 e9       	ldi	r25, 0x96	; 150
 a5c:	bb 27       	eor	r27, r27
 a5e:	93 95       	inc	r25
 a60:	f6 95       	lsr	r31
 a62:	87 95       	ror	r24
 a64:	77 95       	ror	r23
 a66:	67 95       	ror	r22
 a68:	b7 95       	ror	r27
 a6a:	f1 11       	cpse	r31, r1
 a6c:	f8 cf       	rjmp	.-16     	; 0xa5e <__floatsisf+0x1c>
 a6e:	fa f4       	brpl	.+62     	; 0xaae <__floatsisf+0x6c>
 a70:	bb 0f       	add	r27, r27
 a72:	11 f4       	brne	.+4      	; 0xa78 <__floatsisf+0x36>
 a74:	60 ff       	sbrs	r22, 0
 a76:	1b c0       	rjmp	.+54     	; 0xaae <__floatsisf+0x6c>
 a78:	6f 5f       	subi	r22, 0xFF	; 255
 a7a:	7f 4f       	sbci	r23, 0xFF	; 255
 a7c:	8f 4f       	sbci	r24, 0xFF	; 255
 a7e:	9f 4f       	sbci	r25, 0xFF	; 255
 a80:	16 c0       	rjmp	.+44     	; 0xaae <__floatsisf+0x6c>
 a82:	88 23       	and	r24, r24
 a84:	11 f0       	breq	.+4      	; 0xa8a <__floatsisf+0x48>
 a86:	96 e9       	ldi	r25, 0x96	; 150
 a88:	11 c0       	rjmp	.+34     	; 0xaac <__floatsisf+0x6a>
 a8a:	77 23       	and	r23, r23
 a8c:	21 f0       	breq	.+8      	; 0xa96 <__floatsisf+0x54>
 a8e:	9e e8       	ldi	r25, 0x8E	; 142
 a90:	87 2f       	mov	r24, r23
 a92:	76 2f       	mov	r23, r22
 a94:	05 c0       	rjmp	.+10     	; 0xaa0 <__floatsisf+0x5e>
 a96:	66 23       	and	r22, r22
 a98:	71 f0       	breq	.+28     	; 0xab6 <__floatsisf+0x74>
 a9a:	96 e8       	ldi	r25, 0x86	; 134
 a9c:	86 2f       	mov	r24, r22
 a9e:	70 e0       	ldi	r23, 0x00	; 0
 aa0:	60 e0       	ldi	r22, 0x00	; 0
 aa2:	2a f0       	brmi	.+10     	; 0xaae <__floatsisf+0x6c>
 aa4:	9a 95       	dec	r25
 aa6:	66 0f       	add	r22, r22
 aa8:	77 1f       	adc	r23, r23
 aaa:	88 1f       	adc	r24, r24
 aac:	da f7       	brpl	.-10     	; 0xaa4 <__floatsisf+0x62>
 aae:	88 0f       	add	r24, r24
 ab0:	96 95       	lsr	r25
 ab2:	87 95       	ror	r24
 ab4:	97 f9       	bld	r25, 7
 ab6:	08 95       	ret

00000ab8 <__fp_inf>:
 ab8:	97 f9       	bld	r25, 7
 aba:	9f 67       	ori	r25, 0x7F	; 127
 abc:	80 e8       	ldi	r24, 0x80	; 128
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	08 95       	ret

00000ac4 <__fp_nan>:
 ac4:	9f ef       	ldi	r25, 0xFF	; 255
 ac6:	80 ec       	ldi	r24, 0xC0	; 192
 ac8:	08 95       	ret

00000aca <__fp_pscA>:
 aca:	00 24       	eor	r0, r0
 acc:	0a 94       	dec	r0
 ace:	16 16       	cp	r1, r22
 ad0:	17 06       	cpc	r1, r23
 ad2:	18 06       	cpc	r1, r24
 ad4:	09 06       	cpc	r0, r25
 ad6:	08 95       	ret

00000ad8 <__fp_pscB>:
 ad8:	00 24       	eor	r0, r0
 ada:	0a 94       	dec	r0
 adc:	12 16       	cp	r1, r18
 ade:	13 06       	cpc	r1, r19
 ae0:	14 06       	cpc	r1, r20
 ae2:	05 06       	cpc	r0, r21
 ae4:	08 95       	ret

00000ae6 <__fp_round>:
 ae6:	09 2e       	mov	r0, r25
 ae8:	03 94       	inc	r0
 aea:	00 0c       	add	r0, r0
 aec:	11 f4       	brne	.+4      	; 0xaf2 <__fp_round+0xc>
 aee:	88 23       	and	r24, r24
 af0:	52 f0       	brmi	.+20     	; 0xb06 <__fp_round+0x20>
 af2:	bb 0f       	add	r27, r27
 af4:	40 f4       	brcc	.+16     	; 0xb06 <__fp_round+0x20>
 af6:	bf 2b       	or	r27, r31
 af8:	11 f4       	brne	.+4      	; 0xafe <__fp_round+0x18>
 afa:	60 ff       	sbrs	r22, 0
 afc:	04 c0       	rjmp	.+8      	; 0xb06 <__fp_round+0x20>
 afe:	6f 5f       	subi	r22, 0xFF	; 255
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	08 95       	ret

00000b08 <__fp_split3>:
 b08:	57 fd       	sbrc	r21, 7
 b0a:	90 58       	subi	r25, 0x80	; 128
 b0c:	44 0f       	add	r20, r20
 b0e:	55 1f       	adc	r21, r21
 b10:	59 f0       	breq	.+22     	; 0xb28 <__fp_splitA+0x10>
 b12:	5f 3f       	cpi	r21, 0xFF	; 255
 b14:	71 f0       	breq	.+28     	; 0xb32 <__fp_splitA+0x1a>
 b16:	47 95       	ror	r20

00000b18 <__fp_splitA>:
 b18:	88 0f       	add	r24, r24
 b1a:	97 fb       	bst	r25, 7
 b1c:	99 1f       	adc	r25, r25
 b1e:	61 f0       	breq	.+24     	; 0xb38 <__fp_splitA+0x20>
 b20:	9f 3f       	cpi	r25, 0xFF	; 255
 b22:	79 f0       	breq	.+30     	; 0xb42 <__fp_splitA+0x2a>
 b24:	87 95       	ror	r24
 b26:	08 95       	ret
 b28:	12 16       	cp	r1, r18
 b2a:	13 06       	cpc	r1, r19
 b2c:	14 06       	cpc	r1, r20
 b2e:	55 1f       	adc	r21, r21
 b30:	f2 cf       	rjmp	.-28     	; 0xb16 <__fp_split3+0xe>
 b32:	46 95       	lsr	r20
 b34:	f1 df       	rcall	.-30     	; 0xb18 <__fp_splitA>
 b36:	08 c0       	rjmp	.+16     	; 0xb48 <__fp_splitA+0x30>
 b38:	16 16       	cp	r1, r22
 b3a:	17 06       	cpc	r1, r23
 b3c:	18 06       	cpc	r1, r24
 b3e:	99 1f       	adc	r25, r25
 b40:	f1 cf       	rjmp	.-30     	; 0xb24 <__fp_splitA+0xc>
 b42:	86 95       	lsr	r24
 b44:	71 05       	cpc	r23, r1
 b46:	61 05       	cpc	r22, r1
 b48:	08 94       	sec
 b4a:	08 95       	ret

00000b4c <__fp_zero>:
 b4c:	e8 94       	clt

00000b4e <__fp_szero>:
 b4e:	bb 27       	eor	r27, r27
 b50:	66 27       	eor	r22, r22
 b52:	77 27       	eor	r23, r23
 b54:	cb 01       	movw	r24, r22
 b56:	97 f9       	bld	r25, 7
 b58:	08 95       	ret

00000b5a <__mulsf3>:
 b5a:	0e 94 c0 05 	call	0xb80	; 0xb80 <__mulsf3x>
 b5e:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_round>
 b62:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_pscA>
 b66:	38 f0       	brcs	.+14     	; 0xb76 <__mulsf3+0x1c>
 b68:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_pscB>
 b6c:	20 f0       	brcs	.+8      	; 0xb76 <__mulsf3+0x1c>
 b6e:	95 23       	and	r25, r21
 b70:	11 f0       	breq	.+4      	; 0xb76 <__mulsf3+0x1c>
 b72:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_inf>
 b76:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__fp_nan>
 b7a:	11 24       	eor	r1, r1
 b7c:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_szero>

00000b80 <__mulsf3x>:
 b80:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_split3>
 b84:	70 f3       	brcs	.-36     	; 0xb62 <__mulsf3+0x8>

00000b86 <__mulsf3_pse>:
 b86:	95 9f       	mul	r25, r21
 b88:	c1 f3       	breq	.-16     	; 0xb7a <__mulsf3+0x20>
 b8a:	95 0f       	add	r25, r21
 b8c:	50 e0       	ldi	r21, 0x00	; 0
 b8e:	55 1f       	adc	r21, r21
 b90:	62 9f       	mul	r22, r18
 b92:	f0 01       	movw	r30, r0
 b94:	72 9f       	mul	r23, r18
 b96:	bb 27       	eor	r27, r27
 b98:	f0 0d       	add	r31, r0
 b9a:	b1 1d       	adc	r27, r1
 b9c:	63 9f       	mul	r22, r19
 b9e:	aa 27       	eor	r26, r26
 ba0:	f0 0d       	add	r31, r0
 ba2:	b1 1d       	adc	r27, r1
 ba4:	aa 1f       	adc	r26, r26
 ba6:	64 9f       	mul	r22, r20
 ba8:	66 27       	eor	r22, r22
 baa:	b0 0d       	add	r27, r0
 bac:	a1 1d       	adc	r26, r1
 bae:	66 1f       	adc	r22, r22
 bb0:	82 9f       	mul	r24, r18
 bb2:	22 27       	eor	r18, r18
 bb4:	b0 0d       	add	r27, r0
 bb6:	a1 1d       	adc	r26, r1
 bb8:	62 1f       	adc	r22, r18
 bba:	73 9f       	mul	r23, r19
 bbc:	b0 0d       	add	r27, r0
 bbe:	a1 1d       	adc	r26, r1
 bc0:	62 1f       	adc	r22, r18
 bc2:	83 9f       	mul	r24, r19
 bc4:	a0 0d       	add	r26, r0
 bc6:	61 1d       	adc	r22, r1
 bc8:	22 1f       	adc	r18, r18
 bca:	74 9f       	mul	r23, r20
 bcc:	33 27       	eor	r19, r19
 bce:	a0 0d       	add	r26, r0
 bd0:	61 1d       	adc	r22, r1
 bd2:	23 1f       	adc	r18, r19
 bd4:	84 9f       	mul	r24, r20
 bd6:	60 0d       	add	r22, r0
 bd8:	21 1d       	adc	r18, r1
 bda:	82 2f       	mov	r24, r18
 bdc:	76 2f       	mov	r23, r22
 bde:	6a 2f       	mov	r22, r26
 be0:	11 24       	eor	r1, r1
 be2:	9f 57       	subi	r25, 0x7F	; 127
 be4:	50 40       	sbci	r21, 0x00	; 0
 be6:	9a f0       	brmi	.+38     	; 0xc0e <__mulsf3_pse+0x88>
 be8:	f1 f0       	breq	.+60     	; 0xc26 <__mulsf3_pse+0xa0>
 bea:	88 23       	and	r24, r24
 bec:	4a f0       	brmi	.+18     	; 0xc00 <__mulsf3_pse+0x7a>
 bee:	ee 0f       	add	r30, r30
 bf0:	ff 1f       	adc	r31, r31
 bf2:	bb 1f       	adc	r27, r27
 bf4:	66 1f       	adc	r22, r22
 bf6:	77 1f       	adc	r23, r23
 bf8:	88 1f       	adc	r24, r24
 bfa:	91 50       	subi	r25, 0x01	; 1
 bfc:	50 40       	sbci	r21, 0x00	; 0
 bfe:	a9 f7       	brne	.-22     	; 0xbea <__mulsf3_pse+0x64>
 c00:	9e 3f       	cpi	r25, 0xFE	; 254
 c02:	51 05       	cpc	r21, r1
 c04:	80 f0       	brcs	.+32     	; 0xc26 <__mulsf3_pse+0xa0>
 c06:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_inf>
 c0a:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_szero>
 c0e:	5f 3f       	cpi	r21, 0xFF	; 255
 c10:	e4 f3       	brlt	.-8      	; 0xc0a <__mulsf3_pse+0x84>
 c12:	98 3e       	cpi	r25, 0xE8	; 232
 c14:	d4 f3       	brlt	.-12     	; 0xc0a <__mulsf3_pse+0x84>
 c16:	86 95       	lsr	r24
 c18:	77 95       	ror	r23
 c1a:	67 95       	ror	r22
 c1c:	b7 95       	ror	r27
 c1e:	f7 95       	ror	r31
 c20:	e7 95       	ror	r30
 c22:	9f 5f       	subi	r25, 0xFF	; 255
 c24:	c1 f7       	brne	.-16     	; 0xc16 <__mulsf3_pse+0x90>
 c26:	fe 2b       	or	r31, r30
 c28:	88 0f       	add	r24, r24
 c2a:	91 1d       	adc	r25, r1
 c2c:	96 95       	lsr	r25
 c2e:	87 95       	ror	r24
 c30:	97 f9       	bld	r25, 7
 c32:	08 95       	ret

00000c34 <__udivmodsi4>:
 c34:	a1 e2       	ldi	r26, 0x21	; 33
 c36:	1a 2e       	mov	r1, r26
 c38:	aa 1b       	sub	r26, r26
 c3a:	bb 1b       	sub	r27, r27
 c3c:	fd 01       	movw	r30, r26
 c3e:	0d c0       	rjmp	.+26     	; 0xc5a <__udivmodsi4_ep>

00000c40 <__udivmodsi4_loop>:
 c40:	aa 1f       	adc	r26, r26
 c42:	bb 1f       	adc	r27, r27
 c44:	ee 1f       	adc	r30, r30
 c46:	ff 1f       	adc	r31, r31
 c48:	a2 17       	cp	r26, r18
 c4a:	b3 07       	cpc	r27, r19
 c4c:	e4 07       	cpc	r30, r20
 c4e:	f5 07       	cpc	r31, r21
 c50:	20 f0       	brcs	.+8      	; 0xc5a <__udivmodsi4_ep>
 c52:	a2 1b       	sub	r26, r18
 c54:	b3 0b       	sbc	r27, r19
 c56:	e4 0b       	sbc	r30, r20
 c58:	f5 0b       	sbc	r31, r21

00000c5a <__udivmodsi4_ep>:
 c5a:	66 1f       	adc	r22, r22
 c5c:	77 1f       	adc	r23, r23
 c5e:	88 1f       	adc	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	1a 94       	dec	r1
 c64:	69 f7       	brne	.-38     	; 0xc40 <__udivmodsi4_loop>
 c66:	60 95       	com	r22
 c68:	70 95       	com	r23
 c6a:	80 95       	com	r24
 c6c:	90 95       	com	r25
 c6e:	9b 01       	movw	r18, r22
 c70:	ac 01       	movw	r20, r24
 c72:	bd 01       	movw	r22, r26
 c74:	cf 01       	movw	r24, r30
 c76:	08 95       	ret

00000c78 <__tablejump2__>:
 c78:	ee 0f       	add	r30, r30
 c7a:	ff 1f       	adc	r31, r31
 c7c:	05 90       	lpm	r0, Z+
 c7e:	f4 91       	lpm	r31, Z
 c80:	e0 2d       	mov	r30, r0
 c82:	09 94       	ijmp

00000c84 <__muluhisi3>:
 c84:	0e 94 96 06 	call	0xd2c	; 0xd2c <__umulhisi3>
 c88:	a5 9f       	mul	r26, r21
 c8a:	90 0d       	add	r25, r0
 c8c:	b4 9f       	mul	r27, r20
 c8e:	90 0d       	add	r25, r0
 c90:	a4 9f       	mul	r26, r20
 c92:	80 0d       	add	r24, r0
 c94:	91 1d       	adc	r25, r1
 c96:	11 24       	eor	r1, r1
 c98:	08 95       	ret

00000c9a <__umulsidi3>:
 c9a:	e8 94       	clt

00000c9c <__umulsidi3_helper>:
 c9c:	df 93       	push	r29
 c9e:	cf 93       	push	r28
 ca0:	fc 01       	movw	r30, r24
 ca2:	db 01       	movw	r26, r22
 ca4:	0e 94 96 06 	call	0xd2c	; 0xd2c <__umulhisi3>
 ca8:	7f 93       	push	r23
 caa:	6f 93       	push	r22
 cac:	e9 01       	movw	r28, r18
 cae:	9a 01       	movw	r18, r20
 cb0:	ac 01       	movw	r20, r24
 cb2:	bf 93       	push	r27
 cb4:	af 93       	push	r26
 cb6:	3f 93       	push	r19
 cb8:	2f 93       	push	r18
 cba:	df 01       	movw	r26, r30
 cbc:	0e 94 96 06 	call	0xd2c	; 0xd2c <__umulhisi3>
 cc0:	26 f4       	brtc	.+8      	; 0xcca <__umulsidi3_helper+0x2e>
 cc2:	6c 1b       	sub	r22, r28
 cc4:	7d 0b       	sbc	r23, r29
 cc6:	82 0b       	sbc	r24, r18
 cc8:	93 0b       	sbc	r25, r19
 cca:	9e 01       	movw	r18, r28
 ccc:	eb 01       	movw	r28, r22
 cce:	fc 01       	movw	r30, r24
 cd0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__muldi3_6>
 cd4:	af 91       	pop	r26
 cd6:	bf 91       	pop	r27
 cd8:	2f 91       	pop	r18
 cda:	3f 91       	pop	r19
 cdc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__muldi3_6>
 ce0:	be 01       	movw	r22, r28
 ce2:	cf 01       	movw	r24, r30
 ce4:	f9 01       	movw	r30, r18
 ce6:	2f 91       	pop	r18
 ce8:	3f 91       	pop	r19
 cea:	cf 91       	pop	r28
 cec:	df 91       	pop	r29
 cee:	08 95       	ret

00000cf0 <__ashrdi3>:
 cf0:	97 fb       	bst	r25, 7
 cf2:	10 f8       	bld	r1, 0

00000cf4 <__lshrdi3>:
 cf4:	16 94       	lsr	r1
 cf6:	00 08       	sbc	r0, r0
 cf8:	0f 93       	push	r16
 cfa:	08 30       	cpi	r16, 0x08	; 8
 cfc:	98 f0       	brcs	.+38     	; 0xd24 <__lshrdi3+0x30>
 cfe:	08 50       	subi	r16, 0x08	; 8
 d00:	23 2f       	mov	r18, r19
 d02:	34 2f       	mov	r19, r20
 d04:	45 2f       	mov	r20, r21
 d06:	56 2f       	mov	r21, r22
 d08:	67 2f       	mov	r22, r23
 d0a:	78 2f       	mov	r23, r24
 d0c:	89 2f       	mov	r24, r25
 d0e:	90 2d       	mov	r25, r0
 d10:	f4 cf       	rjmp	.-24     	; 0xcfa <__lshrdi3+0x6>
 d12:	05 94       	asr	r0
 d14:	97 95       	ror	r25
 d16:	87 95       	ror	r24
 d18:	77 95       	ror	r23
 d1a:	67 95       	ror	r22
 d1c:	57 95       	ror	r21
 d1e:	47 95       	ror	r20
 d20:	37 95       	ror	r19
 d22:	27 95       	ror	r18
 d24:	0a 95       	dec	r16
 d26:	aa f7       	brpl	.-22     	; 0xd12 <__lshrdi3+0x1e>
 d28:	0f 91       	pop	r16
 d2a:	08 95       	ret

00000d2c <__umulhisi3>:
 d2c:	a2 9f       	mul	r26, r18
 d2e:	b0 01       	movw	r22, r0
 d30:	b3 9f       	mul	r27, r19
 d32:	c0 01       	movw	r24, r0
 d34:	a3 9f       	mul	r26, r19
 d36:	70 0d       	add	r23, r0
 d38:	81 1d       	adc	r24, r1
 d3a:	11 24       	eor	r1, r1
 d3c:	91 1d       	adc	r25, r1
 d3e:	b2 9f       	mul	r27, r18
 d40:	70 0d       	add	r23, r0
 d42:	81 1d       	adc	r24, r1
 d44:	11 24       	eor	r1, r1
 d46:	91 1d       	adc	r25, r1
 d48:	08 95       	ret

00000d4a <__muldi3_6>:
 d4a:	0e 94 96 06 	call	0xd2c	; 0xd2c <__umulhisi3>
 d4e:	46 0f       	add	r20, r22
 d50:	57 1f       	adc	r21, r23
 d52:	c8 1f       	adc	r28, r24
 d54:	d9 1f       	adc	r29, r25
 d56:	08 f4       	brcc	.+2      	; 0xd5a <__muldi3_6+0x10>
 d58:	31 96       	adiw	r30, 0x01	; 1
 d5a:	08 95       	ret

00000d5c <ccp_write_io>:
 d5c:	dc 01       	movw	r26, r24
 d5e:	28 ed       	ldi	r18, 0xD8	; 216
 d60:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
 d64:	6c 93       	st	X, r22
 d66:	08 95       	ret

00000d68 <_exit>:
 d68:	f8 94       	cli

00000d6a <__stop_program>:
 d6a:	ff cf       	rjmp	.-2      	; 0xd6a <__stop_program>
