
AVR64DD32-TLE9201SG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00806000  00806000  00000dee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00806000  00806000  00000dee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000e60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004483  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000285e  00000000  00000000  00005453  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb3  00000000  00000000  00007cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00008b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c3d  00000000  00000000  00008e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064c  00000000  00000000  0000aa81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000b0cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  10:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  14:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  18:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  20:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  28:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  30:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  38:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  44:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  4c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  50:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  54:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  58:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  5c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  60:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  68:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  6c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  70:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  7c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  80:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  84:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  8c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  90:	f3 00       	.word	0x00f3	; ????
  92:	cb 00       	.word	0x00cb	; ????
  94:	cb 00       	.word	0x00cb	; ????
  96:	cb 00       	.word	0x00cb	; ????
  98:	d0 00       	.word	0x00d0	; ????
  9a:	cb 00       	.word	0x00cb	; ????
  9c:	cb 00       	.word	0x00cb	; ????
  9e:	cb 00       	.word	0x00cb	; ????
  a0:	d5 00       	.word	0x00d5	; ????
  a2:	cb 00       	.word	0x00cb	; ????
  a4:	cb 00       	.word	0x00cb	; ????
  a6:	cb 00       	.word	0x00cb	; ????
  a8:	cb 00       	.word	0x00cb	; ????
  aa:	cb 00       	.word	0x00cb	; ????
  ac:	cb 00       	.word	0x00cb	; ????
  ae:	cb 00       	.word	0x00cb	; ????
  b0:	cb 00       	.word	0x00cb	; ????
  b2:	cb 00       	.word	0x00cb	; ????
  b4:	cb 00       	.word	0x00cb	; ????
  b6:	cb 00       	.word	0x00cb	; ????
  b8:	da 00       	.word	0x00da	; ????
  ba:	cb 00       	.word	0x00cb	; ????
  bc:	cb 00       	.word	0x00cb	; ????
  be:	cb 00       	.word	0x00cb	; ????
  c0:	df 00       	.word	0x00df	; ????
  c2:	cb 00       	.word	0x00cb	; ????
  c4:	cb 00       	.word	0x00cb	; ????
  c6:	cb 00       	.word	0x00cb	; ????
  c8:	e4 00       	.word	0x00e4	; ????
  ca:	cb 00       	.word	0x00cb	; ????
  cc:	cb 00       	.word	0x00cb	; ????
  ce:	cb 00       	.word	0x00cb	; ????
  d0:	e9 00       	.word	0x00e9	; ????
  d2:	cb 00       	.word	0x00cb	; ????
  d4:	cb 00       	.word	0x00cb	; ????
  d6:	cb 00       	.word	0x00cb	; ????
  d8:	ee 00       	.word	0x00ee	; ????
  da:	10 01       	movw	r2, r0
  dc:	7d 01       	movw	r14, r26
  de:	15 01       	movw	r2, r10
  e0:	7d 01       	movw	r14, r26
  e2:	36 01       	movw	r6, r12
  e4:	7d 01       	movw	r14, r26
  e6:	51 01       	movw	r10, r2
  e8:	7d 01       	movw	r14, r26
  ea:	63 01       	movw	r12, r6
  ec:	7d 01       	movw	r14, r26
  ee:	75 01       	movw	r14, r10
  f0:	7d 01       	movw	r14, r26
  f2:	7d 01       	movw	r14, r26
  f4:	7d 01       	movw	r14, r26
  f6:	7d 01       	movw	r14, r26
  f8:	7d 01       	movw	r14, r26
  fa:	1e 01       	movw	r2, r28
  fc:	7d 01       	movw	r14, r26
  fe:	3f 01       	movw	r6, r30
 100:	7d 01       	movw	r14, r26
 102:	48 01       	movw	r8, r16
 104:	7d 01       	movw	r14, r26
 106:	5a 01       	movw	r10, r20
 108:	7d 01       	movw	r14, r26
 10a:	6c 01       	movw	r12, r24

0000010c <__ctors_end>:
 10c:	11 24       	eor	r1, r1
 10e:	1f be       	out	0x3f, r1	; 63
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df e7       	ldi	r29, 0x7F	; 127
 116:	de bf       	out	0x3e, r29	; 62

00000118 <__do_clear_bss>:
 118:	20 e6       	ldi	r18, 0x60	; 96
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b0 e6       	ldi	r27, 0x60	; 96
 11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
 120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
 122:	ab 31       	cpi	r26, 0x1B	; 27
 124:	b2 07       	cpc	r27, r18
 126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
 128:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
 12c:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <_exit>

00000130 <__bad_interrupt>:
 130:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000134 <CLOCK_INHF_clock_init>:
 * @details Configures the internal oscillator with a frequency of 24 MHz. 
 *          Optionally enables clock output on pin PA7. A prescaler can be configured if needed.
 */
void CLOCK_INHF_clock_init() {
    /* Enable internal oscillator with a frequency of 24 MHz */
    ccp_write_io((uint8_t *) &CLKCTRL.OSCHFCTRLA, CLKCTRL_FRQSEL_24M_gc); 
 134:	64 e2       	ldi	r22, 0x24	; 36
 136:	88 e6       	ldi	r24, 0x68	; 104
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ccp_write_io>

    /* Set main clock prescaler (uncomment if required) */
    // ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);

    /* Set main clock to use the internal oscillator as the source */
    ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, 
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ccp_write_io>
                 CLKCTRL_CLKSEL_OSCHF_gc /* | CLKCTRL_CLKOUT_bm */); 
    // Uncomment | CLKCTRL_CLKOUT_bm if clock output on PA7 is required

    /* Wait for oscillator change to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
 148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 14c:	80 fd       	sbrc	r24, 0
 14e:	fc cf       	rjmp	.-8      	; 0x148 <CLOCK_INHF_clock_init+0x14>
}
 150:	08 95       	ret

00000152 <PLL_init>:
 * 
 * @note Ensure the input frequency does not exceed the PLL's maximum limit.
 */
void PLL_init() {
    /* Configure PLL with a multiplication factor of 2 */
    ccp_write_io((uint8_t *) &CLKCTRL.PLLCTRLA, CLKCTRL_MULFAC_2x_gc); 
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ccp_write_io>

    /* Wait for PLL configuration to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm) {};
 15c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 160:	85 fd       	sbrc	r24, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <PLL_init+0xa>
}
 164:	08 95       	ret

00000166 <CLOCK_read>:
 * @details Determines the base clock frequency based on oscillator and prescaler settings. 
 *          The maximum frequency is capped at 48 MHz for PLL configurations.
 * 
 * @return uint32_t The current clock frequency in Hz.
 */
uint32_t CLOCK_read() {
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
 17a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
 17e:	e8 2f       	mov	r30, r24
 180:	ec 73       	andi	r30, 0x3C	; 60
 182:	8e 2f       	mov	r24, r30
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	85 32       	cpi	r24, 0x25	; 37
 188:	91 05       	cpc	r25, r1
 18a:	28 f4       	brcc	.+10     	; 0x196 <CLOCK_read+0x30>
 18c:	fc 01       	movw	r30, r24
 18e:	e8 5b       	subi	r30, 0xB8	; 184
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__tablejump2__>
 *          The maximum frequency is capped at 48 MHz for PLL configurations.
 * 
 * @return uint32_t The current clock frequency in Hz.
 */
uint32_t CLOCK_read() {
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	79 e0       	ldi	r23, 0x09	; 9
 19a:	8d e3       	ldi	r24, 0x3D	; 61
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	27 c0       	rjmp	.+78     	; 0x1ee <CLOCK_read+0x88>

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
        case CLKCTRL_FRQSEL_1M_gc: base_freq = 1000000; break;
        case CLKCTRL_FRQSEL_2M_gc: base_freq = 2000000; break;
 1a0:	60 e8       	ldi	r22, 0x80	; 128
 1a2:	74 e8       	ldi	r23, 0x84	; 132
 1a4:	8e e1       	ldi	r24, 0x1E	; 30
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	22 c0       	rjmp	.+68     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_3M_gc: base_freq = 3000000; break;
 1aa:	60 ec       	ldi	r22, 0xC0	; 192
 1ac:	76 ec       	ldi	r23, 0xC6	; 198
 1ae:	8d e2       	ldi	r24, 0x2D	; 45
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	1d c0       	rjmp	.+58     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_8M_gc: base_freq = 8000000; break;
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	72 e1       	ldi	r23, 0x12	; 18
 1b8:	8a e7       	ldi	r24, 0x7A	; 122
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	18 c0       	rjmp	.+48     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_12M_gc: base_freq = 12000000; break;
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	7b e1       	ldi	r23, 0x1B	; 27
 1c2:	87 eb       	ldi	r24, 0xB7	; 183
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_16M_gc: base_freq = 16000000; break;
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	74 e2       	ldi	r23, 0x24	; 36
 1cc:	84 ef       	ldi	r24, 0xF4	; 244
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e c0       	rjmp	.+28     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_20M_gc: base_freq = 20000000; break;
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	7d e2       	ldi	r23, 0x2D	; 45
 1d6:	81 e3       	ldi	r24, 0x31	; 49
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <CLOCK_read+0x88>
        case CLKCTRL_FRQSEL_24M_gc: base_freq = 24000000; break;
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	76 e3       	ldi	r23, 0x36	; 54
 1e0:	8e e6       	ldi	r24, 0x6E	; 110
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <CLOCK_read+0x88>
uint32_t CLOCK_read() {
    uint32_t base_freq = 4000000; ///< Default F_CPU. Adjust if using EXCLK or PLL clock source is EXCLK as well.

    // Determine the base clock frequency based on OSCHFCTRLA settings
    switch (CLKCTRL.OSCHFCTRLA & CLKCTRL_FRQSEL_gm) {
        case CLKCTRL_FRQSEL_1M_gc: base_freq = 1000000; break;
 1e6:	60 e4       	ldi	r22, 0x40	; 64
 1e8:	72 e4       	ldi	r23, 0x42	; 66
 1ea:	8f e0       	ldi	r24, 0x0F	; 15
 1ec:	90 e0       	ldi	r25, 0x00	; 0
        case CLKCTRL_FRQSEL_20M_gc: base_freq = 20000000; break;
        case CLKCTRL_FRQSEL_24M_gc: base_freq = 24000000; break;
    }

    // Adjust base frequency for peripheral clock prescaler
    if ((TCD0.CTRLA & TCD_CLKSEL_gm) == TCD_CLKSEL_CLKPER_gc) {
 1ee:	20 91 80 0b 	lds	r18, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 1f2:	20 76       	andi	r18, 0x60	; 96
 1f4:	20 36       	cpi	r18, 0x60	; 96
 1f6:	09 f0       	breq	.+2      	; 0x1fa <CLOCK_read+0x94>
 1f8:	80 c0       	rjmp	.+256    	; 0x2fa <CLOCK_read+0x194>
        if (CLKCTRL.MCLKCTRLB & CLKCTRL_PEN_bm) {
 1fa:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
 1fe:	20 ff       	sbrs	r18, 0
 200:	7c c0       	rjmp	.+248    	; 0x2fa <CLOCK_read+0x194>
            switch (CLKCTRL.MCLKCTRLB & CLKCTRL_PDIV_gm) {
 202:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
 206:	e2 2f       	mov	r30, r18
 208:	ee 71       	andi	r30, 0x1E	; 30
 20a:	0e 2f       	mov	r16, r30
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	09 31       	cpi	r16, 0x19	; 25
 210:	11 05       	cpc	r17, r1
 212:	08 f0       	brcs	.+2      	; 0x216 <CLOCK_read+0xb0>
 214:	72 c0       	rjmp	.+228    	; 0x2fa <CLOCK_read+0x194>
 216:	f8 01       	movw	r30, r16
 218:	e3 59       	subi	r30, 0x93	; 147
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__tablejump2__>
                case CLKCTRL_PDIV_2X_gc:  base_freq /= 2; break;
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	77 95       	ror	r23
 226:	67 95       	ror	r22
 228:	68 c0       	rjmp	.+208    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_4X_gc:  base_freq /= 4; break;
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	77 95       	ror	r23
 230:	67 95       	ror	r22
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	77 95       	ror	r23
 238:	67 95       	ror	r22
 23a:	5f c0       	rjmp	.+190    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_6X_gc:  base_freq /= 6; break;
 23c:	2b ea       	ldi	r18, 0xAB	; 171
 23e:	3a ea       	ldi	r19, 0xAA	; 170
 240:	4a ea       	ldi	r20, 0xAA	; 170
 242:	5a ea       	ldi	r21, 0xAA	; 170
 244:	0e 94 54 06 	call	0xca8	; 0xca8 <__umulsidi3>
 248:	00 e2       	ldi	r16, 0x20	; 32
 24a:	0e 94 81 06 	call	0xd02	; 0xd02 <__lshrdi3>
 24e:	82 2e       	mov	r8, r18
 250:	93 2e       	mov	r9, r19
 252:	a4 2e       	mov	r10, r20
 254:	b5 2e       	mov	r11, r21
 256:	c5 01       	movw	r24, r10
 258:	b4 01       	movw	r22, r8
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	77 95       	ror	r23
 260:	67 95       	ror	r22
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	77 95       	ror	r23
 268:	67 95       	ror	r22
 26a:	47 c0       	rjmp	.+142    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_8X_gc:  base_freq /= 8; break;
 26c:	68 94       	set
 26e:	12 f8       	bld	r1, 2
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	77 95       	ror	r23
 276:	67 95       	ror	r22
 278:	16 94       	lsr	r1
 27a:	d1 f7       	brne	.-12     	; 0x270 <CLOCK_read+0x10a>
 27c:	3e c0       	rjmp	.+124    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_10X_gc: base_freq /= 10; break;
 27e:	2a e0       	ldi	r18, 0x0A	; 10
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	0e 94 21 06 	call	0xc42	; 0xc42 <__udivmodsi4>
 28a:	ca 01       	movw	r24, r20
 28c:	b9 01       	movw	r22, r18
 28e:	35 c0       	rjmp	.+106    	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_12X_gc: base_freq /= 12; break;
 290:	2c e0       	ldi	r18, 0x0C	; 12
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	0e 94 21 06 	call	0xc42	; 0xc42 <__udivmodsi4>
 29c:	ca 01       	movw	r24, r20
 29e:	b9 01       	movw	r22, r18
 2a0:	2c c0       	rjmp	.+88     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_16X_gc: base_freq /= 16; break;
 2a2:	68 94       	set
 2a4:	13 f8       	bld	r1, 3
 2a6:	96 95       	lsr	r25
 2a8:	87 95       	ror	r24
 2aa:	77 95       	ror	r23
 2ac:	67 95       	ror	r22
 2ae:	16 94       	lsr	r1
 2b0:	d1 f7       	brne	.-12     	; 0x2a6 <CLOCK_read+0x140>
 2b2:	23 c0       	rjmp	.+70     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_24X_gc: base_freq /= 24; break;
 2b4:	28 e1       	ldi	r18, 0x18	; 24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	0e 94 21 06 	call	0xc42	; 0xc42 <__udivmodsi4>
 2c0:	ca 01       	movw	r24, r20
 2c2:	b9 01       	movw	r22, r18
 2c4:	1a c0       	rjmp	.+52     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_32X_gc: base_freq /= 32; break;
 2c6:	68 94       	set
 2c8:	14 f8       	bld	r1, 4
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	77 95       	ror	r23
 2d0:	67 95       	ror	r22
 2d2:	16 94       	lsr	r1
 2d4:	d1 f7       	brne	.-12     	; 0x2ca <CLOCK_read+0x164>
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_48X_gc: base_freq /= 48; break;
 2d8:	20 e3       	ldi	r18, 0x30	; 48
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 21 06 	call	0xc42	; 0xc42 <__udivmodsi4>
 2e4:	ca 01       	movw	r24, r20
 2e6:	b9 01       	movw	r22, r18
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <CLOCK_read+0x194>
                case CLKCTRL_PDIV_64X_gc: base_freq /= 64; break;
 2ea:	68 94       	set
 2ec:	15 f8       	bld	r1, 5
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	77 95       	ror	r23
 2f4:	67 95       	ror	r22
 2f6:	16 94       	lsr	r1
 2f8:	d1 f7       	brne	.-12     	; 0x2ee <CLOCK_read+0x188>
            }
        }
    }

    // Adjust base frequency for PLL
    if ((TCD0.CTRLA & TCD_CLKSEL_gm) == TCD_CLKSEL_PLL_gc) {
 2fa:	20 91 80 0b 	lds	r18, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 2fe:	20 76       	andi	r18, 0x60	; 96
 300:	20 32       	cpi	r18, 0x20	; 32
 302:	49 f5       	brne	.+82     	; 0x356 <CLOCK_read+0x1f0>
        if ((CLKCTRL.PLLCTRLA & CLKCTRL_PLLCTRLA) == CLKCTRL_MULFAC_2x_gc) {
 304:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 308:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 30c:	23 23       	and	r18, r19
 30e:	21 30       	cpi	r18, 0x01	; 1
 310:	29 f4       	brne	.+10     	; 0x31c <CLOCK_read+0x1b6>
            base_freq *= 2;
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	11 c0       	rjmp	.+34     	; 0x33e <CLOCK_read+0x1d8>
        } else if ((CLKCTRL.PLLCTRLA & CLKCTRL_PLLCTRLA) == CLKCTRL_MULFAC_3x_gc) {
 31c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 320:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 324:	23 23       	and	r18, r19
 326:	22 30       	cpi	r18, 0x02	; 2
 328:	51 f4       	brne	.+20     	; 0x33e <CLOCK_read+0x1d8>
            base_freq *= 3;
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
 32e:	cc 0c       	add	r12, r12
 330:	dd 1c       	adc	r13, r13
 332:	ee 1c       	adc	r14, r14
 334:	ff 1c       	adc	r15, r15
 336:	6c 0d       	add	r22, r12
 338:	7d 1d       	adc	r23, r13
 33a:	8e 1d       	adc	r24, r14
 33c:	9f 1d       	adc	r25, r15
        }

        if (base_freq > 48000000) {
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	2c e6       	ldi	r18, 0x6C	; 108
 342:	72 07       	cpc	r23, r18
 344:	2c ed       	ldi	r18, 0xDC	; 220
 346:	82 07       	cpc	r24, r18
 348:	22 e0       	ldi	r18, 0x02	; 2
 34a:	92 07       	cpc	r25, r18
 34c:	20 f0       	brcs	.+8      	; 0x356 <CLOCK_read+0x1f0>
            base_freq = 48000000; ///< Cap at 48 MHz (maximum PLL frequency)
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	7c e6       	ldi	r23, 0x6C	; 108
 352:	8c ed       	ldi	r24, 0xDC	; 220
 354:	92 e0       	ldi	r25, 0x02	; 2
        }
    }

    return base_freq;
}
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	af 90       	pop	r10
 366:	9f 90       	pop	r9
 368:	8f 90       	pop	r8
 36a:	08 95       	ret

0000036c <GPIO_init>:
 * - Configures PORTD for motor control: PWM, DIR, DIS as output.
 * - Configures PORTF for input buttons with pull-up resistors: START/STOP, DIR.
 */
void GPIO_init() {
    /* Configure SPI pins on PORTA */
    PORTA.DIRSET = PIN4_bm | PIN6_bm | PIN7_bm; // Set MOSI (PA4), SCK (PA6), SS (PA7) as outputs
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	f4 e0       	ldi	r31, 0x04	; 4
 370:	80 ed       	ldi	r24, 0xD0	; 208
 372:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN5_bm;                     // Set MISO (PA5) as input
 374:	80 e2       	ldi	r24, 0x20	; 32
 376:	82 83       	std	Z+2, r24	; 0x02

    /* Configure motor control pins on PORTD */
    PORTD.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm; // Set PWM (PD4), DIR (PD5), DIS (PD6) as outputs
 378:	80 e7       	ldi	r24, 0x70	; 112
 37a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>

    /* Configure input buttons on PORTF */
    PORTF.DIRCLR = PIN5_bm | PIN6_bm;           // Set START/STOP (PF5), DIR (PF6) as inputs
 37e:	e0 ea       	ldi	r30, 0xA0	; 160
 380:	f4 e0       	ldi	r31, 0x04	; 4
 382:	80 e6       	ldi	r24, 0x60	; 96
 384:	82 83       	std	Z+2, r24	; 0x02
    PORTF.PIN5CTRL = PORT_PULLUPEN_bm;          // Enable pull-up resistor for START/STOP (PF5)
 386:	88 e0       	ldi	r24, 0x08	; 8
 388:	85 8b       	std	Z+21, r24	; 0x15
    PORTF.PIN6CTRL = PORT_PULLUPEN_bm;          // Enable pull-up resistor for DIR (PF6)
 38a:	86 8b       	std	Z+22, r24	; 0x16
 38c:	08 95       	ret

0000038e <main>:
 * 
 * @return int Always returns 0 (not used in embedded systems).
 */
int main(void)
{
    GPIO_init();
 38e:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_init>
    CLOCK_INHF_clock_init(); ///< Initializes the internal high-frequency clock.
 392:	0e 94 9a 00 	call	0x134	; 0x134 <CLOCK_INHF_clock_init>

    TLE9201SG.pwm_freq = 20000; ///< Sets PWM frequency to 20 kHz. Always set this before mode initialization.
 396:	e0 e0       	ldi	r30, 0x00	; 0
 398:	f0 e6       	ldi	r31, 0x60	; 96
 39a:	80 e2       	ldi	r24, 0x20	; 32
 39c:	9e e4       	ldi	r25, 0x4E	; 78
 39e:	81 8b       	std	Z+17, r24	; 0x11
 3a0:	92 8b       	std	Z+18, r25	; 0x12
    TLE9201SG.duty_cycle = 30.0; ///< Sets duty cycle to 50%. Always set this before mode initialization.
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	a0 ef       	ldi	r26, 0xF0	; 240
 3a8:	b1 e4       	ldi	r27, 0x41	; 65
 3aa:	83 8b       	std	Z+19, r24	; 0x13
 3ac:	94 8b       	std	Z+20, r25	; 0x14
 3ae:	a5 8b       	std	Z+21, r26	; 0x15
 3b0:	b6 8b       	std	Z+22, r27	; 0x16

    TLE9201SG_Mode_init(TLE9201SG_MODE_PWMDIR); ///< Initializes the TLE9201SG in SPI mode.
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 b9 03 	call	0x772	; 0x772 <TLE9201SG_Mode_init>

    while (1) {
        if (!(PORTF.IN & PIN5_bm)) { ///< Starts TLE9201SG if PF5 is low.
 3b8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f04a8>
 3bc:	85 fd       	sbrc	r24, 5
 3be:	0e c0       	rjmp	.+28     	; 0x3dc <main+0x4e>
            TLE9201SG_START();
 3c0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <TLE9201SG_START>
            if (!(PORTF.IN & PIN6_bm)) { ///< Changes direction based on PF6.
 3c4:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f04a8>
 3c8:	86 fd       	sbrc	r24, 6
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <main+0x46>
                TLE9201SG_DIR(1); ///< Sets direction to forward.
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <TLE9201SG_DIR>
 3d2:	f2 cf       	rjmp	.-28     	; 0x3b8 <main+0x2a>
            } else {
                TLE9201SG_DIR(0); ///< Sets direction to reverse.
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <TLE9201SG_DIR>
 3da:	ee cf       	rjmp	.-36     	; 0x3b8 <main+0x2a>
            }
        } else { ///< Stops TLE9201SG if PF5 is high.
            TLE9201SG_STOP();
 3dc:	0e 94 c3 03 	call	0x786	; 0x786 <TLE9201SG_STOP>
 3e0:	eb cf       	rjmp	.-42     	; 0x3b8 <main+0x2a>

000003e2 <SPI0_init>:
 * - Configures SPI0 as a Master with a clock speed of 6 MHz (F_CPU/4).
 * - Sets SPI mode 1 for communication with TLE9201SG.
 * - Enables the SPI0 module.
 */
void SPI0_init() {
    SPI0.CTRLA = SPI_MASTER_bm          // Configure as Master
 3e2:	e0 e4       	ldi	r30, 0x40	; 64
 3e4:	f9 e0       	ldi	r31, 0x09	; 9
 3e6:	81 e2       	ldi	r24, 0x21	; 33
 3e8:	80 83       	st	Z, r24
               | SPI_PRESC_DIV4_gc      // Clock speed = F_CPU / 4 = 24 MHz / 4 = 6 MHz
               | SPI_ENABLE_bm;         // Enable SPI
    SPI0.CTRLB = SPI_MODE_1_gc;         // Set SPI mode 1 for TLE9201SG
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	81 83       	std	Z+1, r24	; 0x01
 3ee:	08 95       	ret

000003f0 <SPI0_Start>:
 * @details 
 * - Pulls the Slave Select (SS) line low to indicate the start of communication 
 *   with the SPI slave device.
 */
void SPI0_Start() {
    PORTA.OUTCLR = PIN7_bm; // Set SS (PA7) low
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
 3f6:	08 95       	ret

000003f8 <SPI0_Stop>:
 * @details 
 * - Pulls the Slave Select (SS) line high to indicate the end of communication 
 *   with the SPI slave device.
 */
void SPI0_Stop() {
    PORTA.OUTSET = PIN7_bm; // Set SS (PA7) high
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
 3fe:	08 95       	ret

00000400 <SPI0_Exchange_Data>:
 * managing the slave select (SS) line.
 *
 * @param data_storage The byte of data to send to the SPI slave.
 * @return The byte of data received from the SPI slave.
 */
uint8_t SPI0_Exchange_Data(uint8_t data_storage) {
 400:	cf 93       	push	r28
 402:	c8 2f       	mov	r28, r24
    SPI0_Start(); // Pull SS low to initiate communication
 404:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI0_Start>
    SPI0.DATA = data_storage; // Send the data
 408:	c0 93 44 09 	sts	0x0944, r28	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
    while (!(SPI0.INTFLAGS & SPI_IF_bm)) {} // Wait until data is exchanged
 40c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 410:	88 23       	and	r24, r24
 412:	e4 f7       	brge	.-8      	; 0x40c <SPI0_Exchange_Data+0xc>
    SPI0_Stop(); // Pull SS high to terminate communication
 414:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI0_Stop>
    return SPI0.DATA; // Return the received data
 418:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
}
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <TCD0_ON>:
 * @brief Turns on the TCD0 counter.
 * 
 * @details Waits until the TCD is ready to be enabled, then activates the timer.
 */
void TCD0_ON() {
    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until the TCD is ready
 420:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 424:	80 ff       	sbrs	r24, 0
 426:	fc cf       	rjmp	.-8      	; 0x420 <TCD0_ON>
    TCD0.CTRLA |= TCD_ENABLE_bm; ///< Enable the TCD0 counter
 428:	e0 e8       	ldi	r30, 0x80	; 128
 42a:	fb e0       	ldi	r31, 0x0B	; 11
 42c:	80 81       	ld	r24, Z
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <TCD0_OFF>:
 * @brief Turns off the TCD0 counter.
 * 
 * @details Waits until the TCD is ready to be disabled, then deactivates the timer.
 */
void TCD0_OFF() {
    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until the TCD is ready
 434:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 438:	80 ff       	sbrs	r24, 0
 43a:	fc cf       	rjmp	.-8      	; 0x434 <TCD0_OFF>
    TCD0.CTRLA &= ~TCD_ENABLE_bm; ///< Disable the TCD0 counter
 43c:	e0 e8       	ldi	r30, 0x80	; 128
 43e:	fb e0       	ldi	r31, 0x0B	; 11
 440:	80 81       	ld	r24, Z
 442:	8e 7f       	andi	r24, 0xFE	; 254
 444:	80 83       	st	Z, r24
 446:	08 95       	ret

00000448 <PWM_init>:
 * @warning Incorrect target frequency or duty cycle values may result in undefined behavior.
 *
 * @example
 * PWM_init(1000, 50.0f); // Initialize PWM with 1 kHz frequency and 50% duty cycle.
 */
void PWM_init(uint32_t target_freq, float duty_cycle) {
 448:	4f 92       	push	r4
 44a:	5f 92       	push	r5
 44c:	6f 92       	push	r6
 44e:	7f 92       	push	r7
 450:	8f 92       	push	r8
 452:	9f 92       	push	r9
 454:	af 92       	push	r10
 456:	bf 92       	push	r11
 458:	cf 92       	push	r12
 45a:	df 92       	push	r13
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	2b 01       	movw	r4, r22
 466:	3c 01       	movw	r6, r24
 468:	69 01       	movw	r12, r18
 46a:	7a 01       	movw	r14, r20
    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
 46c:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 470:	88 71       	andi	r24, 0x18	; 24
 472:	88 30       	cpi	r24, 0x08	; 8
 474:	31 f0       	breq	.+12     	; 0x482 <PWM_init+0x3a>
 476:	80 31       	cpi	r24, 0x10	; 16
 478:	11 f0       	breq	.+4      	; 0x47e <PWM_init+0x36>
 * @example
 * PWM_init(1000, 50.0f); // Initialize PWM with 1 kHz frequency and 50% duty cycle.
 */
void PWM_init(uint32_t target_freq, float duty_cycle) {
    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
 47a:	c1 e0       	ldi	r28, 0x01	; 1
 47c:	03 c0       	rjmp	.+6      	; 0x484 <PWM_init+0x3c>
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
        case TCD_CNTPRES_DIV4_gc:  TCD_prescaler = 4; break;
        case TCD_CNTPRES_DIV32_gc: TCD_prescaler = 32; break;
 47e:	c0 e2       	ldi	r28, 0x20	; 32
 480:	01 c0       	rjmp	.+2      	; 0x484 <PWM_init+0x3c>
 */
void PWM_init(uint32_t target_freq, float duty_cycle) {
    // Calculate TCD prescaler
    uint8_t TCD_prescaler = 1;
    switch (TCD0.CTRLA & TCD_CNTPRES_gm) {
        case TCD_CNTPRES_DIV4_gc:  TCD_prescaler = 4; break;
 482:	c4 e0       	ldi	r28, 0x04	; 4
        case TCD_CNTPRES_DIV32_gc: TCD_prescaler = 32; break;
    }
    // Calculate compare registers
    uint16_t cmpbclr = (CLOCK_read() / (TCD_prescaler * target_freq * 2)) - 1;
 484:	0e 94 b3 00 	call	0x166	; 0x166 <CLOCK_read>
 488:	4b 01       	movw	r8, r22
 48a:	5c 01       	movw	r10, r24
 48c:	ac 2f       	mov	r26, r28
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	a3 01       	movw	r20, r6
 492:	92 01       	movw	r18, r4
 494:	0e 94 49 06 	call	0xc92	; 0xc92 <__muluhisi3>
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	22 0f       	add	r18, r18
 49e:	33 1f       	adc	r19, r19
 4a0:	44 1f       	adc	r20, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	c5 01       	movw	r24, r10
 4a6:	b4 01       	movw	r22, r8
 4a8:	0e 94 21 06 	call	0xc42	; 0xc42 <__udivmodsi4>
 4ac:	e9 01       	movw	r28, r18
 4ae:	21 97       	sbiw	r28, 0x01	; 1
    uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_cycle / 100.0f)) + 1;
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	48 ec       	ldi	r20, 0xC8	; 200
 4b6:	52 e4       	ldi	r21, 0x42	; 66
 4b8:	c7 01       	movw	r24, r14
 4ba:	b6 01       	movw	r22, r12
 4bc:	0e 94 85 04 	call	0x90a	; 0x90a <__divsf3>
 4c0:	6b 01       	movw	r12, r22
 4c2:	7c 01       	movw	r14, r24
 4c4:	be 01       	movw	r22, r28
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
 4ce:	a7 01       	movw	r20, r14
 4d0:	96 01       	movw	r18, r12
 4d2:	0e 94 b4 05 	call	0xb68	; 0xb68 <__mulsf3>
 4d6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fixunssfsi>
 4da:	6f 5f       	subi	r22, 0xFF	; 255
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
    uint16_t cmpbset = cmpbclr - cmpaset - 1;
 4de:	ce 01       	movw	r24, r28
 4e0:	86 1b       	sub	r24, r22
 4e2:	97 0b       	sbc	r25, r23
 4e4:	01 97       	sbiw	r24, 0x01	; 1

    // Set TCD compare registers
    TCD0.CMPBCLR = cmpbclr;
 4e6:	e0 e8       	ldi	r30, 0x80	; 128
 4e8:	fb e0       	ldi	r31, 0x0B	; 11
 4ea:	c6 a7       	std	Z+46, r28	; 0x2e
 4ec:	d7 a7       	std	Z+47, r29	; 0x2f
    TCD0.CMPBSET = cmpbset;
 4ee:	84 a7       	std	Z+44, r24	; 0x2c
 4f0:	95 a7       	std	Z+45, r25	; 0x2d
    TCD0.CMPASET = cmpaset;
 4f2:	60 a7       	std	Z+40, r22	; 0x28
 4f4:	71 a7       	std	Z+41, r23	; 0x29
}
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	df 90       	pop	r13
 500:	cf 90       	pop	r12
 502:	bf 90       	pop	r11
 504:	af 90       	pop	r10
 506:	9f 90       	pop	r9
 508:	8f 90       	pop	r8
 50a:	7f 90       	pop	r7
 50c:	6f 90       	pop	r6
 50e:	5f 90       	pop	r5
 510:	4f 90       	pop	r4
 512:	08 95       	ret

00000514 <TCD0_init>:
 * 
 * @details Configures the waveform generation mode, fault control, and clock source.
 *          This function also selects the WOC (Waveform Output Compare) pin configuration.
 */
void TCD0_init() {
    PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT4_gc; ///< Select alternative WOC pin variant 4
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <__TEXT_REGION_LENGTH__+0x7f05e9>
    ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PD4 (pin 14)
 51a:	60 e4       	ldi	r22, 0x40	; 64
 51c:	82 e9       	ldi	r24, 0x92	; 146
 51e:	9b e0       	ldi	r25, 0x0B	; 11
 520:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ccp_write_io>

    TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7f0b81>

    while (!(TCD0.STATUS & TCD_ENRDY_bm)); ///< Wait until TCD is ready for configuration
 52a:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
 52e:	80 ff       	sbrs	r24, 0
 530:	fc cf       	rjmp	.-8      	; 0x52a <TCD0_init+0x16>
    TCD0.CTRLA = TCD_CLKSEL_OSCHF_gc | ///< Select PLL as clock source
 532:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
 536:	08 95       	ret

00000538 <TLE9201SG_Sort_Diagnosis>:

/**
 * @brief Parses and updates the diagnosis data from the TLE9201SG.
 */
void TLE9201SG_Sort_Diagnosis() {
	TLE9201SG.EN = GET_BIT(TLE9201SG.diag, 7);
 538:	e0 e0       	ldi	r30, 0x00	; 0
 53a:	f0 e6       	ldi	r31, 0x60	; 96
 53c:	81 81       	ldd	r24, Z+1	; 0x01
 53e:	98 2f       	mov	r25, r24
 540:	99 1f       	adc	r25, r25
 542:	99 27       	eor	r25, r25
 544:	99 1f       	adc	r25, r25
 546:	93 83       	std	Z+3, r25	; 0x03
	TLE9201SG.OT = GET_BIT(TLE9201SG.diag, 6);
 548:	86 fb       	bst	r24, 6
 54a:	99 27       	eor	r25, r25
 54c:	90 f9       	bld	r25, 0
 54e:	94 83       	std	Z+4, r25	; 0x04
	TLE9201SG.TV = GET_BIT(TLE9201SG.diag, 5);
 550:	85 fb       	bst	r24, 5
 552:	99 27       	eor	r25, r25
 554:	90 f9       	bld	r25, 0
 556:	95 83       	std	Z+5, r25	; 0x05
	TLE9201SG.CL = GET_BIT(TLE9201SG.diag, 4);
 558:	84 fb       	bst	r24, 4
 55a:	99 27       	eor	r25, r25
 55c:	90 f9       	bld	r25, 0
 55e:	96 83       	std	Z+6, r25	; 0x06
	TLE9201SG.DIA = GET_BITS(TLE9201SG.diag, 0x0F);
 560:	8f 70       	andi	r24, 0x0F	; 15
 562:	87 83       	std	Z+7, r24	; 0x07

	TLE9201SG.Fault = (TLE9201SG.DIA != 0xF) ? TLE9201SG.DIA : 0;
 564:	8f 30       	cpi	r24, 0x0F	; 15
 566:	09 f4       	brne	.+2      	; 0x56a <TLE9201SG_Sort_Diagnosis+0x32>
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	80 93 08 60 	sts	0x6008, r24	; 0x806008 <__DATA_REGION_ORIGIN__+0x8>
 56e:	08 95       	ret

00000570 <TLE9201SG_Sort_Control>:

/**
 * @brief Parses and updates the control data from the TLE9201SG.
 */
void TLE9201SG_Sort_Control() {
    TLE9201SG.CMD = (TLE9201SG.control >> 5);         // Extract Bits 7-5
 570:	e0 e0       	ldi	r30, 0x00	; 0
 572:	f0 e6       	ldi	r31, 0x60	; 96
 574:	82 81       	ldd	r24, Z+2	; 0x02
 576:	98 2f       	mov	r25, r24
 578:	92 95       	swap	r25
 57a:	96 95       	lsr	r25
 57c:	97 70       	andi	r25, 0x07	; 7
 57e:	91 87       	std	Z+9, r25	; 0x09
    TLE9201SG.OLDIS = GET_BIT(TLE9201SG.control, 4);  // Extract Bit 4
 580:	84 fb       	bst	r24, 4
 582:	99 27       	eor	r25, r25
 584:	90 f9       	bld	r25, 0
 586:	92 87       	std	Z+10, r25	; 0x0a
    TLE9201SG.SIN = GET_BIT(TLE9201SG.control, 3);    // Extract Bit 3
 588:	83 fb       	bst	r24, 3
 58a:	99 27       	eor	r25, r25
 58c:	90 f9       	bld	r25, 0
 58e:	93 87       	std	Z+11, r25	; 0x0b
    TLE9201SG.SEN = GET_BIT(TLE9201SG.control, 2);    // Extract Bit 2
 590:	82 fb       	bst	r24, 2
 592:	99 27       	eor	r25, r25
 594:	90 f9       	bld	r25, 0
 596:	94 87       	std	Z+12, r25	; 0x0c
    TLE9201SG.SDIR = GET_BIT(TLE9201SG.control, 1);   // Extract Bit 1
 598:	81 fb       	bst	r24, 1
 59a:	99 27       	eor	r25, r25
 59c:	90 f9       	bld	r25, 0
 59e:	95 87       	std	Z+13, r25	; 0x0d
    TLE9201SG.SPWM = GET_BIT(TLE9201SG.control, 0);   // Extract Bit 0
 5a0:	81 70       	andi	r24, 0x01	; 1
 5a2:	86 87       	std	Z+14, r24	; 0x0e
 5a4:	08 95       	ret

000005a6 <TLE9201SG_Write>:
 * @param command The base command to be sent to the motor driver.
 * @return The constructed control command.
 */
uint8_t TLE9201SG_Write(uint8_t command) {
    return command |
           (TLE9201SG.OLDIS << 4) |
 5a6:	a0 e0       	ldi	r26, 0x00	; 0
 5a8:	b0 e6       	ldi	r27, 0x60	; 96
 5aa:	1a 96       	adiw	r26, 0x0a	; 10
 5ac:	ec 91       	ld	r30, X
 5ae:	1a 97       	sbiw	r26, 0x0a	; 10
 5b0:	90 e1       	ldi	r25, 0x10	; 16
 5b2:	e9 9f       	mul	r30, r25
 5b4:	f0 01       	movw	r30, r0
 5b6:	11 24       	eor	r1, r1
           (TLE9201SG.SIN << 3) |
 5b8:	1b 96       	adiw	r26, 0x0b	; 11
 5ba:	6c 91       	ld	r22, X
 5bc:	1b 97       	sbiw	r26, 0x0b	; 11
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	66 0f       	add	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
           (TLE9201SG.SEN << 2) |
 5cc:	1c 96       	adiw	r26, 0x0c	; 12
 5ce:	4c 91       	ld	r20, X
 5d0:	1c 97       	sbiw	r26, 0x0c	; 12
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	44 0f       	add	r20, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	44 0f       	add	r20, r20
 5da:	55 1f       	adc	r21, r21
           (TLE9201SG.SDIR << 1) |
 5dc:	1d 96       	adiw	r26, 0x0d	; 13
 5de:	2c 91       	ld	r18, X
 5e0:	1d 97       	sbiw	r26, 0x0d	; 13
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	22 0f       	add	r18, r18
 5e6:	33 1f       	adc	r19, r19
           TLE9201SG.SPWM;
 5e8:	1e 96       	adiw	r26, 0x0e	; 14
 5ea:	9c 91       	ld	r25, X
 *
 * @param command The base command to be sent to the motor driver.
 * @return The constructed control command.
 */
uint8_t TLE9201SG_Write(uint8_t command) {
    return command |
 5ec:	8e 2b       	or	r24, r30
 5ee:	86 2b       	or	r24, r22
 5f0:	84 2b       	or	r24, r20
 5f2:	82 2b       	or	r24, r18
           (TLE9201SG.OLDIS << 4) |
           (TLE9201SG.SIN << 3) |
           (TLE9201SG.SEN << 2) |
           (TLE9201SG.SDIR << 1) |
           TLE9201SG.SPWM;
}
 5f4:	89 2b       	or	r24, r25
 5f6:	08 95       	ret

000005f8 <TLE9201SG_SPI_Mode_Init>:
 *
 * This function stops any ongoing SPI communication, initializes the SPI module, 
 * and sets up the TLE9201SG for SPI mode operation. It also calculates the virtual 
 * PWM signal timing for simulating PWM behavior through SPI.
 */
void TLE9201SG_SPI_Mode_Init() {
 5f8:	4f 92       	push	r4
 5fa:	5f 92       	push	r5
 5fc:	6f 92       	push	r6
 5fe:	7f 92       	push	r7
 600:	8f 92       	push	r8
 602:	9f 92       	push	r9
 604:	af 92       	push	r10
 606:	bf 92       	push	r11
 608:	cf 92       	push	r12
 60a:	df 92       	push	r13
 60c:	ef 92       	push	r14
 60e:	ff 92       	push	r15
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	00 d0       	rcall	.+0      	; 0x61a <TLE9201SG_SPI_Mode_Init+0x22>
 61a:	1f 92       	push	r1
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
    SPI0_Stop(); // Ensure SPI0 module is stopped
 620:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI0_Stop>
    SPI0_init();
 624:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI0_init>

    // Enable SPI control and disable outputs
    TLE9201SG.SIN = 1;
 628:	e0 e0       	ldi	r30, 0x00	; 0
 62a:	f0 e6       	ldi	r31, 0x60	; 96
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	83 87       	std	Z+11, r24	; 0x0b
    TLE9201SG.OLDIS = 0;
 630:	12 86       	std	Z+10, r1	; 0x0a
    TLE9201SG.SEN = 0;
 632:	14 86       	std	Z+12, r1	; 0x0c

    uint8_t init_cmd[3] = {TLE9201SG_Write(WR_CTRL), RD_REV, 0};
 634:	80 ee       	ldi	r24, 0xE0	; 224
 636:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TLE9201SG_Write>
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	80 e2       	ldi	r24, 0x20	; 32
 63e:	8a 83       	std	Y+2, r24	; 0x02
 640:	1b 82       	std	Y+3, r1	; 0x03
    for (uint8_t i = 0; i < 3; i++) {
 642:	f1 2c       	mov	r15, r1
 644:	0d c0       	rjmp	.+26     	; 0x660 <TLE9201SG_SPI_Mode_Init+0x68>
        init_cmd[i] = SPI0_Exchange_Data(init_cmd[i]);
 646:	01 e0       	ldi	r16, 0x01	; 1
 648:	10 e0       	ldi	r17, 0x00	; 0
 64a:	0c 0f       	add	r16, r28
 64c:	1d 1f       	adc	r17, r29
 64e:	0f 0d       	add	r16, r15
 650:	11 1d       	adc	r17, r1
 652:	f8 01       	movw	r30, r16
 654:	80 81       	ld	r24, Z
 656:	0e 94 00 02 	call	0x400	; 0x400 <SPI0_Exchange_Data>
 65a:	f8 01       	movw	r30, r16
 65c:	80 83       	st	Z, r24
    TLE9201SG.SIN = 1;
    TLE9201SG.OLDIS = 0;
    TLE9201SG.SEN = 0;

    uint8_t init_cmd[3] = {TLE9201SG_Write(WR_CTRL), RD_REV, 0};
    for (uint8_t i = 0; i < 3; i++) {
 65e:	f3 94       	inc	r15
 660:	f2 e0       	ldi	r31, 0x02	; 2
 662:	ff 15       	cp	r31, r15
 664:	80 f7       	brcc	.-32     	; 0x646 <TLE9201SG_SPI_Mode_Init+0x4e>
        init_cmd[i] = SPI0_Exchange_Data(init_cmd[i]);
    }

    // Update control and revision values
    TLE9201SG.control = init_cmd[1];
 666:	8a 81       	ldd	r24, Y+2	; 0x02
 668:	00 e0       	ldi	r16, 0x00	; 0
 66a:	10 e6       	ldi	r17, 0x60	; 96
 66c:	f8 01       	movw	r30, r16
 66e:	82 83       	std	Z+2, r24	; 0x02
    TLE9201SG.revision = init_cmd[2];
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	80 83       	st	Z, r24
    TLE9201SG_Sort_Control();
 674:	0e 94 b8 02 	call	0x570	; 0x570 <TLE9201SG_Sort_Control>

    // PWM signal timing calculations
    float sig_calc = 1.0f / CLOCK_read() * 4.0f; // Calculate the time base based on the current main clock
 678:	0e 94 b3 00 	call	0x166	; 0x166 <CLOCK_read>
 67c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
 680:	9b 01       	movw	r18, r22
 682:	ac 01       	movw	r20, r24
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	80 e8       	ldi	r24, 0x80	; 128
 68a:	9f e3       	ldi	r25, 0x3F	; 63
 68c:	0e 94 85 04 	call	0x90a	; 0x90a <__divsf3>
 690:	20 e0       	ldi	r18, 0x00	; 0
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	40 e8       	ldi	r20, 0x80	; 128
 696:	50 e4       	ldi	r21, 0x40	; 64
 698:	0e 94 b4 05 	call	0xb68	; 0xb68 <__mulsf3>
 69c:	6b 01       	movw	r12, r22
 69e:	7c 01       	movw	r14, r24
    float sig_period = (1.0f / TLE9201SG.pwm_freq) - TLE9201SG_SPI_TIME_COMPENSATION; // Calculate period for required frequency
 6a0:	f8 01       	movw	r30, r16
 6a2:	61 89       	ldd	r22, Z+17	; 0x11
 6a4:	72 89       	ldd	r23, Z+18	; 0x12
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
 6ae:	9b 01       	movw	r18, r22
 6b0:	ac 01       	movw	r20, r24
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	80 e8       	ldi	r24, 0x80	; 128
 6b8:	9f e3       	ldi	r25, 0x3F	; 63
 6ba:	0e 94 85 04 	call	0x90a	; 0x90a <__divsf3>
 6be:	2b e8       	ldi	r18, 0x8B	; 139
 6c0:	31 ee       	ldi	r19, 0xE1	; 225
 6c2:	4a e6       	ldi	r20, 0x6A	; 106
 6c4:	57 e3       	ldi	r21, 0x37	; 55
 6c6:	0e 94 18 04 	call	0x830	; 0x830 <__subsf3>
 6ca:	2b 01       	movw	r4, r22
 6cc:	3c 01       	movw	r6, r24
    float sig_on = (TLE9201SG.duty_cycle / 100.0f) * sig_period; // Calculate PWM duty cycle
 6ce:	f8 01       	movw	r30, r16
 6d0:	63 89       	ldd	r22, Z+19	; 0x13
 6d2:	74 89       	ldd	r23, Z+20	; 0x14
 6d4:	85 89       	ldd	r24, Z+21	; 0x15
 6d6:	96 89       	ldd	r25, Z+22	; 0x16
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	48 ec       	ldi	r20, 0xC8	; 200
 6de:	52 e4       	ldi	r21, 0x42	; 66
 6e0:	0e 94 85 04 	call	0x90a	; 0x90a <__divsf3>
 6e4:	9b 01       	movw	r18, r22
 6e6:	ac 01       	movw	r20, r24
 6e8:	c3 01       	movw	r24, r6
 6ea:	b2 01       	movw	r22, r4
 6ec:	0e 94 b4 05 	call	0xb68	; 0xb68 <__mulsf3>
 6f0:	4b 01       	movw	r8, r22
 6f2:	5c 01       	movw	r10, r24

    TLE9201SG.off = (sig_period - sig_on) / sig_calc; // Calculate PWM off time
 6f4:	9b 01       	movw	r18, r22
 6f6:	ac 01       	movw	r20, r24
 6f8:	c3 01       	movw	r24, r6
 6fa:	b2 01       	movw	r22, r4
 6fc:	0e 94 18 04 	call	0x830	; 0x830 <__subsf3>
 700:	a7 01       	movw	r20, r14
 702:	96 01       	movw	r18, r12
 704:	0e 94 85 04 	call	0x90a	; 0x90a <__divsf3>
 708:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fixunssfsi>
 70c:	f8 01       	movw	r30, r16
 70e:	61 8f       	std	Z+25, r22	; 0x19
 710:	72 8f       	std	Z+26, r23	; 0x1a
    TLE9201SG.on = sig_on / sig_calc;                // Calculate PWM on time
 712:	a7 01       	movw	r20, r14
 714:	96 01       	movw	r18, r12
 716:	c5 01       	movw	r24, r10
 718:	b4 01       	movw	r22, r8
 71a:	0e 94 85 04 	call	0x90a	; 0x90a <__divsf3>
 71e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fixunssfsi>
 722:	f8 01       	movw	r30, r16
 724:	67 8b       	std	Z+23, r22	; 0x17
 726:	70 8f       	std	Z+24, r23	; 0x18
}
 728:	23 96       	adiw	r28, 0x03	; 3
 72a:	cd bf       	out	0x3d, r28	; 61
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	1f 91       	pop	r17
 734:	0f 91       	pop	r16
 736:	ff 90       	pop	r15
 738:	ef 90       	pop	r14
 73a:	df 90       	pop	r13
 73c:	cf 90       	pop	r12
 73e:	bf 90       	pop	r11
 740:	af 90       	pop	r10
 742:	9f 90       	pop	r9
 744:	8f 90       	pop	r8
 746:	7f 90       	pop	r7
 748:	6f 90       	pop	r6
 74a:	5f 90       	pop	r5
 74c:	4f 90       	pop	r4
 74e:	08 95       	ret

00000750 <TLE9201SG_PWM_Mode_Init>:
 * This function initializes the hardware components required for the PWM/DIR 
 * control mode, including the Phase-Locked Loop (PLL), Timer/Counter D (TCD), 
 * and the PWM generation module.
 */
void TLE9201SG_PWM_Mode_Init() {
    PLL_init();  // Initialize Phase-Locked Loop (PLL)
 750:	0e 94 a9 00 	call	0x152	; 0x152 <PLL_init>
    TCD0_init(); // Initialize Timer/Counter D (TCD)
 754:	0e 94 8a 02 	call	0x514	; 0x514 <TCD0_init>
    PWM_init(TLE9201SG.pwm_freq, TLE9201SG.duty_cycle);
 758:	e0 e0       	ldi	r30, 0x00	; 0
 75a:	f0 e6       	ldi	r31, 0x60	; 96
 75c:	61 89       	ldd	r22, Z+17	; 0x11
 75e:	72 89       	ldd	r23, Z+18	; 0x12
 760:	23 89       	ldd	r18, Z+19	; 0x13
 762:	34 89       	ldd	r19, Z+20	; 0x14
 764:	45 89       	ldd	r20, Z+21	; 0x15
 766:	56 89       	ldd	r21, Z+22	; 0x16
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 24 02 	call	0x448	; 0x448 <PWM_init>
 770:	08 95       	ret

00000772 <TLE9201SG_Mode_init>:
 * @param mode The desired control mode:
 *             - 0: PWM/DIR mode
 *             - 1: SPI mode
 */
void TLE9201SG_Mode_init(uint8_t mode) {
    TLE9201SG.mode = mode;
 772:	80 93 10 60 	sts	0x6010, r24	; 0x806010 <__DATA_REGION_ORIGIN__+0x10>

    if (mode) {
 776:	88 23       	and	r24, r24
 778:	19 f0       	breq	.+6      	; 0x780 <TLE9201SG_Mode_init+0xe>
        TLE9201SG_SPI_Mode_Init(); // SPI mode initialization
 77a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <TLE9201SG_SPI_Mode_Init>
 77e:	08 95       	ret
    } else {
        TLE9201SG_PWM_Mode_Init(); // PWM/DIR mode initialization
 780:	0e 94 a8 03 	call	0x750	; 0x750 <TLE9201SG_PWM_Mode_Init>
 784:	08 95       	ret

00000786 <TLE9201SG_STOP>:
 * 
 * This function disables the TLE9201SG outputs, either via SPI or by controlling 
 * the hardware pin directly, depending on the current control mode.
 */
void TLE9201SG_STOP() {
    if (TLE9201SG.mode) { // SPI mode
 786:	80 91 10 60 	lds	r24, 0x6010	; 0x806010 <__DATA_REGION_ORIGIN__+0x10>
 78a:	88 23       	and	r24, r24
 78c:	19 f0       	breq	.+6      	; 0x794 <TLE9201SG_STOP+0xe>
        TLE9201SG.SEN = 0; // Disable outputs
 78e:	10 92 0c 60 	sts	0x600C, r1	; 0x80600c <__DATA_REGION_ORIGIN__+0xc>
 792:	08 95       	ret
    } else { // PWM/DIR mode
        TCD0_OFF(); // Turn off the timer/counter
 794:	0e 94 1a 02 	call	0x434	; 0x434 <TCD0_OFF>
        PORTD.OUTSET = PIN6_bm; // Set the pin to disable outputs
 798:	80 e4       	ldi	r24, 0x40	; 64
 79a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
 79e:	08 95       	ret

000007a0 <TLE9201SG_DIR>:
 * 
 * This function sets the direction of the motor driver outputs, either via SPI or 
 * by controlling the hardware pin directly, depending on the current control mode.
 */
void TLE9201SG_DIR(uint8_t direction) {
	if (TLE9201SG.mode) { // SPI mode
 7a0:	90 91 10 60 	lds	r25, 0x6010	; 0x806010 <__DATA_REGION_ORIGIN__+0x10>
 7a4:	99 23       	and	r25, r25
 7a6:	19 f0       	breq	.+6      	; 0x7ae <TLE9201SG_DIR+0xe>
		TLE9201SG.SDIR = direction;
 7a8:	80 93 0d 60 	sts	0x600D, r24	; 0x80600d <__DATA_REGION_ORIGIN__+0xd>
 7ac:	08 95       	ret
		} else { // PWM/DIR mode
		// Update only the direction bit (PIN5_bp)
		PORTD.OUT = (PORTD.OUT & ~(1 << PIN5_bp)) | (direction << PIN5_bp);
 7ae:	e0 e6       	ldi	r30, 0x60	; 96
 7b0:	f4 e0       	ldi	r31, 0x04	; 4
 7b2:	24 81       	ldd	r18, Z+4	; 0x04
 7b4:	30 e2       	ldi	r19, 0x20	; 32
 7b6:	83 9f       	mul	r24, r19
 7b8:	c0 01       	movw	r24, r0
 7ba:	11 24       	eor	r1, r1
 7bc:	92 2f       	mov	r25, r18
 7be:	9f 7d       	andi	r25, 0xDF	; 223
 7c0:	89 2b       	or	r24, r25
 7c2:	84 83       	std	Z+4, r24	; 0x04
 7c4:	08 95       	ret

000007c6 <TLE9201SG_START>:
 * @brief Starts the motor driver outputs.
 * 
 * This function starts the motor driver outputs, either by toggling the SPWM bit
 * via SPI or by enabling the timer/counter in PWM/DIR mode.
 */
void TLE9201SG_START() {
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
    if (TLE9201SG.mode) { // SPI mode imitating pwm...
 7ca:	80 91 10 60 	lds	r24, 0x6010	; 0x806010 <__DATA_REGION_ORIGIN__+0x10>
 7ce:	88 23       	and	r24, r24
 7d0:	e1 f0       	breq	.+56     	; 0x80a <TLE9201SG_START+0x44>
		TLE9201SG.SEN = 1; // Enable outputs
 7d2:	c0 e0       	ldi	r28, 0x00	; 0
 7d4:	d0 e6       	ldi	r29, 0x60	; 96
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	8c 87       	std	Y+12, r24	; 0x0c
        TLE9201SG.SPWM = 1;
 7da:	8e 87       	std	Y+14, r24	; 0x0e
		TLE9201SG.diag = SPI0_Exchange_Data(TLE9201SG_Write(WR_CTRL_RD_DIA)); //returning not curent value but value from the past... I hate SPI on TLE9201SG!!!
 7dc:	80 ec       	ldi	r24, 0xC0	; 192
 7de:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TLE9201SG_Write>
 7e2:	0e 94 00 02 	call	0x400	; 0x400 <SPI0_Exchange_Data>
 7e6:	89 83       	std	Y+1, r24	; 0x01
        _delay_loop_2(TLE9201SG.on); // Wait for the on-time duration
 7e8:	8f 89       	ldd	r24, Y+23	; 0x17
 7ea:	98 8d       	ldd	r25, Y+24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <TLE9201SG_START+0x26>
		TLE9201SG_Sort_Diagnosis(); //but spi have good diagnosis...
 7f0:	0e 94 9c 02 	call	0x538	; 0x538 <TLE9201SG_Sort_Diagnosis>
        TLE9201SG.SPWM = 0;
 7f4:	1e 86       	std	Y+14, r1	; 0x0e
	   SPI0_Exchange_Data(TLE9201SG_Write(WR_CTRL_RD_DIA)); //same...
 7f6:	80 ec       	ldi	r24, 0xC0	; 192
 7f8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TLE9201SG_Write>
 7fc:	0e 94 00 02 	call	0x400	; 0x400 <SPI0_Exchange_Data>
        _delay_loop_2(TLE9201SG.off); // Wait for the off-time duration
 800:	89 8d       	ldd	r24, Y+25	; 0x19
 802:	9a 8d       	ldd	r25, Y+26	; 0x1a
 804:	01 97       	sbiw	r24, 0x01	; 1
 806:	f1 f7       	brne	.-4      	; 0x804 <TLE9201SG_START+0x3e>
 808:	10 c0       	rjmp	.+32     	; 0x82a <TLE9201SG_START+0x64>

    } else { // PWM/DIR mode
        TCD0_ON(); // Enable the timer/counter for easy pwm generation 
 80a:	0e 94 10 02 	call	0x420	; 0x420 <TCD0_ON>
		PORTD.OUTCLR = PIN6_bm; // Clear the pin to enable outputs
 80e:	80 e4       	ldi	r24, 0x40	; 64
 810:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
		if(PORTA.IN & PIN5_bm)
 814:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
 818:	85 ff       	sbrs	r24, 5
 81a:	07 c0       	rjmp	.+14     	; 0x82a <TLE9201SG_START+0x64>
		TLE9201SG.Fault = (PORTA.IN & PIN5_bm) ?  1 : 0; //checking fault flag only...
 81c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
 820:	85 fb       	bst	r24, 5
 822:	88 27       	eor	r24, r24
 824:	80 f9       	bld	r24, 0
 826:	80 93 08 60 	sts	0x6008, r24	; 0x806008 <__DATA_REGION_ORIGIN__+0x8>
    }
}
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <__subsf3>:
 830:	50 58       	subi	r21, 0x80	; 128

00000832 <__addsf3>:
 832:	bb 27       	eor	r27, r27
 834:	aa 27       	eor	r26, r26
 836:	0e 94 30 04 	call	0x860	; 0x860 <__addsf3x>
 83a:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_round>
 83e:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_pscA>
 842:	38 f0       	brcs	.+14     	; 0x852 <__addsf3+0x20>
 844:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_pscB>
 848:	20 f0       	brcs	.+8      	; 0x852 <__addsf3+0x20>
 84a:	39 f4       	brne	.+14     	; 0x85a <__addsf3+0x28>
 84c:	9f 3f       	cpi	r25, 0xFF	; 255
 84e:	19 f4       	brne	.+6      	; 0x856 <__addsf3+0x24>
 850:	26 f4       	brtc	.+8      	; 0x85a <__addsf3+0x28>
 852:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_nan>
 856:	0e f4       	brtc	.+2      	; 0x85a <__addsf3+0x28>
 858:	e0 95       	com	r30
 85a:	e7 fb       	bst	r30, 7
 85c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__fp_inf>

00000860 <__addsf3x>:
 860:	e9 2f       	mov	r30, r25
 862:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_split3>
 866:	58 f3       	brcs	.-42     	; 0x83e <__addsf3+0xc>
 868:	ba 17       	cp	r27, r26
 86a:	62 07       	cpc	r22, r18
 86c:	73 07       	cpc	r23, r19
 86e:	84 07       	cpc	r24, r20
 870:	95 07       	cpc	r25, r21
 872:	20 f0       	brcs	.+8      	; 0x87c <__addsf3x+0x1c>
 874:	79 f4       	brne	.+30     	; 0x894 <__addsf3x+0x34>
 876:	a6 f5       	brtc	.+104    	; 0x8e0 <__addsf3x+0x80>
 878:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_zero>
 87c:	0e f4       	brtc	.+2      	; 0x880 <__addsf3x+0x20>
 87e:	e0 95       	com	r30
 880:	0b 2e       	mov	r0, r27
 882:	ba 2f       	mov	r27, r26
 884:	a0 2d       	mov	r26, r0
 886:	0b 01       	movw	r0, r22
 888:	b9 01       	movw	r22, r18
 88a:	90 01       	movw	r18, r0
 88c:	0c 01       	movw	r0, r24
 88e:	ca 01       	movw	r24, r20
 890:	a0 01       	movw	r20, r0
 892:	11 24       	eor	r1, r1
 894:	ff 27       	eor	r31, r31
 896:	59 1b       	sub	r21, r25
 898:	99 f0       	breq	.+38     	; 0x8c0 <__addsf3x+0x60>
 89a:	59 3f       	cpi	r21, 0xF9	; 249
 89c:	50 f4       	brcc	.+20     	; 0x8b2 <__addsf3x+0x52>
 89e:	50 3e       	cpi	r21, 0xE0	; 224
 8a0:	68 f1       	brcs	.+90     	; 0x8fc <__addsf3x+0x9c>
 8a2:	1a 16       	cp	r1, r26
 8a4:	f0 40       	sbci	r31, 0x00	; 0
 8a6:	a2 2f       	mov	r26, r18
 8a8:	23 2f       	mov	r18, r19
 8aa:	34 2f       	mov	r19, r20
 8ac:	44 27       	eor	r20, r20
 8ae:	58 5f       	subi	r21, 0xF8	; 248
 8b0:	f3 cf       	rjmp	.-26     	; 0x898 <__addsf3x+0x38>
 8b2:	46 95       	lsr	r20
 8b4:	37 95       	ror	r19
 8b6:	27 95       	ror	r18
 8b8:	a7 95       	ror	r26
 8ba:	f0 40       	sbci	r31, 0x00	; 0
 8bc:	53 95       	inc	r21
 8be:	c9 f7       	brne	.-14     	; 0x8b2 <__addsf3x+0x52>
 8c0:	7e f4       	brtc	.+30     	; 0x8e0 <__addsf3x+0x80>
 8c2:	1f 16       	cp	r1, r31
 8c4:	ba 0b       	sbc	r27, r26
 8c6:	62 0b       	sbc	r22, r18
 8c8:	73 0b       	sbc	r23, r19
 8ca:	84 0b       	sbc	r24, r20
 8cc:	ba f0       	brmi	.+46     	; 0x8fc <__addsf3x+0x9c>
 8ce:	91 50       	subi	r25, 0x01	; 1
 8d0:	a1 f0       	breq	.+40     	; 0x8fa <__addsf3x+0x9a>
 8d2:	ff 0f       	add	r31, r31
 8d4:	bb 1f       	adc	r27, r27
 8d6:	66 1f       	adc	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	c2 f7       	brpl	.-16     	; 0x8ce <__addsf3x+0x6e>
 8de:	0e c0       	rjmp	.+28     	; 0x8fc <__addsf3x+0x9c>
 8e0:	ba 0f       	add	r27, r26
 8e2:	62 1f       	adc	r22, r18
 8e4:	73 1f       	adc	r23, r19
 8e6:	84 1f       	adc	r24, r20
 8e8:	48 f4       	brcc	.+18     	; 0x8fc <__addsf3x+0x9c>
 8ea:	87 95       	ror	r24
 8ec:	77 95       	ror	r23
 8ee:	67 95       	ror	r22
 8f0:	b7 95       	ror	r27
 8f2:	f7 95       	ror	r31
 8f4:	9e 3f       	cpi	r25, 0xFE	; 254
 8f6:	08 f0       	brcs	.+2      	; 0x8fa <__addsf3x+0x9a>
 8f8:	b0 cf       	rjmp	.-160    	; 0x85a <__addsf3+0x28>
 8fa:	93 95       	inc	r25
 8fc:	88 0f       	add	r24, r24
 8fe:	08 f0       	brcs	.+2      	; 0x902 <__addsf3x+0xa2>
 900:	99 27       	eor	r25, r25
 902:	ee 0f       	add	r30, r30
 904:	97 95       	ror	r25
 906:	87 95       	ror	r24
 908:	08 95       	ret

0000090a <__divsf3>:
 90a:	0e 94 99 04 	call	0x932	; 0x932 <__divsf3x>
 90e:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_round>
 912:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_pscB>
 916:	58 f0       	brcs	.+22     	; 0x92e <__divsf3+0x24>
 918:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_pscA>
 91c:	40 f0       	brcs	.+16     	; 0x92e <__divsf3+0x24>
 91e:	29 f4       	brne	.+10     	; 0x92a <__divsf3+0x20>
 920:	5f 3f       	cpi	r21, 0xFF	; 255
 922:	29 f0       	breq	.+10     	; 0x92e <__divsf3+0x24>
 924:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__fp_inf>
 928:	51 11       	cpse	r21, r1
 92a:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_szero>
 92e:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_nan>

00000932 <__divsf3x>:
 932:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_split3>
 936:	68 f3       	brcs	.-38     	; 0x912 <__divsf3+0x8>

00000938 <__divsf3_pse>:
 938:	99 23       	and	r25, r25
 93a:	b1 f3       	breq	.-20     	; 0x928 <__divsf3+0x1e>
 93c:	55 23       	and	r21, r21
 93e:	91 f3       	breq	.-28     	; 0x924 <__divsf3+0x1a>
 940:	95 1b       	sub	r25, r21
 942:	55 0b       	sbc	r21, r21
 944:	bb 27       	eor	r27, r27
 946:	aa 27       	eor	r26, r26
 948:	62 17       	cp	r22, r18
 94a:	73 07       	cpc	r23, r19
 94c:	84 07       	cpc	r24, r20
 94e:	38 f0       	brcs	.+14     	; 0x95e <__divsf3_pse+0x26>
 950:	9f 5f       	subi	r25, 0xFF	; 255
 952:	5f 4f       	sbci	r21, 0xFF	; 255
 954:	22 0f       	add	r18, r18
 956:	33 1f       	adc	r19, r19
 958:	44 1f       	adc	r20, r20
 95a:	aa 1f       	adc	r26, r26
 95c:	a9 f3       	breq	.-22     	; 0x948 <__divsf3_pse+0x10>
 95e:	35 d0       	rcall	.+106    	; 0x9ca <__divsf3_pse+0x92>
 960:	0e 2e       	mov	r0, r30
 962:	3a f0       	brmi	.+14     	; 0x972 <__divsf3_pse+0x3a>
 964:	e0 e8       	ldi	r30, 0x80	; 128
 966:	32 d0       	rcall	.+100    	; 0x9cc <__divsf3_pse+0x94>
 968:	91 50       	subi	r25, 0x01	; 1
 96a:	50 40       	sbci	r21, 0x00	; 0
 96c:	e6 95       	lsr	r30
 96e:	00 1c       	adc	r0, r0
 970:	ca f7       	brpl	.-14     	; 0x964 <__divsf3_pse+0x2c>
 972:	2b d0       	rcall	.+86     	; 0x9ca <__divsf3_pse+0x92>
 974:	fe 2f       	mov	r31, r30
 976:	29 d0       	rcall	.+82     	; 0x9ca <__divsf3_pse+0x92>
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	bb 1f       	adc	r27, r27
 980:	26 17       	cp	r18, r22
 982:	37 07       	cpc	r19, r23
 984:	48 07       	cpc	r20, r24
 986:	ab 07       	cpc	r26, r27
 988:	b0 e8       	ldi	r27, 0x80	; 128
 98a:	09 f0       	breq	.+2      	; 0x98e <__divsf3_pse+0x56>
 98c:	bb 0b       	sbc	r27, r27
 98e:	80 2d       	mov	r24, r0
 990:	bf 01       	movw	r22, r30
 992:	ff 27       	eor	r31, r31
 994:	93 58       	subi	r25, 0x83	; 131
 996:	5f 4f       	sbci	r21, 0xFF	; 255
 998:	3a f0       	brmi	.+14     	; 0x9a8 <__divsf3_pse+0x70>
 99a:	9e 3f       	cpi	r25, 0xFE	; 254
 99c:	51 05       	cpc	r21, r1
 99e:	78 f0       	brcs	.+30     	; 0x9be <__divsf3_pse+0x86>
 9a0:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__fp_inf>
 9a4:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_szero>
 9a8:	5f 3f       	cpi	r21, 0xFF	; 255
 9aa:	e4 f3       	brlt	.-8      	; 0x9a4 <__divsf3_pse+0x6c>
 9ac:	98 3e       	cpi	r25, 0xE8	; 232
 9ae:	d4 f3       	brlt	.-12     	; 0x9a4 <__divsf3_pse+0x6c>
 9b0:	86 95       	lsr	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	b7 95       	ror	r27
 9b8:	f7 95       	ror	r31
 9ba:	9f 5f       	subi	r25, 0xFF	; 255
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__divsf3_pse+0x78>
 9be:	88 0f       	add	r24, r24
 9c0:	91 1d       	adc	r25, r1
 9c2:	96 95       	lsr	r25
 9c4:	87 95       	ror	r24
 9c6:	97 f9       	bld	r25, 7
 9c8:	08 95       	ret
 9ca:	e1 e0       	ldi	r30, 0x01	; 1
 9cc:	66 0f       	add	r22, r22
 9ce:	77 1f       	adc	r23, r23
 9d0:	88 1f       	adc	r24, r24
 9d2:	bb 1f       	adc	r27, r27
 9d4:	62 17       	cp	r22, r18
 9d6:	73 07       	cpc	r23, r19
 9d8:	84 07       	cpc	r24, r20
 9da:	ba 07       	cpc	r27, r26
 9dc:	20 f0       	brcs	.+8      	; 0x9e6 <__divsf3_pse+0xae>
 9de:	62 1b       	sub	r22, r18
 9e0:	73 0b       	sbc	r23, r19
 9e2:	84 0b       	sbc	r24, r20
 9e4:	ba 0b       	sbc	r27, r26
 9e6:	ee 1f       	adc	r30, r30
 9e8:	88 f7       	brcc	.-30     	; 0x9cc <__divsf3_pse+0x94>
 9ea:	e0 95       	com	r30
 9ec:	08 95       	ret

000009ee <__fixunssfsi>:
 9ee:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_splitA>
 9f2:	88 f0       	brcs	.+34     	; 0xa16 <__fixunssfsi+0x28>
 9f4:	9f 57       	subi	r25, 0x7F	; 127
 9f6:	98 f0       	brcs	.+38     	; 0xa1e <__fixunssfsi+0x30>
 9f8:	b9 2f       	mov	r27, r25
 9fa:	99 27       	eor	r25, r25
 9fc:	b7 51       	subi	r27, 0x17	; 23
 9fe:	b0 f0       	brcs	.+44     	; 0xa2c <__fixunssfsi+0x3e>
 a00:	e1 f0       	breq	.+56     	; 0xa3a <__fixunssfsi+0x4c>
 a02:	66 0f       	add	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	88 1f       	adc	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	1a f0       	brmi	.+6      	; 0xa12 <__fixunssfsi+0x24>
 a0c:	ba 95       	dec	r27
 a0e:	c9 f7       	brne	.-14     	; 0xa02 <__fixunssfsi+0x14>
 a10:	14 c0       	rjmp	.+40     	; 0xa3a <__fixunssfsi+0x4c>
 a12:	b1 30       	cpi	r27, 0x01	; 1
 a14:	91 f0       	breq	.+36     	; 0xa3a <__fixunssfsi+0x4c>
 a16:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_zero>
 a1a:	b1 e0       	ldi	r27, 0x01	; 1
 a1c:	08 95       	ret
 a1e:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_zero>
 a22:	67 2f       	mov	r22, r23
 a24:	78 2f       	mov	r23, r24
 a26:	88 27       	eor	r24, r24
 a28:	b8 5f       	subi	r27, 0xF8	; 248
 a2a:	39 f0       	breq	.+14     	; 0xa3a <__fixunssfsi+0x4c>
 a2c:	b9 3f       	cpi	r27, 0xF9	; 249
 a2e:	cc f3       	brlt	.-14     	; 0xa22 <__fixunssfsi+0x34>
 a30:	86 95       	lsr	r24
 a32:	77 95       	ror	r23
 a34:	67 95       	ror	r22
 a36:	b3 95       	inc	r27
 a38:	d9 f7       	brne	.-10     	; 0xa30 <__fixunssfsi+0x42>
 a3a:	3e f4       	brtc	.+14     	; 0xa4a <__fixunssfsi+0x5c>
 a3c:	90 95       	com	r25
 a3e:	80 95       	com	r24
 a40:	70 95       	com	r23
 a42:	61 95       	neg	r22
 a44:	7f 4f       	sbci	r23, 0xFF	; 255
 a46:	8f 4f       	sbci	r24, 0xFF	; 255
 a48:	9f 4f       	sbci	r25, 0xFF	; 255
 a4a:	08 95       	ret

00000a4c <__floatunsisf>:
 a4c:	e8 94       	clt
 a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__floatsisf+0x12>

00000a50 <__floatsisf>:
 a50:	97 fb       	bst	r25, 7
 a52:	3e f4       	brtc	.+14     	; 0xa62 <__floatsisf+0x12>
 a54:	90 95       	com	r25
 a56:	80 95       	com	r24
 a58:	70 95       	com	r23
 a5a:	61 95       	neg	r22
 a5c:	7f 4f       	sbci	r23, 0xFF	; 255
 a5e:	8f 4f       	sbci	r24, 0xFF	; 255
 a60:	9f 4f       	sbci	r25, 0xFF	; 255
 a62:	99 23       	and	r25, r25
 a64:	a9 f0       	breq	.+42     	; 0xa90 <__floatsisf+0x40>
 a66:	f9 2f       	mov	r31, r25
 a68:	96 e9       	ldi	r25, 0x96	; 150
 a6a:	bb 27       	eor	r27, r27
 a6c:	93 95       	inc	r25
 a6e:	f6 95       	lsr	r31
 a70:	87 95       	ror	r24
 a72:	77 95       	ror	r23
 a74:	67 95       	ror	r22
 a76:	b7 95       	ror	r27
 a78:	f1 11       	cpse	r31, r1
 a7a:	f8 cf       	rjmp	.-16     	; 0xa6c <__floatsisf+0x1c>
 a7c:	fa f4       	brpl	.+62     	; 0xabc <__floatsisf+0x6c>
 a7e:	bb 0f       	add	r27, r27
 a80:	11 f4       	brne	.+4      	; 0xa86 <__floatsisf+0x36>
 a82:	60 ff       	sbrs	r22, 0
 a84:	1b c0       	rjmp	.+54     	; 0xabc <__floatsisf+0x6c>
 a86:	6f 5f       	subi	r22, 0xFF	; 255
 a88:	7f 4f       	sbci	r23, 0xFF	; 255
 a8a:	8f 4f       	sbci	r24, 0xFF	; 255
 a8c:	9f 4f       	sbci	r25, 0xFF	; 255
 a8e:	16 c0       	rjmp	.+44     	; 0xabc <__floatsisf+0x6c>
 a90:	88 23       	and	r24, r24
 a92:	11 f0       	breq	.+4      	; 0xa98 <__floatsisf+0x48>
 a94:	96 e9       	ldi	r25, 0x96	; 150
 a96:	11 c0       	rjmp	.+34     	; 0xaba <__floatsisf+0x6a>
 a98:	77 23       	and	r23, r23
 a9a:	21 f0       	breq	.+8      	; 0xaa4 <__floatsisf+0x54>
 a9c:	9e e8       	ldi	r25, 0x8E	; 142
 a9e:	87 2f       	mov	r24, r23
 aa0:	76 2f       	mov	r23, r22
 aa2:	05 c0       	rjmp	.+10     	; 0xaae <__floatsisf+0x5e>
 aa4:	66 23       	and	r22, r22
 aa6:	71 f0       	breq	.+28     	; 0xac4 <__floatsisf+0x74>
 aa8:	96 e8       	ldi	r25, 0x86	; 134
 aaa:	86 2f       	mov	r24, r22
 aac:	70 e0       	ldi	r23, 0x00	; 0
 aae:	60 e0       	ldi	r22, 0x00	; 0
 ab0:	2a f0       	brmi	.+10     	; 0xabc <__floatsisf+0x6c>
 ab2:	9a 95       	dec	r25
 ab4:	66 0f       	add	r22, r22
 ab6:	77 1f       	adc	r23, r23
 ab8:	88 1f       	adc	r24, r24
 aba:	da f7       	brpl	.-10     	; 0xab2 <__floatsisf+0x62>
 abc:	88 0f       	add	r24, r24
 abe:	96 95       	lsr	r25
 ac0:	87 95       	ror	r24
 ac2:	97 f9       	bld	r25, 7
 ac4:	08 95       	ret

00000ac6 <__fp_inf>:
 ac6:	97 f9       	bld	r25, 7
 ac8:	9f 67       	ori	r25, 0x7F	; 127
 aca:	80 e8       	ldi	r24, 0x80	; 128
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	60 e0       	ldi	r22, 0x00	; 0
 ad0:	08 95       	ret

00000ad2 <__fp_nan>:
 ad2:	9f ef       	ldi	r25, 0xFF	; 255
 ad4:	80 ec       	ldi	r24, 0xC0	; 192
 ad6:	08 95       	ret

00000ad8 <__fp_pscA>:
 ad8:	00 24       	eor	r0, r0
 ada:	0a 94       	dec	r0
 adc:	16 16       	cp	r1, r22
 ade:	17 06       	cpc	r1, r23
 ae0:	18 06       	cpc	r1, r24
 ae2:	09 06       	cpc	r0, r25
 ae4:	08 95       	ret

00000ae6 <__fp_pscB>:
 ae6:	00 24       	eor	r0, r0
 ae8:	0a 94       	dec	r0
 aea:	12 16       	cp	r1, r18
 aec:	13 06       	cpc	r1, r19
 aee:	14 06       	cpc	r1, r20
 af0:	05 06       	cpc	r0, r21
 af2:	08 95       	ret

00000af4 <__fp_round>:
 af4:	09 2e       	mov	r0, r25
 af6:	03 94       	inc	r0
 af8:	00 0c       	add	r0, r0
 afa:	11 f4       	brne	.+4      	; 0xb00 <__fp_round+0xc>
 afc:	88 23       	and	r24, r24
 afe:	52 f0       	brmi	.+20     	; 0xb14 <__fp_round+0x20>
 b00:	bb 0f       	add	r27, r27
 b02:	40 f4       	brcc	.+16     	; 0xb14 <__fp_round+0x20>
 b04:	bf 2b       	or	r27, r31
 b06:	11 f4       	brne	.+4      	; 0xb0c <__fp_round+0x18>
 b08:	60 ff       	sbrs	r22, 0
 b0a:	04 c0       	rjmp	.+8      	; 0xb14 <__fp_round+0x20>
 b0c:	6f 5f       	subi	r22, 0xFF	; 255
 b0e:	7f 4f       	sbci	r23, 0xFF	; 255
 b10:	8f 4f       	sbci	r24, 0xFF	; 255
 b12:	9f 4f       	sbci	r25, 0xFF	; 255
 b14:	08 95       	ret

00000b16 <__fp_split3>:
 b16:	57 fd       	sbrc	r21, 7
 b18:	90 58       	subi	r25, 0x80	; 128
 b1a:	44 0f       	add	r20, r20
 b1c:	55 1f       	adc	r21, r21
 b1e:	59 f0       	breq	.+22     	; 0xb36 <__fp_splitA+0x10>
 b20:	5f 3f       	cpi	r21, 0xFF	; 255
 b22:	71 f0       	breq	.+28     	; 0xb40 <__fp_splitA+0x1a>
 b24:	47 95       	ror	r20

00000b26 <__fp_splitA>:
 b26:	88 0f       	add	r24, r24
 b28:	97 fb       	bst	r25, 7
 b2a:	99 1f       	adc	r25, r25
 b2c:	61 f0       	breq	.+24     	; 0xb46 <__fp_splitA+0x20>
 b2e:	9f 3f       	cpi	r25, 0xFF	; 255
 b30:	79 f0       	breq	.+30     	; 0xb50 <__fp_splitA+0x2a>
 b32:	87 95       	ror	r24
 b34:	08 95       	ret
 b36:	12 16       	cp	r1, r18
 b38:	13 06       	cpc	r1, r19
 b3a:	14 06       	cpc	r1, r20
 b3c:	55 1f       	adc	r21, r21
 b3e:	f2 cf       	rjmp	.-28     	; 0xb24 <__fp_split3+0xe>
 b40:	46 95       	lsr	r20
 b42:	f1 df       	rcall	.-30     	; 0xb26 <__fp_splitA>
 b44:	08 c0       	rjmp	.+16     	; 0xb56 <__fp_splitA+0x30>
 b46:	16 16       	cp	r1, r22
 b48:	17 06       	cpc	r1, r23
 b4a:	18 06       	cpc	r1, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	f1 cf       	rjmp	.-30     	; 0xb32 <__fp_splitA+0xc>
 b50:	86 95       	lsr	r24
 b52:	71 05       	cpc	r23, r1
 b54:	61 05       	cpc	r22, r1
 b56:	08 94       	sec
 b58:	08 95       	ret

00000b5a <__fp_zero>:
 b5a:	e8 94       	clt

00000b5c <__fp_szero>:
 b5c:	bb 27       	eor	r27, r27
 b5e:	66 27       	eor	r22, r22
 b60:	77 27       	eor	r23, r23
 b62:	cb 01       	movw	r24, r22
 b64:	97 f9       	bld	r25, 7
 b66:	08 95       	ret

00000b68 <__mulsf3>:
 b68:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__mulsf3x>
 b6c:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_round>
 b70:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_pscA>
 b74:	38 f0       	brcs	.+14     	; 0xb84 <__mulsf3+0x1c>
 b76:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_pscB>
 b7a:	20 f0       	brcs	.+8      	; 0xb84 <__mulsf3+0x1c>
 b7c:	95 23       	and	r25, r21
 b7e:	11 f0       	breq	.+4      	; 0xb84 <__mulsf3+0x1c>
 b80:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__fp_inf>
 b84:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_nan>
 b88:	11 24       	eor	r1, r1
 b8a:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_szero>

00000b8e <__mulsf3x>:
 b8e:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_split3>
 b92:	70 f3       	brcs	.-36     	; 0xb70 <__mulsf3+0x8>

00000b94 <__mulsf3_pse>:
 b94:	95 9f       	mul	r25, r21
 b96:	c1 f3       	breq	.-16     	; 0xb88 <__mulsf3+0x20>
 b98:	95 0f       	add	r25, r21
 b9a:	50 e0       	ldi	r21, 0x00	; 0
 b9c:	55 1f       	adc	r21, r21
 b9e:	62 9f       	mul	r22, r18
 ba0:	f0 01       	movw	r30, r0
 ba2:	72 9f       	mul	r23, r18
 ba4:	bb 27       	eor	r27, r27
 ba6:	f0 0d       	add	r31, r0
 ba8:	b1 1d       	adc	r27, r1
 baa:	63 9f       	mul	r22, r19
 bac:	aa 27       	eor	r26, r26
 bae:	f0 0d       	add	r31, r0
 bb0:	b1 1d       	adc	r27, r1
 bb2:	aa 1f       	adc	r26, r26
 bb4:	64 9f       	mul	r22, r20
 bb6:	66 27       	eor	r22, r22
 bb8:	b0 0d       	add	r27, r0
 bba:	a1 1d       	adc	r26, r1
 bbc:	66 1f       	adc	r22, r22
 bbe:	82 9f       	mul	r24, r18
 bc0:	22 27       	eor	r18, r18
 bc2:	b0 0d       	add	r27, r0
 bc4:	a1 1d       	adc	r26, r1
 bc6:	62 1f       	adc	r22, r18
 bc8:	73 9f       	mul	r23, r19
 bca:	b0 0d       	add	r27, r0
 bcc:	a1 1d       	adc	r26, r1
 bce:	62 1f       	adc	r22, r18
 bd0:	83 9f       	mul	r24, r19
 bd2:	a0 0d       	add	r26, r0
 bd4:	61 1d       	adc	r22, r1
 bd6:	22 1f       	adc	r18, r18
 bd8:	74 9f       	mul	r23, r20
 bda:	33 27       	eor	r19, r19
 bdc:	a0 0d       	add	r26, r0
 bde:	61 1d       	adc	r22, r1
 be0:	23 1f       	adc	r18, r19
 be2:	84 9f       	mul	r24, r20
 be4:	60 0d       	add	r22, r0
 be6:	21 1d       	adc	r18, r1
 be8:	82 2f       	mov	r24, r18
 bea:	76 2f       	mov	r23, r22
 bec:	6a 2f       	mov	r22, r26
 bee:	11 24       	eor	r1, r1
 bf0:	9f 57       	subi	r25, 0x7F	; 127
 bf2:	50 40       	sbci	r21, 0x00	; 0
 bf4:	9a f0       	brmi	.+38     	; 0xc1c <__mulsf3_pse+0x88>
 bf6:	f1 f0       	breq	.+60     	; 0xc34 <__mulsf3_pse+0xa0>
 bf8:	88 23       	and	r24, r24
 bfa:	4a f0       	brmi	.+18     	; 0xc0e <__mulsf3_pse+0x7a>
 bfc:	ee 0f       	add	r30, r30
 bfe:	ff 1f       	adc	r31, r31
 c00:	bb 1f       	adc	r27, r27
 c02:	66 1f       	adc	r22, r22
 c04:	77 1f       	adc	r23, r23
 c06:	88 1f       	adc	r24, r24
 c08:	91 50       	subi	r25, 0x01	; 1
 c0a:	50 40       	sbci	r21, 0x00	; 0
 c0c:	a9 f7       	brne	.-22     	; 0xbf8 <__mulsf3_pse+0x64>
 c0e:	9e 3f       	cpi	r25, 0xFE	; 254
 c10:	51 05       	cpc	r21, r1
 c12:	80 f0       	brcs	.+32     	; 0xc34 <__mulsf3_pse+0xa0>
 c14:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__fp_inf>
 c18:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_szero>
 c1c:	5f 3f       	cpi	r21, 0xFF	; 255
 c1e:	e4 f3       	brlt	.-8      	; 0xc18 <__mulsf3_pse+0x84>
 c20:	98 3e       	cpi	r25, 0xE8	; 232
 c22:	d4 f3       	brlt	.-12     	; 0xc18 <__mulsf3_pse+0x84>
 c24:	86 95       	lsr	r24
 c26:	77 95       	ror	r23
 c28:	67 95       	ror	r22
 c2a:	b7 95       	ror	r27
 c2c:	f7 95       	ror	r31
 c2e:	e7 95       	ror	r30
 c30:	9f 5f       	subi	r25, 0xFF	; 255
 c32:	c1 f7       	brne	.-16     	; 0xc24 <__mulsf3_pse+0x90>
 c34:	fe 2b       	or	r31, r30
 c36:	88 0f       	add	r24, r24
 c38:	91 1d       	adc	r25, r1
 c3a:	96 95       	lsr	r25
 c3c:	87 95       	ror	r24
 c3e:	97 f9       	bld	r25, 7
 c40:	08 95       	ret

00000c42 <__udivmodsi4>:
 c42:	a1 e2       	ldi	r26, 0x21	; 33
 c44:	1a 2e       	mov	r1, r26
 c46:	aa 1b       	sub	r26, r26
 c48:	bb 1b       	sub	r27, r27
 c4a:	fd 01       	movw	r30, r26
 c4c:	0d c0       	rjmp	.+26     	; 0xc68 <__udivmodsi4_ep>

00000c4e <__udivmodsi4_loop>:
 c4e:	aa 1f       	adc	r26, r26
 c50:	bb 1f       	adc	r27, r27
 c52:	ee 1f       	adc	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	a2 17       	cp	r26, r18
 c58:	b3 07       	cpc	r27, r19
 c5a:	e4 07       	cpc	r30, r20
 c5c:	f5 07       	cpc	r31, r21
 c5e:	20 f0       	brcs	.+8      	; 0xc68 <__udivmodsi4_ep>
 c60:	a2 1b       	sub	r26, r18
 c62:	b3 0b       	sbc	r27, r19
 c64:	e4 0b       	sbc	r30, r20
 c66:	f5 0b       	sbc	r31, r21

00000c68 <__udivmodsi4_ep>:
 c68:	66 1f       	adc	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	1a 94       	dec	r1
 c72:	69 f7       	brne	.-38     	; 0xc4e <__udivmodsi4_loop>
 c74:	60 95       	com	r22
 c76:	70 95       	com	r23
 c78:	80 95       	com	r24
 c7a:	90 95       	com	r25
 c7c:	9b 01       	movw	r18, r22
 c7e:	ac 01       	movw	r20, r24
 c80:	bd 01       	movw	r22, r26
 c82:	cf 01       	movw	r24, r30
 c84:	08 95       	ret

00000c86 <__tablejump2__>:
 c86:	ee 0f       	add	r30, r30
 c88:	ff 1f       	adc	r31, r31
 c8a:	05 90       	lpm	r0, Z+
 c8c:	f4 91       	lpm	r31, Z
 c8e:	e0 2d       	mov	r30, r0
 c90:	09 94       	ijmp

00000c92 <__muluhisi3>:
 c92:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__umulhisi3>
 c96:	a5 9f       	mul	r26, r21
 c98:	90 0d       	add	r25, r0
 c9a:	b4 9f       	mul	r27, r20
 c9c:	90 0d       	add	r25, r0
 c9e:	a4 9f       	mul	r26, r20
 ca0:	80 0d       	add	r24, r0
 ca2:	91 1d       	adc	r25, r1
 ca4:	11 24       	eor	r1, r1
 ca6:	08 95       	ret

00000ca8 <__umulsidi3>:
 ca8:	e8 94       	clt

00000caa <__umulsidi3_helper>:
 caa:	df 93       	push	r29
 cac:	cf 93       	push	r28
 cae:	fc 01       	movw	r30, r24
 cb0:	db 01       	movw	r26, r22
 cb2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__umulhisi3>
 cb6:	7f 93       	push	r23
 cb8:	6f 93       	push	r22
 cba:	e9 01       	movw	r28, r18
 cbc:	9a 01       	movw	r18, r20
 cbe:	ac 01       	movw	r20, r24
 cc0:	bf 93       	push	r27
 cc2:	af 93       	push	r26
 cc4:	3f 93       	push	r19
 cc6:	2f 93       	push	r18
 cc8:	df 01       	movw	r26, r30
 cca:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__umulhisi3>
 cce:	26 f4       	brtc	.+8      	; 0xcd8 <__umulsidi3_helper+0x2e>
 cd0:	6c 1b       	sub	r22, r28
 cd2:	7d 0b       	sbc	r23, r29
 cd4:	82 0b       	sbc	r24, r18
 cd6:	93 0b       	sbc	r25, r19
 cd8:	9e 01       	movw	r18, r28
 cda:	eb 01       	movw	r28, r22
 cdc:	fc 01       	movw	r30, r24
 cde:	0e 94 ac 06 	call	0xd58	; 0xd58 <__muldi3_6>
 ce2:	af 91       	pop	r26
 ce4:	bf 91       	pop	r27
 ce6:	2f 91       	pop	r18
 ce8:	3f 91       	pop	r19
 cea:	0e 94 ac 06 	call	0xd58	; 0xd58 <__muldi3_6>
 cee:	be 01       	movw	r22, r28
 cf0:	cf 01       	movw	r24, r30
 cf2:	f9 01       	movw	r30, r18
 cf4:	2f 91       	pop	r18
 cf6:	3f 91       	pop	r19
 cf8:	cf 91       	pop	r28
 cfa:	df 91       	pop	r29
 cfc:	08 95       	ret

00000cfe <__ashrdi3>:
 cfe:	97 fb       	bst	r25, 7
 d00:	10 f8       	bld	r1, 0

00000d02 <__lshrdi3>:
 d02:	16 94       	lsr	r1
 d04:	00 08       	sbc	r0, r0
 d06:	0f 93       	push	r16
 d08:	08 30       	cpi	r16, 0x08	; 8
 d0a:	98 f0       	brcs	.+38     	; 0xd32 <__lshrdi3+0x30>
 d0c:	08 50       	subi	r16, 0x08	; 8
 d0e:	23 2f       	mov	r18, r19
 d10:	34 2f       	mov	r19, r20
 d12:	45 2f       	mov	r20, r21
 d14:	56 2f       	mov	r21, r22
 d16:	67 2f       	mov	r22, r23
 d18:	78 2f       	mov	r23, r24
 d1a:	89 2f       	mov	r24, r25
 d1c:	90 2d       	mov	r25, r0
 d1e:	f4 cf       	rjmp	.-24     	; 0xd08 <__lshrdi3+0x6>
 d20:	05 94       	asr	r0
 d22:	97 95       	ror	r25
 d24:	87 95       	ror	r24
 d26:	77 95       	ror	r23
 d28:	67 95       	ror	r22
 d2a:	57 95       	ror	r21
 d2c:	47 95       	ror	r20
 d2e:	37 95       	ror	r19
 d30:	27 95       	ror	r18
 d32:	0a 95       	dec	r16
 d34:	aa f7       	brpl	.-22     	; 0xd20 <__lshrdi3+0x1e>
 d36:	0f 91       	pop	r16
 d38:	08 95       	ret

00000d3a <__umulhisi3>:
 d3a:	a2 9f       	mul	r26, r18
 d3c:	b0 01       	movw	r22, r0
 d3e:	b3 9f       	mul	r27, r19
 d40:	c0 01       	movw	r24, r0
 d42:	a3 9f       	mul	r26, r19
 d44:	70 0d       	add	r23, r0
 d46:	81 1d       	adc	r24, r1
 d48:	11 24       	eor	r1, r1
 d4a:	91 1d       	adc	r25, r1
 d4c:	b2 9f       	mul	r27, r18
 d4e:	70 0d       	add	r23, r0
 d50:	81 1d       	adc	r24, r1
 d52:	11 24       	eor	r1, r1
 d54:	91 1d       	adc	r25, r1
 d56:	08 95       	ret

00000d58 <__muldi3_6>:
 d58:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__umulhisi3>
 d5c:	46 0f       	add	r20, r22
 d5e:	57 1f       	adc	r21, r23
 d60:	c8 1f       	adc	r28, r24
 d62:	d9 1f       	adc	r29, r25
 d64:	08 f4       	brcc	.+2      	; 0xd68 <__muldi3_6+0x10>
 d66:	31 96       	adiw	r30, 0x01	; 1
 d68:	08 95       	ret

00000d6a <ccp_write_io>:
 d6a:	dc 01       	movw	r26, r24
 d6c:	28 ed       	ldi	r18, 0xD8	; 216
 d6e:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
 d72:	6c 93       	st	X, r22
 d74:	08 95       	ret

00000d76 <_exit>:
 d76:	f8 94       	cli

00000d78 <__stop_program>:
 d78:	ff cf       	rjmp	.-2      	; 0xd78 <__stop_program>
